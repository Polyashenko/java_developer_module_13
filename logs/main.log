2023-12-01 08:45:38,351 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:45:38,354 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:45:38,357 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:45:38,376 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:45:38,377 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.format_sql=true, hibernate.hbm2ddl.auto=validate, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.autocommit=true, hibernate.show_sql=true, hibernate.connection.driver_class=org.h2.Driver, hibernate.connection.password=****, hibernate.connection.pool_size=10}
2023-12-01 08:45:38,388 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:45:38,390 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:45:38,394 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:45:38,396 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:45:38,396 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:45:38,396 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:45:38,396 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:45:38,397 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:45:38,397 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:45:38,397 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:45:38,397 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:45:38,398 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:45:38,398 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:45:38,398 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:45:38,398 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:45:38,403 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:45:38,403 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:45:38,430 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:45:38,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:45:38,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:45:38,433 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:45:38,434 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-01 08:45:38,435 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@1603cd68
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1603cd68
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@5bf0fe62
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:45:38,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:45:38,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:45:38,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:45:38,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-01 08:45:38,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@77128536
2023-12-01 08:45:38,450 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:45:38,450 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:45:38,450 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:45:38,450 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:45:38,450 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:45:38,452 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:45:38,452 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:45:38,462 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:45:38,462 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:45:38,462 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:45:38,469 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:45:38,473 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:45:38,473 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:45:38,477 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:45:38,484 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:45:38,485 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:45:38,485 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:45:38,485 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:45:38,486 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:45:38,486 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:45:38,488 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:45:38,488 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:45:38,491 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13cf7d52] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3a3e4aff]
2023-12-01 08:45:38,506 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:45:38,516 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:45:38,518 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:45:38,520 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:45:38,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:45:38,528 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:45:38,528 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:45:38,528 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:45:38,529 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:45:38,531 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:45:38,532 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:45:38,533 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:45:38,534 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:45:38,535 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:45:38,535 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:45:38,535 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:45:38,535 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:45:38,535 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:45:38,535 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:45:38,535 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:45:38,537 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:45:38,537 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:45:38,537 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:45:38,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:45:38,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:45:38,538 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:45:38,538 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:45:38,538 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:45:38,538 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:45:38,538 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:45:38,538 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:45:38,539 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:45:38,539 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:45:38,539 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:45:38,539 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:45:38,539 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:45:38,539 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:45:38,539 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:45:38,539 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:45:38,539 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:45:38,539 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:45:38,539 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:45:38,539 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:45:38,539 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:45:38,539 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:45:38,540 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:45:38,540 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:45:38,540 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:45:38,540 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:45:38,542 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:45:38,542 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:45:38,542 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:45:38,542 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:45:38,542 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:45:38,543 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:45:38,543 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:45:38,543 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:45:38,543 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:45:38,544 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:45:38,545 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:45:38,546 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:45:38,546 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:45:38,546 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:45:38,546 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:45:38,546 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:45:38,546 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:45:38,546 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:45:38,546 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:45:38,547 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FROM_PLANET_ID')
2023-12-01 08:45:38,547 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property fromPlanetId with lazy=false
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:fromPlanetId]
2023-12-01 08:45:38,547 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for fromPlanetId
2023-12-01 08:45:38,547 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.FROM_PLANET_ID
2023-12-01 08:45:38,547 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanetId
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:45:38,547 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='TO_PLANET_ID')
2023-12-01 08:45:38,547 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property toPlanetId with lazy=false
2023-12-01 08:45:38,547 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:toPlanetId]
2023-12-01 08:45:38,548 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for toPlanetId
2023-12-01 08:45:38,548 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.TO_PLANET_ID
2023-12-01 08:45:38,548 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanetId
2023-12-01 08:45:38,548 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:45:38,548 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for fromPlanetId
2023-12-01 08:45:38,549 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for toPlanetId
2023-12-01 08:45:38,551 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:45:38,551 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:45:38,551 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:45:38,552 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:45:38,553 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:45:38,553 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:45:38,557 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:45:38,557 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:45:38,557 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:45:38,565 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:45:38,620 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:45:38,634 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:45:38,634 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.hbm2ddl.auto=validate, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@16a9a4f1, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:45:38,635 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:45:38,638 +0200 [main] DEBUG (SessionFactoryImpl.java:866) - HHH000031: Closing
2023-12-01 08:45:38,638 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@1704f67f
2023-12-01 08:45:38,639 +0200 [main] DEBUG (AbstractServiceRegistryImpl.java:414) - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-12-01 08:45:38,639 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:601) - HHH10001008: Cleaning up connection pool [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:45:38,668 +0200 [main] DEBUG (BootstrapServiceRegistryImpl.java:298) - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-12-01 08:48:52,266 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:48:52,270 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:48:52,272 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:48:52,290 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:48:52,291 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.format_sql=true, hibernate.hbm2ddl.auto=validate, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.autocommit=true, hibernate.show_sql=true, hibernate.connection.driver_class=org.h2.Driver, hibernate.connection.password=****, hibernate.connection.pool_size=10}
2023-12-01 08:48:52,300 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:48:52,302 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:48:52,306 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:48:52,307 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:48:52,308 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:48:52,308 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:48:52,308 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:48:52,308 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:48:52,308 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:48:52,308 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:48:52,309 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:48:52,309 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:48:52,310 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:48:52,310 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:48:52,310 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:48:52,314 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:48:52,315 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:48:52,341 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:48:52,342 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:48:52,343 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:48:52,344 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:48:52,345 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:48:52,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:48:52,348 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:48:52,348 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@13ad5cd3
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:48:52,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:48:52,359 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:48:52,360 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:48:52,360 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:48:52,360 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:48:52,360 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:48:52,361 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:48:52,361 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:48:52,370 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:48:52,370 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:48:52,370 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:48:52,378 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:48:52,381 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:48:52,381 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:48:52,384 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:48:52,389 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:48:52,390 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:48:52,390 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:48:52,390 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:48:52,390 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:48:52,391 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:48:52,393 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:48:52,393 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:48:52,394 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18025ced]
2023-12-01 08:48:52,408 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:48:52,419 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:48:52,421 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:48:52,424 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:48:52,426 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:48:52,432 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:48:52,432 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:48:52,432 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:48:52,433 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:48:52,434 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:48:52,436 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:48:52,437 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:48:52,438 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:48:52,439 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:48:52,439 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:48:52,439 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:48:52,439 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:48:52,439 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:48:52,439 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:48:52,439 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:48:52,442 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:48:52,442 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:48:52,442 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:48:52,442 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:48:52,443 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:48:52,443 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:48:52,443 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:48:52,443 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:48:52,443 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:48:52,443 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:48:52,443 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:48:52,443 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:48:52,443 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:48:52,443 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:48:52,443 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:48:52,443 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:48:52,443 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:48:52,443 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:48:52,443 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:48:52,444 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:48:52,444 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:48:52,444 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:48:52,444 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:48:52,444 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:48:52,444 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:48:52,444 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:48:52,444 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:48:52,444 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:48:52,444 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:48:52,446 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:48:52,446 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:48:52,446 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:48:52,446 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:48:52,447 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:48:52,447 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:48:52,447 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:48:52,447 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:48:52,447 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:48:52,448 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:48:52,448 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:48:52,450 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:48:52,450 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:48:52,450 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:48:52,450 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:48:52,450 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:48:52,450 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:48:52,450 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:48:52,450 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:48:52,450 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:48:52,451 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:48:52,451 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:48:52,451 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:48:52,451 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:48:52,451 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='TO_PLANET_ID')
2023-12-01 08:48:52,451 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property toPlanetId with lazy=false
2023-12-01 08:48:52,451 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:toPlanetId]
2023-12-01 08:48:52,451 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for toPlanetId
2023-12-01 08:48:52,451 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.TO_PLANET_ID
2023-12-01 08:48:52,451 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanetId
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:48:52,452 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for toPlanetId
2023-12-01 08:48:52,454 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:48:52,455 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:48:52,455 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:48:52,456 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:48:52,457 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:48:52,457 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:48:52,461 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:48:52,461 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:48:52,461 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:48:52,469 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:48:52,526 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:48:52,539 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:48:52,539 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.hbm2ddl.auto=validate, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@52b6319f, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:48:52,541 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:48:52,544 +0200 [main] DEBUG (SessionFactoryImpl.java:866) - HHH000031: Closing
2023-12-01 08:48:52,544 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@141e879d
2023-12-01 08:48:52,544 +0200 [main] DEBUG (AbstractServiceRegistryImpl.java:414) - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-12-01 08:48:52,544 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:601) - HHH10001008: Cleaning up connection pool [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:48:52,571 +0200 [main] DEBUG (BootstrapServiceRegistryImpl.java:298) - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-12-01 08:49:23,846 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:49:23,848 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:49:23,850 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:49:23,867 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:49:23,867 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.format_sql=true, hibernate.hbm2ddl.auto=validate, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.autocommit=true, hibernate.show_sql=true, hibernate.connection.driver_class=org.h2.Driver, hibernate.connection.password=****, hibernate.connection.pool_size=10}
2023-12-01 08:49:23,873 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:49:23,875 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:49:23,878 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:49:23,880 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:49:23,880 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:49:23,880 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:49:23,880 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:49:23,880 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:49:23,881 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:49:23,881 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:49:23,881 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:49:23,882 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:49:23,882 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:49:23,882 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:49:23,883 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:49:23,886 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:49:23,887 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:49:23,911 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:49:23,912 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:49:23,913 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:49:23,914 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:49:23,915 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:49:23,916 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:49:23,918 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:49:23,918 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:49:23,918 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@13ad5cd3
2023-12-01 08:49:23,918 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 08:49:23,918 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 08:49:23,919 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:49:23,919 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:49:23,919 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:49:23,919 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:49:23,919 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:49:23,919 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:49:23,928 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:49:23,928 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:49:23,929 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:49:23,929 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:49:23,929 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:49:23,930 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:49:23,930 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:49:23,938 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:49:23,938 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:49:23,938 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:49:23,944 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:49:23,947 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:49:23,948 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:49:23,951 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:49:23,958 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:49:23,958 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:49:23,958 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:49:23,959 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:49:23,959 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:49:23,959 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:49:23,962 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:49:23,962 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:49:23,963 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18025ced]
2023-12-01 08:49:23,977 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:49:23,987 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:49:23,989 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:49:23,991 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:49:23,994 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:49:23,999 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:49:23,999 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:49:23,999 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:49:24,000 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:49:24,001 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:49:24,003 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:49:24,004 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:49:24,004 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:49:24,005 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:49:24,005 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:49:24,005 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:49:24,005 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:49:24,005 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:49:24,006 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:49:24,006 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:49:24,007 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:49:24,008 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:49:24,008 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:49:24,008 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:49:24,008 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:49:24,008 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:49:24,008 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:49:24,008 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:49:24,008 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:49:24,008 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:49:24,008 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:49:24,009 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:49:24,009 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:49:24,009 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:49:24,009 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:49:24,009 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:49:24,009 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:49:24,009 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:49:24,009 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:49:24,009 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:49:24,009 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:49:24,009 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:49:24,009 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:49:24,009 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:49:24,009 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:49:24,010 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:49:24,010 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:49:24,010 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:49:24,010 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:49:24,012 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:49:24,012 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:49:24,012 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:49:24,012 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:49:24,012 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:49:24,012 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:49:24,012 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:49:24,012 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:49:24,013 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:49:24,014 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:49:24,014 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:49:24,016 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:49:24,016 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:49:24,016 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:49:24,016 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:49:24,016 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:49:24,016 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:49:24,016 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:49:24,016 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:49:24,016 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:49:24,016 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:49:24,016 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:49:24,016 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:49:24,017 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:49:24,017 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:49:24,017 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:49:24,018 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:49:24,018 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:49:24,018 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:49:24,018 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:49:24,018 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:49:24,020 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:49:24,020 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:49:24,020 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:49:24,021 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:49:24,022 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:49:24,022 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:49:24,025 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:49:24,025 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:49:24,025 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:49:24,032 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:49:24,081 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:49:24,093 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:49:24,093 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.hbm2ddl.auto=validate, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@52b6319f, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:49:24,094 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:49:24,112 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 08:49:24,112 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 08:49:24,112 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 08:49:24,112 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@58d63b16] under count; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@76d05cc9] under every; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@42b21d99] under any; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 08:49:24,113 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@47547132] under sinh; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@655523dd] under cosh; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6f7e336b] under tanh; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3a2b2322] under pi; prior registration was null
2023-12-01 08:49:24,114 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5e1218b4] under log; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 08:49:24,115 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@46678e49] under position; prior registration was null
2023-12-01 08:49:24,116 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77cb9cd1] under overlay; prior registration was null
2023-12-01 08:49:24,116 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@3e4f80cb] under trim; prior registration was null
2023-12-01 08:49:24,116 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@e04ccf8] under cast; prior registration was null
2023-12-01 08:49:24,116 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@51d143a1] under collate; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@359b650b] under extract; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@77c7ed8e] under ifnull; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@640dc4c6] under pad; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@2a1debfa] under str; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@616b241a] under format; prior registration was null
2023-12-01 08:49:24,117 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@4441d567] under timestampadd; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@f3fcd59] under timestampdiff; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@64c4c01] under current_date; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1aa99005] under current_time; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@592238c5] under current_timestamp; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@6ee8dcd3] under local_date; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@a20b94b] under local_time; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5cdf39b2] under local_datetime; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14f3c6fc] under offset_datetime; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3cd59ef5] under instant; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@cfbc8e8] under sql; prior registration was null
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:49:24,118 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@3bead518] under count; prior registration was org.hibernate.dialect.function.CountFunction@58d63b16
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7918c7f8] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3a2b2322
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@17740dae] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@a20b94b
2023-12-01 08:49:24,119 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@5cdf39b2
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@49cf9028] under trunc; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2b61a019] under date_trunc; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@11a00961] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@46678e49
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@7ce9e05a] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@4992613f] under format; prior registration was org.hibernate.dialect.function.FormatFunction@616b241a
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 08:49:24,120 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@26a4551a] under listagg; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@290aeb20] under mode; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@73ad4ecc] under percentile_cont; prior registration was null
2023-12-01 08:49:24,121 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@69da0b12] under percentile_disc; prior registration was null
2023-12-01 08:49:24,123 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@79b08632] under rank; prior registration was null
2023-12-01 08:49:24,123 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@787f32b7] under dense_rank; prior registration was null
2023-12-01 08:49:24,123 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@6aef4eb8] under percent_rank; prior registration was null
2023-12-01 08:49:24,123 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@76c52298] under cume_dist; prior registration was null
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 08:49:24,124 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 08:49:24,125 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 08:49:24,126 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 08:49:24,127 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 08:49:24,128 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 08:49:24,130 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 08:49:24,166 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:49:24,166 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 08:49:24,195 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,196 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,197 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,197 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,197 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,197 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,197 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:49:24,197 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:49:24,275 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 08:49:24,277 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,277 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,277 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:49:24,287 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:49:24,287 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:49:24,293 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 08:49:24,293 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:49:24,293 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:49:24,298 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 08:49:24,308 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 08:49:24,308 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 08:49:24,309 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 08:49:24,309 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 08:49:24,309 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 08:49:24,310 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 08:49:24,310 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 08:49:24,336 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 08:49:24,336 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 08:49:24,336 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 08:49:24,336 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 08:49:24,336 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 08:49:24,343 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 08:49:24,345 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 08:49:24,349 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2ee83775] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 08:49:24,349 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:49:24,351 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@3c66b7d8] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 08:49:24,351 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 08:49:24,351 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@37e69c43] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 08:49:24,351 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 08:49:24,354 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 08:49:24,355 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 08:49:24,358 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 08:49:24,359 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 08:49:24,359 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:49:24,359 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 08:49:24,359 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:49:24,359 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 08:49:24,359 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 08:49:24,359 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:49:24,359 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 08:49:24,359 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 08:49:24,359 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 08:49:24,370 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 08:49:24,370 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 08:49:24,372 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 08:49:24,372 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 08:49:24,372 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3f96f020]
2023-12-01 08:49:24,373 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 08:49:24,373 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 08:49:24,383 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - Unable to build DatabaseInformation [n/a]
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "start_value" not found [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.jdbc.JdbcResultSet.getColumnIndex(JdbcResultSet.java:3169)
	at org.h2.jdbc.JdbcResultSet.get(JdbcResultSet.java:3268)
	at org.h2.jdbc.JdbcResultSet.getLong(JdbcResultSet.java:680)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.resultSetStartValueSize(SequenceInformationExtractorLegacyImpl.java:110)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.lambda$extractMetadata$0(SequenceInformationExtractorLegacyImpl.java:54)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:50)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaValidator.doValidation(AbstractSchemaValidator.java:67)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:295)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:941)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:960)
	at org.example.HibernateUtil.<init>(HibernateUtil.java:25)
	at org.example.HibernateUtil.<clinit>(HibernateUtil.java:17)
	at org.example.service.PlanetCrudService.<init>(PlanetCrudService.java:20)
	at org.example.App.main(App.java:14)
2023-12-01 08:49:24,384 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 42122, SQLState: 42S22
2023-12-01 08:49:24,384 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Column "start_value" not found [42122-200]
2023-12-01 08:49:24,385 +0200 [main] DEBUG (SessionFactoryImpl.java:866) - HHH000031: Closing
2023-12-01 08:49:24,385 +0200 [main] DEBUG (TypeConfiguration.java:553) - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@3fa7df1] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@3f96f020]
2023-12-01 08:49:24,386 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4116f66a
2023-12-01 08:49:24,386 +0200 [main] DEBUG (AbstractServiceRegistryImpl.java:414) - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-12-01 08:49:24,386 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:601) - HHH10001008: Cleaning up connection pool [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:49:24,386 +0200 [main] ERROR (DriverManagerConnectionProviderImpl.java:470) - Connection leak detected: there are 1 unclosed connections upon shutting down pool jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL
2023-12-01 08:49:24,386 +0200 [main] ERROR (DriverManagerConnectionProviderImpl.java:301) - Connection leak detected: there are 1 unclosed connections
2023-12-01 08:49:24,387 +0200 [main] DEBUG (BootstrapServiceRegistryImpl.java:298) - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-12-01 08:53:53,344 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:53:53,347 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:53:53,349 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:53:53,366 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:53:53,367 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.format_sql=true, hibernate.hbm2ddl.auto=validate, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.autocommit=true, hibernate.show_sql=true, hibernate.connection.driver_class=org.h2.Driver, hibernate.connection.password=****, hibernate.connection.pool_size=10}
2023-12-01 08:53:53,376 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:53:53,378 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:53:53,382 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:53:53,383 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:53:53,384 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:53:53,384 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:53:53,384 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:53:53,384 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:53:53,384 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:53:53,384 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:53:53,385 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:53:53,386 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:53:53,386 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:53:53,386 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:53:53,386 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:53:53,390 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:53:53,391 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:53:53,417 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:53:53,418 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:53:53,419 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:53:53,420 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:53:53,421 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:53:53,422 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:53:53,422 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:53:53,423 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@13ad5cd3
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:53:53,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:53:53,434 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:53:53,434 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:53:53,434 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:53:53,434 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:53:53,434 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:53:53,435 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:53:53,435 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:53:53,444 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:53:53,444 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:53:53,444 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:53:53,451 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:53:53,454 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:53:53,454 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:53:53,457 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:53:53,462 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:53:53,462 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:53:53,462 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:53:53,463 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:53:53,463 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:53:53,464 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:53:53,465 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:53:53,465 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:53:53,467 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18025ced]
2023-12-01 08:53:53,482 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:53:53,493 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:53:53,495 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:53:53,498 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:53:53,500 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:53:53,505 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:53:53,506 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:53:53,506 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:53:53,507 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:53:53,508 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:53:53,510 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:53:53,511 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:53:53,511 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:53:53,512 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:53:53,512 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:53:53,512 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:53:53,512 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:53:53,513 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:53:53,513 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:53:53,513 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:53:53,515 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:53:53,515 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:53:53,515 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:53:53,515 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:53:53,516 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:53:53,516 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:53:53,516 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:53:53,516 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:53:53,516 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:53:53,516 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:53:53,516 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:53:53,516 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:53:53,516 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:53:53,516 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:53:53,516 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:53:53,516 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:53:53,516 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:53:53,516 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:53:53,516 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:53:53,516 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:53:53,517 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:53:53,517 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:53:53,517 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:53:53,517 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:53:53,517 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:53:53,517 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:53:53,517 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:53:53,517 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:53:53,517 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:53:53,519 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:53:53,519 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:53:53,519 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:53:53,519 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:53:53,519 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:53:53,520 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:53:53,520 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:53:53,520 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:53:53,520 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:53:53,521 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:53:53,521 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:53:53,523 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:53:53,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:53:53,523 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:53:53,523 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:53:53,523 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:53:53,523 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:53:53,523 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:53:53,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:53:53,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:53:53,523 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:53:53,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:53:53,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:53:53,523 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:53:53,524 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:53:53,524 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:53:53,525 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:53:53,525 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:53:53,525 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:53:53,525 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:53:53,525 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:53:53,527 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:53:53,527 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:53:53,527 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:53:53,528 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:53:53,529 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:53:53,529 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:53:53,532 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:53:53,532 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:53:53,532 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:53:53,540 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:53:53,594 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:53:53,607 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:53:53,607 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.hbm2ddl.auto=validate, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@52b6319f, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:53:53,608 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:53:53,624 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 08:53:53,624 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 08:53:53,625 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 08:53:53,625 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 08:53:53,625 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@58d63b16] under count; prior registration was null
2023-12-01 08:53:53,625 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@76d05cc9] under every; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@42b21d99] under any; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 08:53:53,626 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@47547132] under sinh; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@655523dd] under cosh; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6f7e336b] under tanh; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3a2b2322] under pi; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5e1218b4] under log; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 08:53:53,627 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 08:53:53,628 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@46678e49] under position; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77cb9cd1] under overlay; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@3e4f80cb] under trim; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@e04ccf8] under cast; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@51d143a1] under collate; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@359b650b] under extract; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@77c7ed8e] under ifnull; prior registration was null
2023-12-01 08:53:53,629 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 08:53:53,630 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 08:53:53,630 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@640dc4c6] under pad; prior registration was null
2023-12-01 08:53:53,630 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@2a1debfa] under str; prior registration was null
2023-12-01 08:53:53,630 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@616b241a] under format; prior registration was null
2023-12-01 08:53:53,630 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@4441d567] under timestampadd; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@f3fcd59] under timestampdiff; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@64c4c01] under current_date; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1aa99005] under current_time; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@592238c5] under current_timestamp; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@6ee8dcd3] under local_date; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@a20b94b] under local_time; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5cdf39b2] under local_datetime; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14f3c6fc] under offset_datetime; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3cd59ef5] under instant; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@cfbc8e8] under sql; prior registration was null
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:53:53,631 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@3bead518] under count; prior registration was org.hibernate.dialect.function.CountFunction@58d63b16
2023-12-01 08:53:53,632 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7918c7f8] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:53:53,632 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3a2b2322
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@17740dae] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@a20b94b
2023-12-01 08:53:53,633 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@5cdf39b2
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@49cf9028] under trunc; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2b61a019] under date_trunc; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@11a00961] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@46678e49
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@7ce9e05a] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 08:53:53,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@4992613f] under format; prior registration was org.hibernate.dialect.function.FormatFunction@616b241a
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 08:53:53,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@26a4551a] under listagg; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@290aeb20] under mode; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@73ad4ecc] under percentile_cont; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@69da0b12] under percentile_disc; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@79b08632] under rank; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@787f32b7] under dense_rank; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@6aef4eb8] under percent_rank; prior registration was null
2023-12-01 08:53:53,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@76c52298] under cume_dist; prior registration was null
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 08:53:53,637 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 08:53:53,638 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 08:53:53,639 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 08:53:53,640 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 08:53:53,641 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 08:53:53,641 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 08:53:53,641 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 08:53:53,643 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 08:53:53,678 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:53:53,678 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 08:53:53,703 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,705 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,705 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,705 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,706 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,706 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,706 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:53:53,706 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:53:53,778 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 08:53:53,779 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,779 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,779 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:53:53,789 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:53:53,789 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:53:53,794 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 08:53:53,795 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:53:53,795 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:53:53,800 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 08:53:53,809 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 08:53:53,809 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 08:53:53,811 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 08:53:53,811 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 08:53:53,811 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 08:53:53,811 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 08:53:53,811 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 08:53:53,836 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 08:53:53,836 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 08:53:53,836 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 08:53:53,836 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 08:53:53,836 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 08:53:53,842 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 08:53:53,843 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 08:53:53,847 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2ee83775] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 08:53:53,848 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:53:53,849 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@3c66b7d8] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 08:53:53,849 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 08:53:53,849 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@37e69c43] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 08:53:53,849 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 08:53:53,851 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 08:53:53,852 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 08:53:53,855 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 08:53:53,855 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 08:53:53,855 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 08:53:53,855 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 08:53:53,855 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 08:53:53,855 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:53:53,855 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:53:53,856 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 08:53:53,856 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:53:53,856 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 08:53:53,856 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 08:53:53,856 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 08:53:53,856 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 08:53:53,856 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 08:53:53,856 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:53:53,856 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 08:53:53,856 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 08:53:53,856 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 08:53:53,865 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 08:53:53,866 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 08:53:53,867 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 08:53:53,867 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 08:53:53,867 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3f96f020]
2023-12-01 08:53:53,867 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 08:53:53,867 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 08:53:53,876 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - Unable to build DatabaseInformation [n/a]
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "start_value" not found [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.jdbc.JdbcResultSet.getColumnIndex(JdbcResultSet.java:3169)
	at org.h2.jdbc.JdbcResultSet.get(JdbcResultSet.java:3268)
	at org.h2.jdbc.JdbcResultSet.getLong(JdbcResultSet.java:680)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.resultSetStartValueSize(SequenceInformationExtractorLegacyImpl.java:110)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.lambda$extractMetadata$0(SequenceInformationExtractorLegacyImpl.java:54)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:50)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaValidator.doValidation(AbstractSchemaValidator.java:67)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:295)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:941)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:960)
	at org.example.HibernateUtil.<init>(HibernateUtil.java:25)
	at org.example.HibernateUtil.<clinit>(HibernateUtil.java:17)
	at org.example.service.PlanetCrudService.<init>(PlanetCrudService.java:20)
	at org.example.App.main(App.java:14)
2023-12-01 08:53:53,877 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 42122, SQLState: 42S22
2023-12-01 08:53:53,877 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Column "start_value" not found [42122-200]
2023-12-01 08:53:53,877 +0200 [main] DEBUG (SessionFactoryImpl.java:866) - HHH000031: Closing
2023-12-01 08:53:53,878 +0200 [main] DEBUG (TypeConfiguration.java:553) - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@3fa7df1] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@3f96f020]
2023-12-01 08:53:53,878 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4116f66a
2023-12-01 08:53:53,878 +0200 [main] DEBUG (AbstractServiceRegistryImpl.java:414) - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-12-01 08:53:53,878 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:601) - HHH10001008: Cleaning up connection pool [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:53:53,879 +0200 [main] ERROR (DriverManagerConnectionProviderImpl.java:470) - Connection leak detected: there are 1 unclosed connections upon shutting down pool jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL
2023-12-01 08:53:53,879 +0200 [main] ERROR (DriverManagerConnectionProviderImpl.java:301) - Connection leak detected: there are 1 unclosed connections
2023-12-01 08:53:53,879 +0200 [main] DEBUG (BootstrapServiceRegistryImpl.java:298) - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-12-01 08:55:46,918 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:55:46,921 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:55:46,923 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:55:46,940 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:55:46,941 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-01 08:55:46,949 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:55:46,951 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:55:46,955 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:55:46,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:55:46,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:55:46,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:55:46,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:55:46,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:55:46,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:55:46,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:55:46,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:55:46,959 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:55:46,959 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:55:46,959 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:55:46,960 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:55:46,964 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:55:46,964 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:55:46,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:55:46,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:55:46,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:55:46,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:55:46,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:55:46,994 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@13ad5cd3
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:55:46,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:55:46,997 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:55:46,997 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:55:47,006 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:55:47,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:55:47,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:55:47,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:55:47,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:55:47,008 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:55:47,008 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:55:47,016 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:55:47,017 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:55:47,017 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:55:47,025 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:55:47,027 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:55:47,028 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:55:47,031 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:55:47,036 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:55:47,036 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:55:47,036 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:55:47,037 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:55:47,037 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:55:47,037 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:55:47,039 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:55:47,039 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:55:47,041 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18025ced]
2023-12-01 08:55:47,055 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:55:47,065 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:55:47,067 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:55:47,069 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:55:47,072 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:55:47,077 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:55:47,078 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:55:47,078 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:55:47,079 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:55:47,080 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:55:47,082 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:55:47,083 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:55:47,083 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:55:47,084 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:55:47,084 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:55:47,084 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:55:47,084 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:55:47,085 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:55:47,085 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:55:47,085 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:55:47,087 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:55:47,087 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:55:47,087 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:55:47,087 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:55:47,088 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:55:47,088 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:55:47,088 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:55:47,088 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:55:47,088 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:55:47,088 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:55:47,088 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:55:47,088 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:55:47,088 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:55:47,088 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:55:47,088 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:55:47,088 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:55:47,089 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:55:47,089 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:55:47,089 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:55:47,089 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:55:47,089 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:55:47,089 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:55:47,089 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:55:47,089 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:55:47,089 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:55:47,090 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:55:47,090 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:55:47,090 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:55:47,090 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:55:47,092 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:55:47,092 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:55:47,092 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:55:47,092 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:55:47,092 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:55:47,092 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:55:47,093 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:55:47,093 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:55:47,093 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:55:47,094 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:55:47,094 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:55:47,096 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:55:47,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:55:47,096 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:55:47,096 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:55:47,096 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:55:47,096 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:55:47,096 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:55:47,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:55:47,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:55:47,096 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:55:47,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:55:47,097 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:55:47,097 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:55:47,097 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:55:47,097 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:55:47,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:55:47,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:55:47,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:55:47,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:55:47,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:55:47,100 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:55:47,100 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:55:47,100 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:55:47,101 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:55:47,102 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:55:47,102 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:55:47,105 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:55:47,105 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:55:47,105 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:55:47,113 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:55:47,170 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:55:47,182 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:55:47,182 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@52b6319f, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:55:47,184 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:55:47,186 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 08:55:47,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 08:55:47,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 08:55:47,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 08:55:47,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@37b72ea] under count; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@4e92466a] under every; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@66e8997c] under any; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 08:55:47,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 08:55:47,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4a68135e] under sinh; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@46678e49] under cosh; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@748e9b20] under tanh; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2063c53e] under pi; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2a9bc08f] under log; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 08:55:47,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 08:55:47,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@1549bba7] under position; prior registration was null
2023-12-01 08:55:47,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@1a28aef1] under overlay; prior registration was null
2023-12-01 08:55:47,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@6a9b0a6f] under trim; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@640dc4c6] under cast; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4b54af3d] under collate; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@44de94c3] under extract; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@11de56e6] under ifnull; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@7cb2651f] under pad; prior registration was null
2023-12-01 08:55:47,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@dcc6211] under str; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@79d743e6] under format; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@592238c5] under timestampadd; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@16073fa8] under timestampdiff; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14bf57b2] under current_date; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46d9aec8] under current_time; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14379273] under current_timestamp; prior registration was null
2023-12-01 08:55:47,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7918c7f8] under local_date; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@17740dae] under local_time; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1c504e66] under local_datetime; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@345cf395] under offset_datetime; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under instant; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@5c82cd4f] under sql; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@35835e65] under count; prior registration was org.hibernate.dialect.function.CountFunction@37b72ea
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@1fde4f40] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2063c53e
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@49cf9028] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 08:55:47,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@17740dae
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@1c504e66
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@344426bf] under trunc; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5411dd90] under date_trunc; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 08:55:47,210 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50194e8d] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@1549bba7
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3cee53dc] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@290aeb20] under format; prior registration was org.hibernate.dialect.function.FormatFunction@79d743e6
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 08:55:47,211 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@787f32b7] under listagg; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@45d6ef73] under mode; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3f29e26] under percentile_cont; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@1f6d27cc] under percentile_disc; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@507d20bb] under rank; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@9fec931] under dense_rank; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5cbd159f] under percent_rank; prior registration was null
2023-12-01 08:55:47,212 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@3b05a99b] under cume_dist; prior registration was null
2023-12-01 08:55:47,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 08:55:47,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:55:47,215 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 08:55:47,216 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 08:55:47,217 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 08:55:47,219 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 08:55:47,252 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:55:47,253 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 08:55:47,278 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,279 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,280 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,280 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,280 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,280 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,280 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:55:47,280 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:55:47,352 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 08:55:47,354 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,354 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,354 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:55:47,363 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:55:47,363 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:55:47,369 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 08:55:47,369 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:55:47,369 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:55:47,374 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 08:55:47,383 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 08:55:47,383 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 08:55:47,384 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 08:55:47,384 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 08:55:47,384 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 08:55:47,384 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 08:55:47,384 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 08:55:47,409 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 08:55:47,409 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 08:55:47,409 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 08:55:47,409 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 08:55:47,409 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 08:55:47,414 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 08:55:47,415 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 08:55:47,419 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@69cd1085] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 08:55:47,420 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:55:47,421 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2d85fb64] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 08:55:47,421 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 08:55:47,421 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@56476c16] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 08:55:47,422 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 08:55:47,424 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 08:55:47,425 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 08:55:47,431 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 08:55:47,431 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 08:55:47,431 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 08:55:47,431 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 08:55:47,431 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 08:55:47,431 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:55:47,431 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:55:47,431 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 08:55:47,432 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:55:47,433 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 08:55:47,433 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 08:55:47,433 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 08:55:47,433 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 08:55:47,433 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 08:55:47,433 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:55:47,433 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 08:55:47,433 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 08:55:47,433 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 08:55:47,445 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 08:55:47,445 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 08:55:47,446 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 08:55:47,446 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 08:55:47,446 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@6a5e167a]
2023-12-01 08:55:47,447 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 08:55:47,447 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 08:55:47,447 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 08:55:47,447 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-01 08:55:47,448 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4dde8976
2023-12-01 08:55:47,448 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 113acdf8-bb03-4574-97bf-f616303f250a (<unnamed>)
2023-12-01 08:55:47,448 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-01 08:55:47,448 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-01 08:55:47,466 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-01 08:55:47,467 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 08:55:47,468 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-01 08:55:47,470 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-01 08:55:47,474 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-01 08:55:47,476 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - could not execute statement [insert into PLANET (NAME,ID) values (?,default)]
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:459)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:374)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:845)
	at org.h2.command.dml.Insert.insertRows(Insert.java:187)
	at org.h2.command.dml.Insert.update(Insert.java:151)
	at org.h2.command.CommandContainer.executeUpdateWithGeneratedKeys(CommandContainer.java:272)
	at org.h2.command.CommandContainer.update(CommandContainer.java:191)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:191)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:152)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:280)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:171)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:112)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2860)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:667)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:290)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:271)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:321)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:766)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.PlanetCrudService.create(PlanetCrudService.java:26)
	at org.example.App.main(App.java:15)
2023-12-01 08:55:47,477 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 23502, SQLState: 23502
2023-12-01 08:55:47,477 +0200 [main] ERROR (SqlExceptionHelper.java:150) - NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]
2023-12-01 08:55:47,479 +0200 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:310) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:310)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:466)
	at org.hibernate.internal.ExceptionConverterImpl.rollbackIfNecessary(ExceptionConverterImpl.java:264)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:160)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:772)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.PlanetCrudService.create(PlanetCrudService.java:26)
	at org.example.App.main(App.java:15)
2023-12-01 08:55:47,479 +0200 [main] ERROR (PlanetCrudService.java:30) - Error creating planet: could not execute statement [NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]] [insert into PLANET (NAME,ID) values (?,default)]
2023-12-01 08:58:01,049 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:58:01,052 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:58:01,054 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:58:01,071 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:58:01,071 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-01 08:58:01,079 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:58:01,080 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:58:01,084 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:58:01,085 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:58:01,085 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:58:01,085 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:58:01,085 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:58:01,085 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:58:01,086 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:58:01,086 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:58:01,086 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:58:01,087 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:58:01,087 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:58:01,087 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:58:01,088 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:58:01,092 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:58:01,092 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:58:01,117 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:58:01,118 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:58:01,119 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:58:01,120 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:58:01,121 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:58:01,122 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:58:01,122 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:58:01,123 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@13ad5cd3
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:58:01,124 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:58:01,134 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:58:01,134 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:58:01,134 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:58:01,134 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:58:01,134 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:58:01,135 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:58:01,135 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:58:01,144 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:58:01,144 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:58:01,144 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:58:01,151 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:58:01,154 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:58:01,154 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:58:01,157 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:58:01,163 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:58:01,163 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:58:01,163 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:58:01,164 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:58:01,164 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:58:01,164 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:58:01,166 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:58:01,166 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:58:01,169 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18025ced]
2023-12-01 08:58:01,181 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:58:01,191 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:58:01,193 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:58:01,195 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:58:01,197 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:58:01,202 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:58:01,203 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:58:01,203 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:58:01,204 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:58:01,205 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:58:01,206 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:58:01,207 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:58:01,207 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:58:01,209 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:58:01,209 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:58:01,209 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:58:01,209 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:58:01,209 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:58:01,209 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:58:01,209 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:58:01,211 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:58:01,211 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:58:01,211 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:58:01,212 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:58:01,212 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:58:01,212 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:58:01,212 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:58:01,212 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:58:01,212 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:58:01,212 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:58:01,212 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:58:01,212 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:58:01,212 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:58:01,213 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:58:01,213 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:58:01,213 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:58:01,213 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:58:01,213 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:58:01,213 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:58:01,213 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:58:01,213 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:58:01,213 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:58:01,213 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:58:01,213 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:58:01,213 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:58:01,213 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:58:01,214 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:58:01,214 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:58:01,214 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:58:01,216 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:58:01,216 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:58:01,216 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:58:01,216 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:58:01,216 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:58:01,216 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:58:01,216 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:58:01,216 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:58:01,216 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:58:01,217 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:58:01,218 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:58:01,219 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:58:01,220 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:58:01,220 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:58:01,220 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:58:01,220 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:58:01,220 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:58:01,220 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:58:01,220 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:58:01,220 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:58:01,220 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:58:01,220 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:58:01,220 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:58:01,220 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:58:01,221 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:58:01,221 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:58:01,222 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:58:01,222 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:58:01,222 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:58:01,222 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:58:01,222 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:58:01,224 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:58:01,224 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:58:01,224 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:58:01,225 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:58:01,226 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:01,226 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:01,230 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:58:01,230 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:01,230 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:01,237 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:58:01,292 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:58:01,304 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:58:01,305 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@52b6319f, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:58:01,306 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:58:01,308 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 08:58:01,324 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 08:58:01,324 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 08:58:01,324 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 08:58:01,324 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@37b72ea] under count; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@4e92466a] under every; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@66e8997c] under any; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 08:58:01,325 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4a68135e] under sinh; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@46678e49] under cosh; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@748e9b20] under tanh; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2063c53e] under pi; prior registration was null
2023-12-01 08:58:01,326 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2a9bc08f] under log; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 08:58:01,327 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@1549bba7] under position; prior registration was null
2023-12-01 08:58:01,328 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@1a28aef1] under overlay; prior registration was null
2023-12-01 08:58:01,328 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@6a9b0a6f] under trim; prior registration was null
2023-12-01 08:58:01,328 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@640dc4c6] under cast; prior registration was null
2023-12-01 08:58:01,328 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4b54af3d] under collate; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@44de94c3] under extract; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@11de56e6] under ifnull; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@7cb2651f] under pad; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@dcc6211] under str; prior registration was null
2023-12-01 08:58:01,329 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@79d743e6] under format; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@592238c5] under timestampadd; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@16073fa8] under timestampdiff; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14bf57b2] under current_date; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46d9aec8] under current_time; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14379273] under current_timestamp; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7918c7f8] under local_date; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@17740dae] under local_time; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1c504e66] under local_datetime; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@345cf395] under offset_datetime; prior registration was null
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 08:58:01,330 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under instant; prior registration was null
2023-12-01 08:58:01,331 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@5c82cd4f] under sql; prior registration was null
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@35835e65] under count; prior registration was org.hibernate.dialect.function.CountFunction@37b72ea
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@1fde4f40] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2063c53e
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 08:58:01,332 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@49cf9028] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@17740dae
2023-12-01 08:58:01,333 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@1c504e66
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@344426bf] under trunc; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5411dd90] under date_trunc; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50194e8d] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@1549bba7
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3cee53dc] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@290aeb20] under format; prior registration was org.hibernate.dialect.function.FormatFunction@79d743e6
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 08:58:01,334 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@787f32b7] under listagg; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@45d6ef73] under mode; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3f29e26] under percentile_cont; prior registration was null
2023-12-01 08:58:01,335 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@1f6d27cc] under percentile_disc; prior registration was null
2023-12-01 08:58:01,336 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@507d20bb] under rank; prior registration was null
2023-12-01 08:58:01,336 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@9fec931] under dense_rank; prior registration was null
2023-12-01 08:58:01,336 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5cbd159f] under percent_rank; prior registration was null
2023-12-01 08:58:01,336 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@3b05a99b] under cume_dist; prior registration was null
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 08:58:01,337 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 08:58:01,338 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 08:58:01,339 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 08:58:01,340 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 08:58:01,341 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 08:58:01,343 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 08:58:01,377 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:58:01,378 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 08:58:01,403 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,404 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,405 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,405 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,405 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,405 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,405 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:58:01,405 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:58:01,479 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 08:58:01,481 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,481 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,481 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:01,491 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:58:01,491 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:58:01,497 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 08:58:01,497 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:58:01,497 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:58:01,502 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 08:58:01,511 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 08:58:01,511 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 08:58:01,513 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 08:58:01,513 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 08:58:01,513 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 08:58:01,513 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 08:58:01,513 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 08:58:01,538 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 08:58:01,538 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 08:58:01,538 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 08:58:01,538 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 08:58:01,538 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 08:58:01,544 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 08:58:01,545 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 08:58:01,548 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@69cd1085] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 08:58:01,549 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:58:01,550 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2d85fb64] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 08:58:01,550 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 08:58:01,550 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@56476c16] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 08:58:01,550 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 08:58:01,552 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 08:58:01,554 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 08:58:01,557 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 08:58:01,557 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 08:58:01,557 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:58:01,557 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 08:58:01,557 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:58:01,557 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 08:58:01,557 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 08:58:01,557 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:58:01,557 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 08:58:01,557 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 08:58:01,558 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 08:58:01,567 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 08:58:01,567 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 08:58:01,568 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 08:58:01,568 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 08:58:01,569 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@6a5e167a]
2023-12-01 08:58:01,569 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 08:58:01,569 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 08:58:01,569 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 08:58:01,569 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-01 08:58:01,570 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4dde8976
2023-12-01 08:58:01,570 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: edf25ed2-74df-45c6-8b10-577769f768c3 (<unnamed>)
2023-12-01 08:58:01,570 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-01 08:58:01,570 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-01 08:58:01,585 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-01 08:58:01,587 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 08:58:01,587 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-01 08:58:01,590 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-01 08:58:01,593 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-01 08:58:01,595 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - could not execute statement [insert into PLANET (NAME,ID) values (?,default)]
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:459)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:374)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:845)
	at org.h2.command.dml.Insert.insertRows(Insert.java:187)
	at org.h2.command.dml.Insert.update(Insert.java:151)
	at org.h2.command.CommandContainer.executeUpdateWithGeneratedKeys(CommandContainer.java:272)
	at org.h2.command.CommandContainer.update(CommandContainer.java:191)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:191)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:152)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:280)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:171)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:112)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2860)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:667)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:290)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:271)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:321)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:766)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.PlanetCrudService.create(PlanetCrudService.java:26)
	at org.example.App.main(App.java:17)
2023-12-01 08:58:01,596 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 23502, SQLState: 23502
2023-12-01 08:58:01,596 +0200 [main] ERROR (SqlExceptionHelper.java:150) - NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]
2023-12-01 08:58:01,601 +0200 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:310) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:310)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:466)
	at org.hibernate.internal.ExceptionConverterImpl.rollbackIfNecessary(ExceptionConverterImpl.java:264)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:160)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:772)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.PlanetCrudService.create(PlanetCrudService.java:26)
	at org.example.App.main(App.java:17)
2023-12-01 08:58:01,602 +0200 [main] ERROR (PlanetCrudService.java:30) - Error creating planet: could not execute statement [NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]] [insert into PLANET (NAME,ID) values (?,default)]
2023-12-01 08:58:01,632 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:58:01,633 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet(590903886859208))] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:58:01,636 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet(590903886859208)]
 |  \-BasicFetch [org.example.entity.Planet(590903886859208).name]

2023-12-01 08:58:01,636 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet(590903886859208)) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:58:01,640 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-01 08:58:01,644 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-01 08:58:01,644 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet(590903886859208) -> EntityResultInitializer(org.example.entity.Planet(590903886859208))@1567025476 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-01 08:58:01,645 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0
2023-12-01 08:58:01,647 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - Could not extract column [1] from JDBC ResultSet [n/a]
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "MARS" [22018-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.Value.convertTo(Value.java:875)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.value.Value.getInt(Value.java:623)
	at org.h2.jdbc.JdbcResultSet.getInt(JdbcResultSet.java:334)
	at org.hibernate.type.descriptor.jdbc.IntegerJdbcType$2.doExtract(IntegerJdbcType.java:87)
	at org.hibernate.type.descriptor.jdbc.BasicExtractor.extract(BasicExtractor.java:44)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:302)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.getJdbcValue(RowProcessingStateStandardImpl.java:119)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.extractRawValue(BasicResultAssembler.java:52)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.assemble(BasicResultAssembler.java:59)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeIdentifier(AbstractEntityInitializer.java:370)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveEntityKey(AbstractEntityInitializer.java:347)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveKey(AbstractEntityInitializer.java:289)
	at org.hibernate.sql.results.internal.InitializersList.resolveKeys(InitializersList.java:83)
	at org.hibernate.sql.results.internal.StandardRowReader.coordinateInitializers(StandardRowReader.java:107)
	at org.hibernate.sql.results.internal.StandardRowReader.readRow(StandardRowReader.java:86)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:201)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$0(ConcreteSqmSelectQueryPlan.java:109)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:305)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:246)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.example.service.PlanetCrudService.getAll(PlanetCrudService.java:55)
	at org.example.App.main(App.java:19)
Caused by: java.lang.NumberFormatException: For input string: "MARS"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.parseInt(Integer.java:786)
	at org.h2.value.Value.convertToInt(Value.java:982)
	at org.h2.value.Value.convertTo(Value.java:806)
	... 29 more
2023-12-01 08:58:01,647 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 22018, SQLState: 22018
2023-12-01 08:58:01,647 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Data conversion error converting "MARS" [22018-200]
2023-12-01 08:58:01,647 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 08:58:01,647 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 08:58:01,647 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 08:58:01,647 +0200 [main] DEBUG (LoadContexts.java:83) - LoadContexts still contained JdbcValuesSourceProcessingState registrations on cleanup
2023-12-01 08:58:01,648 +0200 [main] ERROR (PlanetCrudService.java:57) - Error while getting all planets
org.hibernate.exception.DataException: Could not extract column [1] from JDBC ResultSet [Data conversion error converting "MARS" [22018-200]] [n/a]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:310)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.getJdbcValue(RowProcessingStateStandardImpl.java:119)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.extractRawValue(BasicResultAssembler.java:52)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.assemble(BasicResultAssembler.java:59)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeIdentifier(AbstractEntityInitializer.java:370)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveEntityKey(AbstractEntityInitializer.java:347)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveKey(AbstractEntityInitializer.java:289)
	at org.hibernate.sql.results.internal.InitializersList.resolveKeys(InitializersList.java:83)
	at org.hibernate.sql.results.internal.StandardRowReader.coordinateInitializers(StandardRowReader.java:107)
	at org.hibernate.sql.results.internal.StandardRowReader.readRow(StandardRowReader.java:86)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:201)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$0(ConcreteSqmSelectQueryPlan.java:109)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:305)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:246)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.example.service.PlanetCrudService.getAll(PlanetCrudService.java:55)
	at org.example.App.main(App.java:19)
Caused by: org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "MARS" [22018-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.Value.convertTo(Value.java:875)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.value.Value.getInt(Value.java:623)
	at org.h2.jdbc.JdbcResultSet.getInt(JdbcResultSet.java:334)
	at org.hibernate.type.descriptor.jdbc.IntegerJdbcType$2.doExtract(IntegerJdbcType.java:87)
	at org.hibernate.type.descriptor.jdbc.BasicExtractor.extract(BasicExtractor.java:44)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:302)
	... 23 more
Caused by: java.lang.NumberFormatException: For input string: "MARS"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.parseInt(Integer.java:786)
	at org.h2.value.Value.convertToInt(Value.java:982)
	at org.h2.value.Value.convertTo(Value.java:806)
	... 29 more
2023-12-01 08:58:58,186 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 08:58:58,189 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 08:58:58,190 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 08:58:58,207 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 08:58:58,207 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-01 08:58:58,214 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 08:58:58,216 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 08:58:58,219 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 08:58:58,221 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 08:58:58,221 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 08:58:58,221 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:58:58,221 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 08:58:58,221 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 08:58:58,221 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 08:58:58,222 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 08:58:58,222 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:58:58,223 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 08:58:58,223 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 08:58:58,223 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 08:58:58,223 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 08:58:58,227 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 08:58:58,227 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1b75c2e3
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:58:58,251 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:58:58,252 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 08:58:58,253 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 08:58:58,254 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 08:58:58,255 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 08:58:58,257 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:58:58,257 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@56928307
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@13ad5cd3
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 08:58:58,258 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 08:58:58,267 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 08:58:58,267 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 08:58:58,267 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 08:58:58,267 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 08:58:58,267 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 08:58:58,268 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 08:58:58,268 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 08:58:58,276 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:58:58,277 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 08:58:58,277 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 08:58:58,283 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 08:58:58,286 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 08:58:58,286 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 08:58:58,289 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 08:58:58,294 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 08:58:58,295 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 08:58:58,295 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 08:58:58,295 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:58:58,295 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 08:58:58,296 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 08:58:58,298 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:58:58,298 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 08:58:58,299 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18025ced]
2023-12-01 08:58:58,313 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 08:58:58,322 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 08:58:58,324 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 08:58:58,327 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 08:58:58,329 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:58:58,334 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:58:58,335 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:58:58,335 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:58:58,335 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:58:58,337 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 08:58:58,338 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:58:58,339 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 08:58:58,339 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:58:58,340 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:58:58,341 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 08:58:58,341 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 08:58:58,341 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 08:58:58,341 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 08:58:58,341 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 08:58:58,341 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 08:58:58,343 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 08:58:58,343 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 08:58:58,343 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 08:58:58,344 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:58:58,344 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:58:58,344 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:58:58,344 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:58:58,344 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:58:58,344 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 08:58:58,344 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:58:58,344 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 08:58:58,344 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:58:58,345 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:58:58,345 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 08:58:58,345 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 08:58:58,345 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 08:58:58,345 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 08:58:58,345 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 08:58:58,345 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 08:58:58,345 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 08:58:58,345 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 08:58:58,345 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 08:58:58,345 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 08:58:58,345 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 08:58:58,345 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 08:58:58,346 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 08:58:58,346 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 08:58:58,346 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 08:58:58,346 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 08:58:58,348 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 08:58:58,348 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:58:58,348 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:58:58,348 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 08:58:58,349 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 08:58:58,349 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 08:58:58,349 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 08:58:58,349 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 08:58:58,349 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 08:58:58,350 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 08:58:58,351 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:58:58,352 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 08:58:58,352 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 08:58:58,352 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 08:58:58,352 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 08:58:58,352 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 08:58:58,352 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 08:58:58,352 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 08:58:58,353 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 08:58:58,353 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:58:58,353 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 08:58:58,353 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 08:58:58,353 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 08:58:58,353 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 08:58:58,354 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 08:58:58,356 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 08:58:58,356 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 08:58:58,356 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 08:58:58,357 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:58:58,358 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:58,358 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:58,362 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 08:58:58,362 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:58,362 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 08:58:58,368 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 08:58:58,415 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 08:58:58,428 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:58:58,428 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@52b6319f, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 08:58:58,429 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 08:58:58,431 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 08:58:58,444 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 08:58:58,444 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 08:58:58,444 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 08:58:58,444 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 08:58:58,444 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@37b72ea] under count; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@4e92466a] under every; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@66e8997c] under any; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 08:58:58,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4a68135e] under sinh; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@46678e49] under cosh; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@748e9b20] under tanh; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2063c53e] under pi; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2a9bc08f] under log; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 08:58:58,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@1549bba7] under position; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@1a28aef1] under overlay; prior registration was null
2023-12-01 08:58:58,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@6a9b0a6f] under trim; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@640dc4c6] under cast; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4b54af3d] under collate; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@44de94c3] under extract; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@11de56e6] under ifnull; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@7cb2651f] under pad; prior registration was null
2023-12-01 08:58:58,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@dcc6211] under str; prior registration was null
2023-12-01 08:58:58,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@79d743e6] under format; prior registration was null
2023-12-01 08:58:58,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@592238c5] under timestampadd; prior registration was null
2023-12-01 08:58:58,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@16073fa8] under timestampdiff; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14bf57b2] under current_date; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46d9aec8] under current_time; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14379273] under current_timestamp; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7918c7f8] under local_date; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@17740dae] under local_time; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1c504e66] under local_datetime; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@345cf395] under offset_datetime; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under instant; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@5c82cd4f] under sql; prior registration was null
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@35835e65] under count; prior registration was org.hibernate.dialect.function.CountFunction@37b72ea
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@1fde4f40] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 08:58:58,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2063c53e
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@49cf9028] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@17740dae
2023-12-01 08:58:58,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@1c504e66
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@344426bf] under trunc; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5411dd90] under date_trunc; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50194e8d] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@1549bba7
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3cee53dc] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@290aeb20] under format; prior registration was org.hibernate.dialect.function.FormatFunction@79d743e6
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 08:58:58,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@787f32b7] under listagg; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@45d6ef73] under mode; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3f29e26] under percentile_cont; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@1f6d27cc] under percentile_disc; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@507d20bb] under rank; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@9fec931] under dense_rank; prior registration was null
2023-12-01 08:58:58,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5cbd159f] under percent_rank; prior registration was null
2023-12-01 08:58:58,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@3b05a99b] under cume_dist; prior registration was null
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 08:58:58,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 08:58:58,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 08:58:58,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 08:58:58,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 08:58:58,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 08:58:58,460 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 08:58:58,493 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 08:58:58,493 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 08:58:58,516 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,518 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,518 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,518 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,519 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 08:58:58,519 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 08:58:58,586 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 08:58:58,587 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,587 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,587 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 08:58:58,596 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 08:58:58,596 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 08:58:58,601 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 08:58:58,602 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 08:58:58,602 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 08:58:58,607 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 08:58:58,615 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 08:58:58,615 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 08:58:58,616 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 08:58:58,617 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 08:58:58,617 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 08:58:58,617 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 08:58:58,617 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 08:58:58,640 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 08:58:58,640 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 08:58:58,640 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 08:58:58,640 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 08:58:58,640 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 08:58:58,646 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 08:58:58,647 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 08:58:58,651 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@69cd1085] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 08:58:58,651 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:58:58,652 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2d85fb64] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 08:58:58,653 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 08:58:58,653 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@56476c16] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 08:58:58,653 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 08:58:58,654 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 08:58:58,656 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 08:58:58,660 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 08:58:58,660 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 08:58:58,660 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 08:58:58,660 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 08:58:58,660 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 08:58:58,660 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:58:58,660 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:58:58,660 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 08:58:58,660 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:58:58,661 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 08:58:58,661 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 08:58:58,661 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 08:58:58,661 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 08:58:58,661 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 08:58:58,661 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 08:58:58,661 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 08:58:58,661 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 08:58:58,661 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 08:58:58,670 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 08:58:58,671 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 08:58:58,672 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 08:58:58,672 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 08:58:58,672 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@75b25825] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@6a5e167a]
2023-12-01 08:58:58,672 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 08:58:58,672 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 08:58:58,672 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 08:58:58,672 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-01 08:58:58,673 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4dde8976
2023-12-01 08:58:58,673 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: c09dca9c-e8e0-4998-8038-249e335af988 (<unnamed>)
2023-12-01 08:58:58,673 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-01 08:58:58,673 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-01 08:58:58,687 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-01 08:58:58,688 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 08:58:58,688 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-01 08:58:58,691 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-01 08:58:58,695 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-01 08:58:58,697 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - could not execute statement [insert into PLANET (NAME,ID) values (?,default)]
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:459)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:374)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:845)
	at org.h2.command.dml.Insert.insertRows(Insert.java:187)
	at org.h2.command.dml.Insert.update(Insert.java:151)
	at org.h2.command.CommandContainer.executeUpdateWithGeneratedKeys(CommandContainer.java:272)
	at org.h2.command.CommandContainer.update(CommandContainer.java:191)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:191)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:152)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:280)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:171)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:112)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2860)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:667)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:290)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:271)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:321)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:766)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.PlanetCrudService.create(PlanetCrudService.java:26)
	at org.example.App.main(App.java:17)
2023-12-01 08:58:58,700 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 23502, SQLState: 23502
2023-12-01 08:58:58,700 +0200 [main] ERROR (SqlExceptionHelper.java:150) - NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]
2023-12-01 08:58:58,702 +0200 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:310) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:310)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:466)
	at org.hibernate.internal.ExceptionConverterImpl.rollbackIfNecessary(ExceptionConverterImpl.java:264)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:160)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:772)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.PlanetCrudService.create(PlanetCrudService.java:26)
	at org.example.App.main(App.java:17)
2023-12-01 08:58:58,703 +0200 [main] ERROR (PlanetCrudService.java:30) - Error creating planet: could not execute statement [NULL not allowed for column "ID"; SQL statement:
insert into PLANET (NAME,ID) values (?,default) [23502-200]] [insert into PLANET (NAME,ID) values (?,default)]
2023-12-01 08:58:58,734 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 08:58:58,734 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet(590960988035416))] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 08:58:58,737 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet(590960988035416)]
 |  \-BasicFetch [org.example.entity.Planet(590960988035416).name]

2023-12-01 08:58:58,738 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet(590960988035416)) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 08:58:58,741 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-01 08:58:58,745 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-01 08:58:58,745 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet(590960988035416) -> EntityResultInitializer(org.example.entity.Planet(590960988035416))@1567025476 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-01 08:58:58,746 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0
2023-12-01 08:58:58,748 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - Could not extract column [1] from JDBC ResultSet [n/a]
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "MARS" [22018-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.Value.convertTo(Value.java:875)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.value.Value.getInt(Value.java:623)
	at org.h2.jdbc.JdbcResultSet.getInt(JdbcResultSet.java:334)
	at org.hibernate.type.descriptor.jdbc.IntegerJdbcType$2.doExtract(IntegerJdbcType.java:87)
	at org.hibernate.type.descriptor.jdbc.BasicExtractor.extract(BasicExtractor.java:44)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:302)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.getJdbcValue(RowProcessingStateStandardImpl.java:119)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.extractRawValue(BasicResultAssembler.java:52)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.assemble(BasicResultAssembler.java:59)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeIdentifier(AbstractEntityInitializer.java:370)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveEntityKey(AbstractEntityInitializer.java:347)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveKey(AbstractEntityInitializer.java:289)
	at org.hibernate.sql.results.internal.InitializersList.resolveKeys(InitializersList.java:83)
	at org.hibernate.sql.results.internal.StandardRowReader.coordinateInitializers(StandardRowReader.java:107)
	at org.hibernate.sql.results.internal.StandardRowReader.readRow(StandardRowReader.java:86)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:201)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$0(ConcreteSqmSelectQueryPlan.java:109)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:305)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:246)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.example.service.PlanetCrudService.getAll(PlanetCrudService.java:55)
	at org.example.App.main(App.java:19)
Caused by: java.lang.NumberFormatException: For input string: "MARS"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.parseInt(Integer.java:786)
	at org.h2.value.Value.convertToInt(Value.java:982)
	at org.h2.value.Value.convertTo(Value.java:806)
	... 29 more
2023-12-01 08:58:58,748 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 22018, SQLState: 22018
2023-12-01 08:58:58,748 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Data conversion error converting "MARS" [22018-200]
2023-12-01 08:58:58,748 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 08:58:58,748 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 08:58:58,749 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 08:58:58,749 +0200 [main] DEBUG (LoadContexts.java:83) - LoadContexts still contained JdbcValuesSourceProcessingState registrations on cleanup
2023-12-01 08:58:58,749 +0200 [main] ERROR (PlanetCrudService.java:57) - Error while getting all planets
org.hibernate.exception.DataException: Could not extract column [1] from JDBC ResultSet [Data conversion error converting "MARS" [22018-200]] [n/a]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:310)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.getJdbcValue(RowProcessingStateStandardImpl.java:119)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.extractRawValue(BasicResultAssembler.java:52)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.assemble(BasicResultAssembler.java:59)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeIdentifier(AbstractEntityInitializer.java:370)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveEntityKey(AbstractEntityInitializer.java:347)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.resolveKey(AbstractEntityInitializer.java:289)
	at org.hibernate.sql.results.internal.InitializersList.resolveKeys(InitializersList.java:83)
	at org.hibernate.sql.results.internal.StandardRowReader.coordinateInitializers(StandardRowReader.java:107)
	at org.hibernate.sql.results.internal.StandardRowReader.readRow(StandardRowReader.java:86)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:201)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$0(ConcreteSqmSelectQueryPlan.java:109)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:305)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:246)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.example.service.PlanetCrudService.getAll(PlanetCrudService.java:55)
	at org.example.App.main(App.java:19)
Caused by: org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "MARS" [22018-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.Value.convertTo(Value.java:875)
	at org.h2.value.Value.convertTo(Value.java:737)
	at org.h2.value.Value.getInt(Value.java:623)
	at org.h2.jdbc.JdbcResultSet.getInt(JdbcResultSet.java:334)
	at org.hibernate.type.descriptor.jdbc.IntegerJdbcType$2.doExtract(IntegerJdbcType.java:87)
	at org.hibernate.type.descriptor.jdbc.BasicExtractor.extract(BasicExtractor.java:44)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:302)
	... 23 more
Caused by: java.lang.NumberFormatException: For input string: "MARS"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:668)
	at java.base/java.lang.Integer.parseInt(Integer.java:786)
	at org.h2.value.Value.convertToInt(Value.java:982)
	at org.h2.value.Value.convertTo(Value.java:806)
	... 29 more
2023-12-01 09:11:35,237 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 09:11:35,240 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 09:11:35,242 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 09:11:35,260 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 09:11:35,260 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-01 09:11:35,268 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 09:11:35,269 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 09:11:35,272 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 09:11:35,274 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 09:11:35,275 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 09:11:35,276 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 09:11:35,276 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 09:11:35,276 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 09:11:35,276 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 09:11:35,280 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 09:11:35,280 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 09:11:35,306 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@61544ae6
2023-12-01 09:11:35,306 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@61544ae6
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@61544ae6
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@4b41dd5c
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@4b41dd5c
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3b96c42e
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3b96c42e
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@5d066c7d
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@5d066c7d
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1e461e41
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1e461e41
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1e461e41
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@5ba88be8
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@5ba88be8
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@5ba88be8
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@56928307
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@56928307
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@3899782c
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@1603cd68
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1603cd68
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@9ebe38b
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@4b23c30a
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@38089a5a
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@38089a5a
2023-12-01 09:11:35,307 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@38089a5a
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@30e868be
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@30e868be
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@30e868be
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@66c92293
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@66c92293
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@66c92293
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@332796d3
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@332796d3
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@332796d3
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@4f0100a7
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@4f0100a7
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4f0100a7
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@3cdf2c61
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@3cdf2c61
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@13ad5cd3
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@13ad5cd3
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1c33c17b
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 09:11:35,308 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@77128536
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@77128536
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58326051
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4c1f22f3
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@598bd2ba
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5a755cc1
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5a755cc1
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7ae42ce3
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7ae42ce3
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@4f5991f6
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@4f5991f6
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@484094a5
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@484094a5
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@38234a38
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@38234a38
2023-12-01 09:11:35,309 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@63fbfaeb
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@602e0143
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@2c07545f
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@2c07545f
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@e57b96d
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@32c726ee
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@22f31dec
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@34c01041
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@34c01041
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@76f4b65
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@c94fd30
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@36328d33
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@36328d33
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@2c4d1ac
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@2c4d1ac
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7f0d96f2
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7f0d96f2
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7f0d96f2
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@545b995e
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@545b995e
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@545b995e
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@76a2ddf3
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@524f3b3a
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@41e68d87
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@41e68d87
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@49ff7d8c
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@49ff7d8c
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@49ff7d8c
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@29526c05
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@2ef14fe
2023-12-01 09:11:35,310 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@77102b91
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@77102b91
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@45312be2
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@45312be2
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@45312be2
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@7fb95505
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7fb95505
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@58be6e8
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@58be6e8
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7331196b
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7331196b
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@3f9342d4
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@3f9342d4
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@ab7395e
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@ab7395e
2023-12-01 09:11:35,311 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@50d13246
2023-12-01 09:11:35,313 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@5a1de7fb
2023-12-01 09:11:35,313 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@5a1de7fb
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@19b93fa8
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@7e6ef134
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1f010bf0
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@40db2a24
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@10cf09e8
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@1921ad94
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@ee86bcb
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@177bea38
2023-12-01 09:11:35,314 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7f132176
2023-12-01 09:11:35,324 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 09:11:35,324 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 09:11:35,324 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 09:11:35,324 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 09:11:35,324 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 09:11:35,325 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 09:11:35,325 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 09:11:35,338 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 09:11:35,338 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 09:11:35,338 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 09:11:35,346 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 09:11:35,349 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 09:11:35,349 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 09:11:35,353 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 09:11:35,363 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 09:11:35,363 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 09:11:35,363 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 09:11:35,364 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 09:11:35,364 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 09:11:35,364 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 09:11:35,366 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 09:11:35,366 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 09:11:35,368 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@4c4d27c8] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6821ea29]
2023-12-01 09:11:35,380 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 09:11:35,390 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 09:11:35,392 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 09:11:35,394 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 09:11:35,397 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:11:35,402 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:11:35,402 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 09:11:35,402 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 09:11:35,403 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:11:35,404 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 09:11:35,406 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:11:35,406 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 09:11:35,407 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:11:35,408 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:11:35,408 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 09:11:35,408 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 09:11:35,408 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 09:11:35,408 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 09:11:35,408 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 09:11:35,408 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 09:11:35,411 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 09:11:35,411 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 09:11:35,411 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 09:11:35,411 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:11:35,412 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:11:35,412 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 09:11:35,412 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 09:11:35,412 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:11:35,412 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 09:11:35,412 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:11:35,412 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 09:11:35,412 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:11:35,412 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:11:35,412 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 09:11:35,413 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 09:11:35,413 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 09:11:35,413 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 09:11:35,413 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 09:11:35,413 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 09:11:35,413 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 09:11:35,413 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 09:11:35,413 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 09:11:35,413 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 09:11:35,413 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 09:11:35,413 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 09:11:35,414 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 09:11:35,414 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 09:11:35,414 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 09:11:35,414 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:11:35,416 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:11:35,416 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 09:11:35,416 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 09:11:35,416 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:11:35,416 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 09:11:35,416 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:11:35,417 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 09:11:35,417 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:11:35,417 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:11:35,418 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 09:11:35,418 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:11:35,420 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 09:11:35,420 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 09:11:35,420 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 09:11:35,420 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 09:11:35,420 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 09:11:35,420 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 09:11:35,420 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 09:11:35,420 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 09:11:35,420 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:11:35,420 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 09:11:35,420 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 09:11:35,420 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:11:35,421 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 09:11:35,421 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:11:35,421 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 09:11:35,422 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:11:35,422 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 09:11:35,422 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 09:11:35,422 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:11:35,422 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 09:11:35,423 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 09:11:35,424 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 09:11:35,424 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 09:11:35,424 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 09:11:35,425 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:11:35,426 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:11:35,430 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 09:11:35,430 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:11:35,430 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:11:35,437 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 09:11:35,494 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 09:11:35,506 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 09:11:35,507 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@1b005a0b, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 09:11:35,508 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 09:11:35,510 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 09:11:35,524 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 09:11:35,525 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 09:11:35,525 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 09:11:35,525 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 09:11:35,525 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@26a4551a] under count; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@69da0b12] under every; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@2764c546] under any; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 09:11:35,526 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@507d20bb] under sinh; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@9fec931] under cosh; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5cbd159f] under tanh; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3b05a99b] under pi; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2c43eb8] under log; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 09:11:35,527 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 09:11:35,528 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4c4f4365] under position; prior registration was null
2023-12-01 09:11:35,530 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@1ab6718] under overlay; prior registration was null
2023-12-01 09:11:35,530 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@6fd77352] under trim; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6c65860d] under cast; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2d000e80] under collate; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@4d2a1da3] under extract; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@557286ad] under ifnull; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 09:11:35,531 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 09:11:35,532 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@3f4b840d] under pad; prior registration was null
2023-12-01 09:11:35,532 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@bc0f53b] under str; prior registration was null
2023-12-01 09:11:35,532 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@58496dc] under format; prior registration was null
2023-12-01 09:11:35,532 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@2125ad3] under timestampadd; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@6eb82908] under timestampdiff; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@f2ce6b] under current_date; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@25c53f74] under current_time; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5e2f3be5] under current_timestamp; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1bd0b0e5] under local_date; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@dc7b462] under local_time; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1f51431] under local_datetime; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@26a2f7f9] under offset_datetime; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@38eb2c50] under instant; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@7186333e] under sql; prior registration was null
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 09:11:35,533 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@692fd26] under count; prior registration was org.hibernate.dialect.function.CountFunction@26a4551a
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@76c548f] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3b05a99b
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@3900fa71] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 09:11:35,534 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@dc7b462
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@1f51431
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@328902d5] under trunc; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@72e789cb] under date_trunc; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@7c1812b3] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4c4f4365
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@43034809] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 09:11:35,535 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@39e67516] under format; prior registration was org.hibernate.dialect.function.FormatFunction@58496dc
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 09:11:35,536 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@6c03fb16] under listagg; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@6f9ad11c] under mode; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@4b2d44bc] under percentile_cont; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@58e92c23] under percentile_disc; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@376e7531] under rank; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@23202c31] under dense_rank; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5782d777] under percent_rank; prior registration was null
2023-12-01 09:11:35,537 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@4f824872] under cume_dist; prior registration was null
2023-12-01 09:11:35,538 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 09:11:35,538 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 09:11:35,538 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 09:11:35,538 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 09:11:35,538 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 09:11:35,538 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 09:11:35,539 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 09:11:35,540 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 09:11:35,541 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 09:11:35,542 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 09:11:35,544 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 09:11:35,576 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 09:11:35,576 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 09:11:35,600 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,601 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,602 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,602 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,602 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,602 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,602 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 09:11:35,602 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 09:11:35,675 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 09:11:35,677 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,677 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,677 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:11:35,686 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 09:11:35,686 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 09:11:35,691 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 09:11:35,692 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 09:11:35,692 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 09:11:35,697 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 09:11:35,706 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 09:11:35,706 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 09:11:35,707 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 09:11:35,707 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 09:11:35,707 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 09:11:35,707 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 09:11:35,707 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 09:11:35,731 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 09:11:35,732 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 09:11:35,732 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 09:11:35,732 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 09:11:35,732 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 09:11:35,737 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 09:11:35,738 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 09:11:35,742 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@72eb6200] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 09:11:35,742 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 09:11:35,744 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@753fd7a1] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 09:11:35,744 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 09:11:35,744 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@12a2585b] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 09:11:35,744 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 09:11:35,746 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 09:11:35,748 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 09:11:35,751 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 09:11:35,751 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 09:11:35,751 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 09:11:35,751 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 09:11:35,751 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 09:11:35,751 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 09:11:35,751 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 09:11:35,751 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 09:11:35,751 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 09:11:35,751 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 09:11:35,751 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 09:11:35,761 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 09:11:35,761 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 09:11:35,762 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 09:11:35,762 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 09:11:35,763 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@4c4d27c8] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@23cbbd07]
2023-12-01 09:11:35,763 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 09:11:35,763 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 09:11:35,764 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 09:11:35,764 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-01 09:11:35,765 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@47f04e4d
2023-12-01 09:11:35,765 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 7fb475f2-c0cb-43da-9b35-ec1d354b6658 (<unnamed>)
2023-12-01 09:11:35,765 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-01 09:11:35,765 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-01 09:11:35,778 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-01 09:11:35,780 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 09:11:35,780 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-01 09:11:35,785 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-01 09:11:35,788 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-01 09:11:35,790 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Planet) : 6
2023-12-01 09:11:35,791 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-01 09:11:35,792 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-01 09:11:35,793 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-01 09:11:35,793 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-01 09:11:35,793 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-01 09:11:35,795 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-01 09:11:35,795 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-01 09:11:35,795 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-01 09:11:35,795 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=6}
2023-12-01 09:11:35,796 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:11:35,796 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:11:35,797 +0200 [main] INFO  (PlanetCrudService.java:28) - Planet created: Mars
2023-12-01 09:11:35,828 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 09:11:35,829 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet(591718054136166))] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 09:11:35,832 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet(591718054136166)]
 |  \-BasicFetch [org.example.entity.Planet(591718054136166).name]

2023-12-01 09:11:35,833 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet(591718054136166)) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 09:11:35,836 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-01 09:11:35,840 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-01 09:11:35,840 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet(591718054136166) -> EntityResultInitializer(org.example.entity.Planet(591718054136166))@2089858999 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-01 09:11:35,841 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0
2023-12-01 09:11:35,843 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-01 09:11:35,843 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591718054136166)): 1
2023-12-01 09:11:35,843 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591718054136166)#1] : 1792110618
2023-12-01 09:11:35,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-01 09:11:35,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591718054136166)#1
2023-12-01 09:11:35,844 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-01 09:11:35,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-01 09:11:35,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591718054136166)): 2
2023-12-01 09:11:35,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591718054136166)#2] : 2008249643
2023-12-01 09:11:35,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-01 09:11:35,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591718054136166)#2
2023-12-01 09:11:35,844 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-01 09:11:35,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-01 09:11:35,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591718054136166)): 3
2023-12-01 09:11:35,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591718054136166)#3] : 1667737224
2023-12-01 09:11:35,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mercury]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591718054136166)#3
2023-12-01 09:11:35,845 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-01 09:11:35,845 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591718054136166)): 4
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591718054136166)#4] : 831931099
2023-12-01 09:11:35,845 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Jupiter]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591718054136166)#4
2023-12-01 09:11:35,845 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-01 09:11:35,845 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591718054136166)): 5
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591718054136166)#5] : 1497992596
2023-12-01 09:11:35,845 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Saturn]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591718054136166)#5
2023-12-01 09:11:35,845 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-01 09:11:35,845 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591718054136166)): 6
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591718054136166)#6] : 901751227
2023-12-01 09:11:35,845 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-01 09:11:35,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591718054136166)#6
2023-12-01 09:11:35,845 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-01 09:11:35,846 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:11:35,846 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:12:11,374 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 09:12:11,376 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 09:12:11,378 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 09:12:11,394 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 09:12:11,395 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.format_sql=true, hibernate.hbm2ddl.auto=validate, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.autocommit=true, hibernate.show_sql=true, hibernate.connection.driver_class=org.h2.Driver, hibernate.connection.password=****, hibernate.connection.pool_size=10}
2023-12-01 09:12:11,401 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 09:12:11,402 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 09:12:11,405 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 09:12:11,407 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 09:12:11,407 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 09:12:11,407 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 09:12:11,407 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 09:12:11,407 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 09:12:11,408 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 09:12:11,408 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 09:12:11,408 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 09:12:11,409 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 09:12:11,409 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 09:12:11,409 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 09:12:11,410 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 09:12:11,414 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 09:12:11,414 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 09:12:11,437 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 09:12:11,438 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 09:12:11,439 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 09:12:11,440 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-01 09:12:11,441 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-01 09:12:11,442 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-01 09:12:11,443 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-01 09:12:11,444 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-01 09:12:11,453 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 09:12:11,454 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 09:12:11,454 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 09:12:11,454 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 09:12:11,454 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 09:12:11,455 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 09:12:11,455 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 09:12:11,465 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 09:12:11,465 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 09:12:11,465 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 09:12:11,471 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 09:12:11,474 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 09:12:11,474 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 09:12:11,477 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 09:12:11,486 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 09:12:11,486 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 09:12:11,487 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 09:12:11,487 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 09:12:11,487 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 09:12:11,488 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 09:12:11,490 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 09:12:11,490 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 09:12:11,491 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-01 09:12:11,502 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 09:12:11,511 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 09:12:11,513 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 09:12:11,515 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 09:12:11,518 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:12:11,523 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:12:11,524 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 09:12:11,524 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 09:12:11,525 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:12:11,526 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 09:12:11,528 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:12:11,529 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 09:12:11,529 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:12:11,530 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:12:11,530 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 09:12:11,530 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 09:12:11,530 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 09:12:11,530 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 09:12:11,530 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 09:12:11,531 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 09:12:11,532 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 09:12:11,533 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 09:12:11,533 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 09:12:11,533 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:12:11,533 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:12:11,533 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 09:12:11,533 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 09:12:11,533 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:12:11,533 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 09:12:11,534 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:12:11,534 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 09:12:11,534 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:12:11,534 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:12:11,534 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 09:12:11,534 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 09:12:11,534 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 09:12:11,534 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 09:12:11,534 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 09:12:11,534 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 09:12:11,534 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 09:12:11,535 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 09:12:11,535 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 09:12:11,535 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 09:12:11,535 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 09:12:11,535 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 09:12:11,535 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 09:12:11,535 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 09:12:11,535 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 09:12:11,535 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:12:11,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:12:11,538 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 09:12:11,538 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 09:12:11,538 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:12:11,538 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 09:12:11,538 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:12:11,538 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 09:12:11,538 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:12:11,538 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:12:11,539 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 09:12:11,540 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:12:11,541 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 09:12:11,542 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 09:12:11,542 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 09:12:11,542 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 09:12:11,542 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 09:12:11,542 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 09:12:11,542 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 09:12:11,542 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 09:12:11,542 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:12:11,542 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 09:12:11,542 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 09:12:11,542 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:12:11,542 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 09:12:11,543 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:12:11,543 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 09:12:11,544 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:12:11,544 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 09:12:11,544 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 09:12:11,544 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:12:11,544 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 09:12:11,545 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 09:12:11,545 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 09:12:11,545 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 09:12:11,546 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 09:12:11,547 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:11,548 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:11,551 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 09:12:11,552 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:11,552 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:11,558 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 09:12:11,606 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 09:12:11,618 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 09:12:11,618 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.hbm2ddl.auto=validate, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 09:12:11,620 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 09:12:11,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 09:12:11,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 09:12:11,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 09:12:11,634 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@369c9bb] under count; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@7d37f1c] under every; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@69d6a7cd] under any; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 09:12:11,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6f3f0fae] under sinh; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@21a66d45] under cosh; prior registration was null
2023-12-01 09:12:11,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1f966492] under tanh; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@63fdffcd] under pi; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@7428de63] under log; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 09:12:11,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@1abc9f14] under position; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@4e61e4c2] under overlay; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@e04ccf8] under trim; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@10667848] under cast; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@191a709b] under collate; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@2c6ee758] under extract; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@203c20cf] under ifnull; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 09:12:11,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 09:12:11,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@6411d3c8] under pad; prior registration was null
2023-12-01 09:12:11,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@b8e246c] under str; prior registration was null
2023-12-01 09:12:11,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@dcc6211] under format; prior registration was null
2023-12-01 09:12:11,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@f3fcd59] under timestampadd; prior registration was null
2023-12-01 09:12:11,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@6ee8dcd3] under timestampdiff; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3cd59ef5] under current_date; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@33b082c5] under current_time; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@16073fa8] under current_timestamp; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1cc9cfb2] under local_date; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@cfbc8e8] under local_time; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3bead518] under local_datetime; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@14bf57b2] under offset_datetime; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@46d9aec8] under instant; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@1c504e66] under sql; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@345cf395] under count; prior registration was org.hibernate.dialect.function.CountFunction@369c9bb
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7144655b] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@63fdffcd
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5c82cd4f] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 09:12:11,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@cfbc8e8
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@3bead518
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@4d774249] under trunc; prior registration was null
2023-12-01 09:12:11,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@17b64941] under date_trunc; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@53ac845a] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@1abc9f14
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5136207f] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@26a4551a] under format; prior registration was org.hibernate.dialect.function.FormatFunction@dcc6211
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 09:12:11,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@73ad4ecc] under listagg; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@787f32b7] under mode; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@6aef4eb8] under percentile_cont; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@76c52298] under percentile_disc; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@45d6ef73] under rank; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@3f29e26] under dense_rank; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@1f6d27cc] under percent_rank; prior registration was null
2023-12-01 09:12:11,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@4393593c] under cume_dist; prior registration was null
2023-12-01 09:12:11,644 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 09:12:11,645 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 09:12:11,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 09:12:11,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 09:12:11,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 09:12:11,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 09:12:11,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 09:12:11,652 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 09:12:11,683 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 09:12:11,683 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 09:12:11,706 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,708 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,708 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,708 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,708 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,708 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,709 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 09:12:11,709 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 09:12:11,776 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 09:12:11,778 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,778 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,778 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:11,787 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 09:12:11,787 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 09:12:11,792 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 09:12:11,793 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 09:12:11,793 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 09:12:11,798 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 09:12:11,806 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 09:12:11,806 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 09:12:11,807 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 09:12:11,808 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 09:12:11,808 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 09:12:11,808 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 09:12:11,808 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 09:12:11,832 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 09:12:11,832 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 09:12:11,832 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 09:12:11,832 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 09:12:11,832 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 09:12:11,837 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 09:12:11,838 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 09:12:11,842 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@74d6736] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 09:12:11,843 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 09:12:11,844 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@518ddd3b] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 09:12:11,844 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 09:12:11,845 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@939ff41] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 09:12:11,845 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 09:12:11,847 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 09:12:11,848 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 09:12:11,851 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 09:12:11,851 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 09:12:11,851 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 09:12:11,851 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 09:12:11,851 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 09:12:11,851 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 09:12:11,851 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 09:12:11,851 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 09:12:11,851 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 09:12:11,851 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 09:12:11,851 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 09:12:11,860 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 09:12:11,861 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 09:12:11,862 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 09:12:11,862 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 09:12:11,862 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@483b0690]
2023-12-01 09:12:11,863 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 09:12:11,863 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 09:12:11,871 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - Unable to build DatabaseInformation [n/a]
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "start_value" not found [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.jdbc.JdbcResultSet.getColumnIndex(JdbcResultSet.java:3169)
	at org.h2.jdbc.JdbcResultSet.get(JdbcResultSet.java:3268)
	at org.h2.jdbc.JdbcResultSet.getLong(JdbcResultSet.java:680)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.resultSetStartValueSize(SequenceInformationExtractorLegacyImpl.java:110)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.lambda$extractMetadata$0(SequenceInformationExtractorLegacyImpl.java:54)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:50)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaValidator.doValidation(AbstractSchemaValidator.java:67)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:295)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:941)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:960)
	at org.example.HibernateUtil.<init>(HibernateUtil.java:25)
	at org.example.HibernateUtil.<clinit>(HibernateUtil.java:17)
	at org.example.service.PlanetCrudService.<init>(PlanetCrudService.java:20)
	at org.example.App.main(App.java:16)
2023-12-01 09:12:11,873 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 42122, SQLState: 42S22
2023-12-01 09:12:11,873 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Column "start_value" not found [42122-200]
2023-12-01 09:12:11,873 +0200 [main] DEBUG (SessionFactoryImpl.java:866) - HHH000031: Closing
2023-12-01 09:12:11,874 +0200 [main] DEBUG (TypeConfiguration.java:553) - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@18d003cd] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@483b0690]
2023-12-01 09:12:11,874 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@388623ad
2023-12-01 09:12:11,874 +0200 [main] DEBUG (AbstractServiceRegistryImpl.java:414) - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
2023-12-01 09:12:11,874 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:601) - HHH10001008: Cleaning up connection pool [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 09:12:11,875 +0200 [main] ERROR (DriverManagerConnectionProviderImpl.java:470) - Connection leak detected: there are 1 unclosed connections upon shutting down pool jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL
2023-12-01 09:12:11,875 +0200 [main] ERROR (DriverManagerConnectionProviderImpl.java:301) - Connection leak detected: there are 1 unclosed connections
2023-12-01 09:12:11,875 +0200 [main] DEBUG (BootstrapServiceRegistryImpl.java:298) - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
2023-12-01 09:12:32,356 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-01 09:12:32,359 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-01 09:12:32,361 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-01 09:12:32,378 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-01 09:12:32,379 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-01 09:12:32,386 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-01 09:12:32,388 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-01 09:12:32,391 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-01 09:12:32,393 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-01 09:12:32,393 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-01 09:12:32,393 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 09:12:32,393 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-01 09:12:32,394 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-01 09:12:32,394 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-01 09:12:32,394 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-01 09:12:32,394 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 09:12:32,395 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-01 09:12:32,395 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-01 09:12:32,395 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-01 09:12:32,396 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-01 09:12:32,400 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-01 09:12:32,400 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-01 09:12:32,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 09:12:32,424 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 09:12:32,425 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 09:12:32,426 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 09:12:32,427 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-01 09:12:32,428 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-01 09:12:32,429 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-01 09:12:32,431 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-01 09:12:32,431 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-01 09:12:32,431 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-01 09:12:32,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-01 09:12:32,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-01 09:12:32,431 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-01 09:12:32,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-01 09:12:32,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-01 09:12:32,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-01 09:12:32,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-01 09:12:32,432 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-01 09:12:32,442 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-01 09:12:32,442 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-01 09:12:32,442 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-01 09:12:32,442 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-01 09:12:32,442 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-01 09:12:32,443 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-01 09:12:32,443 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-01 09:12:32,454 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 09:12:32,454 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-01 09:12:32,454 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-01 09:12:32,462 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-01 09:12:32,465 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-01 09:12:32,465 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-01 09:12:32,468 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-01 09:12:32,479 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-01 09:12:32,479 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-01 09:12:32,479 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-01 09:12:32,480 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 09:12:32,480 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-01 09:12:32,480 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-01 09:12:32,482 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-01 09:12:32,482 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-01 09:12:32,483 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-01 09:12:32,497 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-01 09:12:32,507 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-01 09:12:32,509 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-01 09:12:32,511 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-01 09:12:32,514 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:12:32,519 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:12:32,520 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 09:12:32,520 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 09:12:32,521 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:12:32,522 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-01 09:12:32,524 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:12:32,525 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-01 09:12:32,525 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:12:32,526 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:12:32,526 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-01 09:12:32,526 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-01 09:12:32,526 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-01 09:12:32,526 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-01 09:12:32,526 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-01 09:12:32,527 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-01 09:12:32,528 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-01 09:12:32,529 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-01 09:12:32,529 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-01 09:12:32,529 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:12:32,529 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:12:32,529 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 09:12:32,529 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 09:12:32,529 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:12:32,529 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-01 09:12:32,530 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:12:32,530 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-01 09:12:32,530 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:12:32,530 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:12:32,530 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-01 09:12:32,530 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-01 09:12:32,530 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-01 09:12:32,530 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-01 09:12:32,530 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-01 09:12:32,530 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-01 09:12:32,530 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-01 09:12:32,530 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-01 09:12:32,530 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-01 09:12:32,530 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-01 09:12:32,530 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-01 09:12:32,530 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-01 09:12:32,531 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-01 09:12:32,531 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-01 09:12:32,531 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-01 09:12:32,531 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-01 09:12:32,534 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-01 09:12:32,534 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 09:12:32,534 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 09:12:32,534 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-01 09:12:32,534 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-01 09:12:32,534 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-01 09:12:32,534 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-01 09:12:32,534 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-01 09:12:32,534 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-01 09:12:32,535 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-01 09:12:32,536 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:12:32,537 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-01 09:12:32,537 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-01 09:12:32,537 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-01 09:12:32,537 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-01 09:12:32,537 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-01 09:12:32,538 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-01 09:12:32,538 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-01 09:12:32,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-01 09:12:32,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:12:32,538 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-01 09:12:32,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-01 09:12:32,538 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-01 09:12:32,538 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-01 09:12:32,539 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-01 09:12:32,541 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-01 09:12:32,541 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-01 09:12:32,541 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-01 09:12:32,542 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 09:12:32,543 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:32,543 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:32,547 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-01 09:12:32,547 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:32,547 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-01 09:12:32,554 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-01 09:12:32,605 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-01 09:12:32,617 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 09:12:32,617 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-01 09:12:32,619 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-01 09:12:32,621 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 09:12:32,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-01 09:12:32,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-01 09:12:32,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-01 09:12:32,635 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-01 09:12:32,636 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-01 09:12:32,637 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-01 09:12:32,638 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-01 09:12:32,639 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-01 09:12:32,640 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 09:12:32,641 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-01 09:12:32,642 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-01 09:12:32,643 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-01 09:12:32,644 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-01 09:12:32,644 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-01 09:12:32,644 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-01 09:12:32,644 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-01 09:12:32,644 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-01 09:12:32,644 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-01 09:12:32,645 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-01 09:12:32,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-01 09:12:32,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-01 09:12:32,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-01 09:12:32,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-01 09:12:32,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-01 09:12:32,646 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-01 09:12:32,647 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-01 09:12:32,648 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-01 09:12:32,649 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-01 09:12:32,650 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-01 09:12:32,651 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-01 09:12:32,685 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-01 09:12:32,686 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-01 09:12:32,710 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,711 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,712 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,712 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,712 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,712 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,713 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-01 09:12:32,713 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-01 09:12:32,784 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-01 09:12:32,786 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,786 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,786 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-01 09:12:32,795 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-01 09:12:32,795 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-01 09:12:32,801 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-01 09:12:32,801 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-01 09:12:32,801 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-01 09:12:32,807 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-01 09:12:32,815 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-01 09:12:32,815 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-01 09:12:32,817 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-01 09:12:32,817 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-01 09:12:32,817 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-01 09:12:32,817 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-01 09:12:32,817 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-01 09:12:32,841 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-01 09:12:32,841 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-01 09:12:32,841 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-01 09:12:32,841 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-01 09:12:32,841 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-01 09:12:32,846 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-01 09:12:32,847 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-01 09:12:32,850 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-01 09:12:32,851 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 09:12:32,852 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-01 09:12:32,853 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-01 09:12:32,853 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-01 09:12:32,853 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-01 09:12:32,855 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-01 09:12:32,856 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-01 09:12:32,859 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-01 09:12:32,859 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-01 09:12:32,859 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-01 09:12:32,859 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-01 09:12:32,859 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-01 09:12:32,859 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 09:12:32,859 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 09:12:32,859 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-01 09:12:32,859 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 09:12:32,860 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-01 09:12:32,860 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-01 09:12:32,860 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-01 09:12:32,860 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-01 09:12:32,860 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-01 09:12:32,860 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-01 09:12:32,860 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-01 09:12:32,860 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-01 09:12:32,860 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-01 09:12:32,869 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-01 09:12:32,869 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-01 09:12:32,871 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-01 09:12:32,871 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-01 09:12:32,871 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-01 09:12:32,871 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-01 09:12:32,871 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-01 09:12:32,872 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-01 09:12:32,872 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-01 09:12:32,872 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-01 09:12:32,872 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: df707e27-bbb7-4473-b1ce-bc91b9d319a8 (<unnamed>)
2023-12-01 09:12:32,873 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-01 09:12:32,873 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-01 09:12:32,888 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-01 09:12:32,889 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-01 09:12:32,889 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-01 09:12:32,892 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-01 09:12:32,896 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-01 09:12:32,898 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Planet) : 7
2023-12-01 09:12:32,899 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-01 09:12:32,902 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-01 09:12:32,903 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-01 09:12:32,903 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-01 09:12:32,903 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-01 09:12:32,905 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-01 09:12:32,905 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-01 09:12:32,905 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-01 09:12:32,905 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=7}
2023-12-01 09:12:32,906 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:12:32,907 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:12:32,907 +0200 [main] INFO  (PlanetCrudService.java:28) - Planet created: Mars
2023-12-01 09:12:32,936 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-01 09:12:32,936 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet(591775161750666))] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-01 09:12:32,940 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet(591775161750666)]
 |  \-BasicFetch [org.example.entity.Planet(591775161750666).name]

2023-12-01 09:12:32,940 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet(591775161750666)) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-01 09:12:32,944 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-01 09:12:32,948 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-01 09:12:32,948 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet(591775161750666) -> EntityResultInitializer(org.example.entity.Planet(591775161750666))@1019714562 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-01 09:12:32,949 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0
2023-12-01 09:12:32,950 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-01 09:12:32,950 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 1
2023-12-01 09:12:32,951 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#1] : 15288143
2023-12-01 09:12:32,951 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-01 09:12:32,951 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#1
2023-12-01 09:12:32,952 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 2
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#2] : 1389624061
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#2
2023-12-01 09:12:32,952 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 3
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#3] : 2131465140
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mercury]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#3
2023-12-01 09:12:32,952 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 4
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#4] : 20408451
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Jupiter]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#4
2023-12-01 09:12:32,952 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 5
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#5] : 527658240
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Saturn]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#5
2023-12-01 09:12:32,952 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 6
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#6] : 1379563521
2023-12-01 09:12:32,952 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-01 09:12:32,952 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#6
2023-12-01 09:12:32,953 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,953 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-01 09:12:32,953 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(591775161750666)): 7
2023-12-01 09:12:32,953 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(591775161750666)#7] : 1905252289
2023-12-01 09:12:32,953 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-01 09:12:32,953 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(591775161750666)#7
2023-12-01 09:12:32,953 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-01 09:12:32,953 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-01 09:12:32,953 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:35,630 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-02 14:04:35,634 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-02 14:04:35,637 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-02 14:04:35,656 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-02 14:04:35,657 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-02 14:04:35,667 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-02 14:04:35,669 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-02 14:04:35,672 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-02 14:04:35,674 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-02 14:04:35,674 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-02 14:04:35,674 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-02 14:04:35,674 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-02 14:04:35,675 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-02 14:04:35,675 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-02 14:04:35,675 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-02 14:04:35,675 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-02 14:04:35,676 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-02 14:04:35,676 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-02 14:04:35,676 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-02 14:04:35,676 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-02 14:04:35,681 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-02 14:04:35,681 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-02 14:04:35,709 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-02 14:04:35,710 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-02 14:04:35,711 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-02 14:04:35,712 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-02 14:04:35,713 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-02 14:04:35,714 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-02 14:04:35,714 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-02 14:04:35,714 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-02 14:04:35,714 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-02 14:04:35,714 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-02 14:04:35,716 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-02 14:04:35,716 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-02 14:04:35,716 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-02 14:04:35,717 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-02 14:04:35,728 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-02 14:04:35,728 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-02 14:04:35,728 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-02 14:04:35,728 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-02 14:04:35,728 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-02 14:04:35,729 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-02 14:04:35,729 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-02 14:04:35,740 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-02 14:04:35,740 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-02 14:04:35,740 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-02 14:04:35,747 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-02 14:04:35,750 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-02 14:04:35,750 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-02 14:04:35,753 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-02 14:04:35,760 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-02 14:04:35,760 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-02 14:04:35,760 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-02 14:04:35,760 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-02 14:04:35,760 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-02 14:04:35,761 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-02 14:04:35,763 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-02 14:04:35,763 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-02 14:04:35,764 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-02 14:04:35,777 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-02 14:04:35,787 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-02 14:04:35,789 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-02 14:04:35,792 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-02 14:04:35,794 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-02 14:04:35,799 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-02 14:04:35,799 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-02 14:04:35,799 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-02 14:04:35,800 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-02 14:04:35,801 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-02 14:04:35,803 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-02 14:04:35,804 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-02 14:04:35,804 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-02 14:04:35,805 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-02 14:04:35,805 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-02 14:04:35,805 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-02 14:04:35,805 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-02 14:04:35,806 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-02 14:04:35,806 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-02 14:04:35,806 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-02 14:04:35,807 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-02 14:04:35,808 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-02 14:04:35,808 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-02 14:04:35,808 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-02 14:04:35,808 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-02 14:04:35,808 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-02 14:04:35,808 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-02 14:04:35,808 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-02 14:04:35,808 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-02 14:04:35,808 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-02 14:04:35,808 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-02 14:04:35,809 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-02 14:04:35,809 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-02 14:04:35,809 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-02 14:04:35,809 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-02 14:04:35,809 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-02 14:04:35,809 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-02 14:04:35,809 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-02 14:04:35,809 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-02 14:04:35,809 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-02 14:04:35,809 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-02 14:04:35,809 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-02 14:04:35,809 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-02 14:04:35,809 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-02 14:04:35,809 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-02 14:04:35,810 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-02 14:04:35,810 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-02 14:04:35,810 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-02 14:04:35,810 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-02 14:04:35,812 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-02 14:04:35,812 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-02 14:04:35,812 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-02 14:04:35,812 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-02 14:04:35,812 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-02 14:04:35,812 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-02 14:04:35,812 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-02 14:04:35,812 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-02 14:04:35,812 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-02 14:04:35,813 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-02 14:04:35,814 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-02 14:04:35,815 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-02 14:04:35,815 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-02 14:04:35,815 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-02 14:04:35,815 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-02 14:04:35,815 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-02 14:04:35,815 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-02 14:04:35,815 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-02 14:04:35,816 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-02 14:04:35,816 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-02 14:04:35,816 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-02 14:04:35,816 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-02 14:04:35,816 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-02 14:04:35,816 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-02 14:04:35,817 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-02 14:04:35,819 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-02 14:04:35,819 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-02 14:04:35,819 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-02 14:04:35,820 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-02 14:04:35,821 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:04:35,821 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:04:35,825 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-02 14:04:35,825 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:04:35,825 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:04:35,833 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-02 14:04:35,889 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-02 14:04:35,901 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-02 14:04:35,901 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-02 14:04:35,903 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-02 14:04:35,904 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-02 14:04:35,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-02 14:04:35,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-02 14:04:35,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-02 14:04:35,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-02 14:04:35,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-02 14:04:35,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-02 14:04:35,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-02 14:04:35,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-02 14:04:35,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-02 14:04:35,924 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-02 14:04:35,924 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-02 14:04:35,924 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-02 14:04:35,925 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-02 14:04:35,926 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-02 14:04:35,927 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-02 14:04:35,928 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-02 14:04:35,929 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-02 14:04:35,930 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-02 14:04:35,931 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-02 14:04:35,932 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-02 14:04:35,933 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-02 14:04:35,935 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-02 14:04:35,968 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-02 14:04:35,968 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-02 14:04:35,992 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:35,993 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:35,994 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:35,994 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:35,994 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:35,994 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:35,994 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-02 14:04:35,994 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-02 14:04:36,059 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-02 14:04:36,061 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:36,061 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:36,061 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:04:36,071 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-02 14:04:36,071 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-02 14:04:36,076 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-02 14:04:36,077 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-02 14:04:36,077 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-02 14:04:36,081 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-02 14:04:36,090 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-02 14:04:36,090 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-02 14:04:36,091 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-02 14:04:36,091 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-02 14:04:36,091 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-02 14:04:36,091 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-02 14:04:36,091 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-02 14:04:36,114 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-02 14:04:36,114 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-02 14:04:36,114 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-02 14:04:36,114 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-02 14:04:36,114 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-02 14:04:36,120 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-02 14:04:36,121 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-02 14:04:36,125 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-02 14:04:36,125 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-02 14:04:36,127 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-02 14:04:36,127 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-02 14:04:36,127 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-02 14:04:36,127 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-02 14:04:36,129 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-02 14:04:36,130 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-02 14:04:36,133 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-02 14:04:36,133 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-02 14:04:36,133 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-02 14:04:36,133 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-02 14:04:36,133 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-02 14:04:36,133 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-02 14:04:36,133 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-02 14:04:36,133 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-02 14:04:36,133 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-02 14:04:36,133 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-02 14:04:36,133 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-02 14:04:36,142 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-02 14:04:36,142 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-02 14:04:36,143 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-02 14:04:36,143 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-02 14:04:36,143 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-02 14:04:36,143 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-02 14:04:36,143 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-02 14:04:36,144 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-02 14:04:36,144 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-02 14:04:36,145 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-02 14:04:36,145 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 53dca3a9-4480-4f23-b4a6-40cbb003a634 (<unnamed>)
2023-12-02 14:04:36,145 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-02 14:04:36,145 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-02 14:04:36,160 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-02 14:04:36,162 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-02 14:04:36,162 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-02 14:04:36,164 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-02 14:04:36,168 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-02 14:04:36,170 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Planet) : 8
2023-12-02 14:04:36,170 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-02 14:04:36,172 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-02 14:04:36,172 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-02 14:04:36,172 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-02 14:04:36,175 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-02 14:04:36,176 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-02 14:04:36,176 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-02 14:04:36,177 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-02 14:04:36,177 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=8}
2023-12-02 14:04:36,178 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,178 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,178 +0200 [main] INFO  (PlanetCrudService.java:28) - Planet created: Mars
2023-12-02 14:04:36,207 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-02 14:04:36,207 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet(635670588977375))] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-02 14:04:36,210 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet(635670588977375)]
 |  \-BasicFetch [org.example.entity.Planet(635670588977375).name]

2023-12-02 14:04:36,210 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet(635670588977375)) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-02 14:04:36,213 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-02 14:04:36,217 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-02 14:04:36,217 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet(635670588977375) -> EntityResultInitializer(org.example.entity.Planet(635670588977375))@1019714562 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-02 14:04:36,218 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0
2023-12-02 14:04:36,219 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-02 14:04:36,219 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 1
2023-12-02 14:04:36,220 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#1] : 15288143
2023-12-02 14:04:36,220 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:04:36,220 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#1
2023-12-02 14:04:36,220 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,220 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-02 14:04:36,220 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 2
2023-12-02 14:04:36,221 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#2] : 1389624061
2023-12-02 14:04:36,221 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-02 14:04:36,221 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#2
2023-12-02 14:04:36,221 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,221 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 3
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#3] : 2131465140
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mercury]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#3
2023-12-02 14:04:36,222 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 4
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#4] : 20408451
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Jupiter]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#4
2023-12-02 14:04:36,222 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 5
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#5] : 527658240
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Saturn]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#5
2023-12-02 14:04:36,222 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 6
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#6] : 1379563521
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#6
2023-12-02 14:04:36,222 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 7
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#7] : 1905252289
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#7
2023-12-02 14:04:36,222 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,222 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(635670588977375)): 8
2023-12-02 14:04:36,222 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(635670588977375)#8] : 1271323139
2023-12-02 14:04:36,223 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:04:36,223 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(635670588977375)#8
2023-12-02 14:04:36,223 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:04:36,223 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,223 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,224 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-02 14:04:36,224 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-02 14:04:36,224 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-02 14:04:36,224 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        CLIENT
        (FIRST_NAME, LAST_NAME, ID) 
    [34mvalues[0m
        (?, ?, [34mdefault[0m)
2023-12-02 14:04:36,225 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Client) : 11
2023-12-02 14:04:36,225 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-02 14:04:36,225 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-02 14:04:36,225 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-02 14:04:36,225 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-02 14:04:36,225 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-02 14:04:36,225 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-02 14:04:36,225 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-02 14:04:36,225 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-02 14:04:36,225 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Client{firstName=Dmitry, lastName=Poliashenko, id=11}
2023-12-02 14:04:36,225 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,225 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,225 +0200 [main] INFO  (ClientCrudService.java:28) - Client created: Dmitry
2023-12-02 14:04:36,225 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-02 14:04:36,225 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(635670630132916))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-02 14:04:36,226 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(635670630132916)]
 |  +-BasicFetch [org.example.entity.Client(635670630132916).firstName]
 |  \-BasicFetch [org.example.entity.Client(635670630132916).lastName]

2023-12-02 14:04:36,226 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(635670630132916)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-02 14:04:36,226 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-02 14:04:36,226 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-02 14:04:36,226 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(635670630132916) -> EntityResultInitializer(org.example.entity.Client(635670630132916))@1354314579 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-02 14:04:36,226 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 1
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#1] : 728985582
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#1
2023-12-02 14:04:36,226 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 2
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#2] : 900593187
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#2
2023-12-02 14:04:36,226 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,226 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-02 14:04:36,226 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 3
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#3] : 1164934558
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#3
2023-12-02 14:04:36,227 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 4
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#4] : 1976788674
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#4
2023-12-02 14:04:36,227 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 5
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#5] : 150208546
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#5
2023-12-02 14:04:36,227 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 6
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#6] : 1379066865
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#6
2023-12-02 14:04:36,227 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 7
2023-12-02 14:04:36,227 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#7] : 1821370276
2023-12-02 14:04:36,227 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#7
2023-12-02 14:04:36,228 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 8
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#8] : 33847681
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#8
2023-12-02 14:04:36,228 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 9
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#9] : 718904563
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#9
2023-12-02 14:04:36,228 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 10
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#10] : 1865539378
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#10
2023-12-02 14:04:36,228 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(635670630132916)): 11
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(635670630132916)#11] : 2089858999
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-02 14:04:36,228 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(635670630132916)#11
2023-12-02 14:04:36,228 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@3249e278
2023-12-02 14:04:36,228 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:04:36,228 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,174 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-02 14:55:28,177 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-02 14:55:28,179 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-02 14:55:28,195 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-02 14:55:28,196 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-02 14:55:28,203 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-02 14:55:28,204 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-02 14:55:28,207 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-02 14:55:28,209 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-02 14:55:28,210 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-02 14:55:28,210 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-02 14:55:28,210 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-02 14:55:28,211 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-02 14:55:28,211 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-02 14:55:28,215 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-02 14:55:28,215 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-02 14:55:28,239 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-02 14:55:28,240 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-02 14:55:28,241 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-02 14:55:28,242 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-02 14:55:28,243 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-02 14:55:28,244 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-02 14:55:28,246 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-02 14:55:28,246 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-02 14:55:28,247 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-02 14:55:28,257 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-02 14:55:28,257 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-02 14:55:28,257 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-02 14:55:28,257 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-02 14:55:28,257 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-02 14:55:28,258 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-02 14:55:28,259 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-02 14:55:28,268 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-02 14:55:28,268 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-02 14:55:28,268 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-02 14:55:28,276 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-02 14:55:28,279 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-02 14:55:28,280 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-02 14:55:28,283 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-02 14:55:28,290 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-02 14:55:28,290 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-02 14:55:28,290 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-02 14:55:28,291 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-02 14:55:28,291 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-02 14:55:28,291 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-02 14:55:28,293 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-02 14:55:28,293 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-02 14:55:28,294 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-02 14:55:28,307 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-02 14:55:28,317 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-02 14:55:28,319 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-02 14:55:28,321 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-02 14:55:28,323 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-02 14:55:28,329 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-02 14:55:28,329 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-02 14:55:28,329 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-02 14:55:28,330 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-02 14:55:28,331 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-02 14:55:28,333 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-02 14:55:28,333 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-02 14:55:28,334 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-02 14:55:28,335 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-02 14:55:28,335 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-02 14:55:28,336 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-02 14:55:28,336 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-02 14:55:28,336 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-02 14:55:28,336 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-02 14:55:28,336 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-02 14:55:28,338 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-02 14:55:28,338 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-02 14:55:28,338 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-02 14:55:28,338 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-02 14:55:28,338 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-02 14:55:28,339 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-02 14:55:28,339 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-02 14:55:28,339 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-02 14:55:28,339 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-02 14:55:28,339 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-02 14:55:28,339 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-02 14:55:28,339 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-02 14:55:28,339 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-02 14:55:28,339 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-02 14:55:28,339 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-02 14:55:28,339 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-02 14:55:28,339 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-02 14:55:28,339 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-02 14:55:28,339 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-02 14:55:28,339 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-02 14:55:28,339 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-02 14:55:28,340 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-02 14:55:28,340 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-02 14:55:28,340 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-02 14:55:28,340 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-02 14:55:28,340 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-02 14:55:28,340 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-02 14:55:28,340 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-02 14:55:28,340 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-02 14:55:28,343 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-02 14:55:28,343 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-02 14:55:28,343 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-02 14:55:28,343 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-02 14:55:28,343 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-02 14:55:28,343 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-02 14:55:28,343 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-02 14:55:28,343 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-02 14:55:28,343 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-02 14:55:28,344 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-02 14:55:28,345 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-02 14:55:28,346 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-02 14:55:28,346 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-02 14:55:28,346 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-02 14:55:28,346 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-02 14:55:28,346 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-02 14:55:28,346 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-02 14:55:28,346 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-02 14:55:28,346 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-02 14:55:28,347 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-02 14:55:28,347 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-02 14:55:28,347 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-02 14:55:28,347 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-02 14:55:28,347 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-02 14:55:28,348 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-02 14:55:28,350 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-02 14:55:28,350 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-02 14:55:28,350 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-02 14:55:28,351 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-02 14:55:28,352 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:55:28,352 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:55:28,355 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-02 14:55:28,355 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:55:28,355 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-02 14:55:28,362 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-02 14:55:28,415 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-02 14:55:28,428 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-02 14:55:28,428 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-02 14:55:28,429 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-02 14:55:28,431 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-02 14:55:28,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-02 14:55:28,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-02 14:55:28,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-02 14:55:28,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-02 14:55:28,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-02 14:55:28,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-02 14:55:28,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-02 14:55:28,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-02 14:55:28,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-02 14:55:28,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-02 14:55:28,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-02 14:55:28,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-02 14:55:28,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-02 14:55:28,451 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-02 14:55:28,452 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-02 14:55:28,453 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-02 14:55:28,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-02 14:55:28,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-02 14:55:28,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-02 14:55:28,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-02 14:55:28,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-02 14:55:28,454 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-02 14:55:28,455 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-02 14:55:28,456 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-02 14:55:28,457 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-02 14:55:28,458 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-02 14:55:28,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-02 14:55:28,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-02 14:55:28,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-02 14:55:28,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-02 14:55:28,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-02 14:55:28,459 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-02 14:55:28,460 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-02 14:55:28,461 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-02 14:55:28,463 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-02 14:55:28,494 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-02 14:55:28,495 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-02 14:55:28,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,520 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,521 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,521 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,521 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,521 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,521 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-02 14:55:28,521 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-02 14:55:28,593 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-02 14:55:28,595 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,595 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,595 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-02 14:55:28,604 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-02 14:55:28,604 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-02 14:55:28,610 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-02 14:55:28,610 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-02 14:55:28,610 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-02 14:55:28,615 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-02 14:55:28,623 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-02 14:55:28,623 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-02 14:55:28,625 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-02 14:55:28,625 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-02 14:55:28,625 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-02 14:55:28,625 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-02 14:55:28,625 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-02 14:55:28,648 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-02 14:55:28,648 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-02 14:55:28,648 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-02 14:55:28,648 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-02 14:55:28,648 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-02 14:55:28,654 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-02 14:55:28,655 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-02 14:55:28,659 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-02 14:55:28,659 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-02 14:55:28,661 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-02 14:55:28,661 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-02 14:55:28,661 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-02 14:55:28,661 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-02 14:55:28,663 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-02 14:55:28,664 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-02 14:55:28,667 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-02 14:55:28,667 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-02 14:55:28,667 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-02 14:55:28,667 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-02 14:55:28,667 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-02 14:55:28,667 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-02 14:55:28,667 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-02 14:55:28,667 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-02 14:55:28,668 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-02 14:55:28,668 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-02 14:55:28,668 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-02 14:55:28,668 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-02 14:55:28,668 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-02 14:55:28,668 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-02 14:55:28,668 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-02 14:55:28,668 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-02 14:55:28,668 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-02 14:55:28,668 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-02 14:55:28,677 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-02 14:55:28,677 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-02 14:55:28,678 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-02 14:55:28,678 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-02 14:55:28,678 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-02 14:55:28,679 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-02 14:55:28,679 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-02 14:55:28,679 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-02 14:55:28,679 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-02 14:55:28,680 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-02 14:55:28,680 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 5b4d8a1c-92ea-4db8-9f6d-22377f338e06 (<unnamed>)
2023-12-02 14:55:28,680 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-02 14:55:28,680 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-02 14:55:28,693 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-02 14:55:28,694 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-02 14:55:28,694 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-02 14:55:28,697 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-02 14:55:28,701 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        PLANET
        (NAME, ID) 
    [34mvalues[0m
        (?, [34mdefault[0m)
2023-12-02 14:55:28,704 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Planet) : 9
2023-12-02 14:55:28,705 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-02 14:55:28,706 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-02 14:55:28,708 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-02 14:55:28,709 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-02 14:55:28,709 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-02 14:55:28,710 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-02 14:55:28,710 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-02 14:55:28,710 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-02 14:55:28,711 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=9}
2023-12-02 14:55:28,712 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,712 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,712 +0200 [main] INFO  (PlanetCrudService.java:28) - Planet created: Mars
2023-12-02 14:55:28,744 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-02 14:55:28,744 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet(636590837834958))] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-02 14:55:28,748 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet(636590837834958)]
 |  \-BasicFetch [org.example.entity.Planet(636590837834958).name]

2023-12-02 14:55:28,748 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet(636590837834958)) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-02 14:55:28,751 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-02 14:55:28,754 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-02 14:55:28,754 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet(636590837834958) -> EntityResultInitializer(org.example.entity.Planet(636590837834958))@1019714562 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-02 14:55:28,755 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0
2023-12-02 14:55:28,756 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-02 14:55:28,756 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 1
2023-12-02 14:55:28,757 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#1] : 15288143
2023-12-02 14:55:28,757 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:55:28,757 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#1
2023-12-02 14:55:28,757 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,757 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-02 14:55:28,757 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 2
2023-12-02 14:55:28,757 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#2] : 1389624061
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#2
2023-12-02 14:55:28,758 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 3
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#3] : 2131465140
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mercury]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#3
2023-12-02 14:55:28,758 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 4
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#4] : 20408451
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Jupiter]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#4
2023-12-02 14:55:28,758 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 5
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#5] : 527658240
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Saturn]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#5
2023-12-02 14:55:28,758 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,758 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-02 14:55:28,758 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 6
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#6] : 1379563521
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#6
2023-12-02 14:55:28,759 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 7
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#7] : 1905252289
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#7
2023-12-02 14:55:28,759 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 8
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#8] : 1271323139
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#8
2023-12-02 14:55:28,759 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet(636590837834958)): 9
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet(636590837834958)#9] : 1331275030
2023-12-02 14:55:28,759 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-02 14:55:28,759 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet(636590837834958)#9
2023-12-02 14:55:28,759 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5ae15
2023-12-02 14:55:28,760 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,760 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,761 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-02 14:55:28,761 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-02 14:55:28,761 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-02 14:55:28,761 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        CLIENT
        (FIRST_NAME, LAST_NAME, ID) 
    [34mvalues[0m
        (?, ?, [34mdefault[0m)
2023-12-02 14:55:28,761 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Client) : 12
2023-12-02 14:55:28,761 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-02 14:55:28,762 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-02 14:55:28,762 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-02 14:55:28,762 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-02 14:55:28,762 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-02 14:55:28,762 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-02 14:55:28,762 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-02 14:55:28,762 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-02 14:55:28,762 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Client{firstName=Dmitry, lastName=Poliashenko, id=12}
2023-12-02 14:55:28,762 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,762 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,762 +0200 [main] INFO  (ClientCrudService.java:28) - Client created: Dmitry
2023-12-02 14:55:28,762 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-02 14:55:28,762 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(636590881957458))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-02 14:55:28,762 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(636590881957458)]
 |  +-BasicFetch [org.example.entity.Client(636590881957458).firstName]
 |  \-BasicFetch [org.example.entity.Client(636590881957458).lastName]

2023-12-02 14:55:28,762 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(636590881957458)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-02 14:55:28,763 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-02 14:55:28,763 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-02 14:55:28,763 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(636590881957458) -> EntityResultInitializer(org.example.entity.Client(636590881957458))@1143499107 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-02 14:55:28,763 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 1
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#1] : 843702904
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#1
2023-12-02 14:55:28,763 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 2
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#2] : 1164934558
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#2
2023-12-02 14:55:28,763 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 3
2023-12-02 14:55:28,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#3] : 1976788674
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-02 14:55:28,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#3
2023-12-02 14:55:28,764 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 4
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#4] : 150208546
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#4
2023-12-02 14:55:28,764 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 5
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#5] : 1379066865
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#5
2023-12-02 14:55:28,764 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 6
2023-12-02 14:55:28,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#6] : 1821370276
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#6
2023-12-02 14:55:28,765 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 7
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#7] : 33847681
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#7
2023-12-02 14:55:28,765 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 8
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#8] : 718904563
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#8
2023-12-02 14:55:28,765 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 9
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#9] : 1865539378
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-02 14:55:28,765 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#9
2023-12-02 14:55:28,765 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 10
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#10] : 2089858999
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#10
2023-12-02 14:55:28,766 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 11
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#11] : 1568215509
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#11
2023-12-02 14:55:28,766 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [12]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(636590881957458)): 12
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(636590881957458)#12] : 1000419469
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-02 14:55:28,766 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(636590881957458)#12
2023-12-02 14:55:28,766 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@35adf623
2023-12-02 14:55:28,766 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,766 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,767 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-02 14:55:28,767 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-02 14:55:28,769 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-02 14:55:28,769 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-02 14:55:28,769 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-02 14:55:28,769 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2023-12-02 14:55:28,769 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-02 14:55:28,769 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-02 14:55:28,769 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Client{firstName=Dmitry, lastName=Poliashenko, id=12}
2023-12-02 14:55:28,770 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mdelete[0m 
    [34mfrom[0m
        CLIENT 
    [34mwhere[0m
        ID=?
2023-12-02 14:55:28,772 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,772 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-02 14:55:28,772 +0200 [main] INFO  (ClientCrudService.java:75) - Client deleted: Dmitry
2023-12-03 09:31:48,647 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:31:48,651 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:31:48,654 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:31:48,674 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:31:48,675 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:31:48,685 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:31:48,687 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:31:48,690 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:31:48,692 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:31:48,692 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:31:48,692 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:31:48,692 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:31:48,693 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:31:48,693 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:31:48,693 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:31:48,693 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:31:48,694 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:31:48,694 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:31:48,694 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:31:48,694 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:31:48,699 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:31:48,699 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:31:48,726 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:31:48,726 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:31:48,727 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:31:48,728 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:31:48,729 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:31:48,730 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:31:48,731 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:31:48,733 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:31:48,733 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:31:48,734 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:31:48,745 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:31:48,745 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:31:48,745 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:31:48,745 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:31:48,745 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:31:48,746 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:31:48,747 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:31:48,756 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:31:48,756 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:31:48,756 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:31:48,764 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:31:48,767 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:31:48,768 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:31:48,772 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:31:48,780 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:31:48,780 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:31:48,780 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:31:48,781 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:31:48,781 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:31:48,781 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:31:48,783 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:31:48,783 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:31:48,784 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:31:48,798 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:31:48,809 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:31:48,811 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:31:48,813 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:31:48,816 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:31:48,822 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:31:48,822 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:31:48,822 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:31:48,823 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:31:48,824 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:31:48,826 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:31:48,827 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:31:48,827 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:31:48,828 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:31:48,829 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:31:48,829 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:31:48,829 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:31:48,829 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:31:48,829 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:31:48,829 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:31:48,831 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:31:48,831 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:31:48,831 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:31:48,832 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:31:48,832 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:31:48,832 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:31:48,832 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:31:48,832 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:31:48,832 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:31:48,832 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:31:48,832 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:31:48,832 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:31:48,832 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:31:48,833 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:31:48,833 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:31:48,833 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:31:48,833 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:31:48,833 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:31:48,833 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:31:48,833 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:31:48,833 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:31:48,833 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:31:48,833 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:31:48,833 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:31:48,833 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:31:48,834 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:31:48,834 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:31:48,834 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:31:48,834 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:31:48,836 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:31:48,836 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:31:48,836 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:31:48,836 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:31:48,836 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:31:48,836 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:31:48,836 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:31:48,836 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:31:48,836 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:31:48,837 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:31:48,838 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:31:48,839 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:31:48,839 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:31:48,839 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:31:48,839 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:31:48,840 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:31:48,840 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:31:48,840 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:31:48,840 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:31:48,840 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:31:48,840 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:31:48,840 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:31:48,840 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:31:48,840 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:31:48,841 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:31:48,841 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:31:48,841 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:31:48,841 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:31:48,841 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:31:48,842 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:31:48,842 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:31:48,844 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:31:48,844 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:31:48,844 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:31:48,845 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:31:48,845 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:31:48,846 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:31:48,849 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:31:48,849 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:31:48,849 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:31:48,859 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:31:48,927 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:31:48,940 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:31:48,941 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:31:48,942 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:31:48,945 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:31:48,960 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:31:48,960 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:31:48,961 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:31:48,961 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:31:48,961 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-03 09:31:48,961 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-03 09:31:48,961 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:31:48,962 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:31:48,963 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:31:48,964 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:31:48,964 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:31:48,964 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:31:48,964 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:31:48,964 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:31:48,964 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:31:48,965 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:31:48,966 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-03 09:31:48,966 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:31:48,966 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:31:48,966 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-03 09:31:48,966 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-03 09:31:48,966 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:31:48,967 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:31:48,968 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:31:48,969 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:31:48,970 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:31:48,971 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:31:48,971 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:31:48,971 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:31:48,971 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:31:48,971 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-03 09:31:48,972 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-03 09:31:48,973 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:31:48,974 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:31:48,975 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:31:48,976 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:31:48,977 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:31:48,979 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:31:49,014 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:31:49,014 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:31:49,039 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,040 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,041 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,041 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,041 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,041 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,041 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:31:49,041 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:31:49,113 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:31:49,115 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,115 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,115 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:31:49,124 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:31:49,124 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:31:49,130 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:31:49,130 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:31:49,130 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:31:49,135 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:31:49,146 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:31:49,146 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:31:49,149 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:31:49,149 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:31:49,149 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:31:49,149 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:31:49,149 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:31:49,175 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:31:49,175 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:31:49,175 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:31:49,175 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:31:49,175 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:31:49,182 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:31:49,183 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:31:49,187 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:31:49,188 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:31:49,189 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:31:49,189 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:31:49,189 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:31:49,189 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:31:49,191 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:31:49,192 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:31:49,196 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:31:49,196 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:31:49,196 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:31:49,196 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:31:49,196 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:31:49,196 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:31:49,196 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:31:49,197 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:31:49,197 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:31:49,197 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:31:49,197 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:31:49,197 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:31:49,197 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:31:49,197 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:31:49,197 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:31:49,197 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:31:49,197 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:31:49,197 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:31:49,209 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:31:49,209 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:31:49,210 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:31:49,210 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:31:49,211 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-03 09:31:49,211 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:31:49,211 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:31:49,211 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:31:49,211 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:31:49,213 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-03 09:31:49,213 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 4d94818f-3039-4fdb-b9ba-a9e8882d2906 (<unnamed>)
2023-12-03 09:31:49,213 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:31:49,213 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:31:49,227 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:31:49,234 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:31:49,238 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:31:49,239 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@2045706119 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:31:49,241 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:31:49,242 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:31:49,243 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1183745381
2023-12-03 09:31:49,243 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:31:49,243 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:31:49,245 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:31:49,245 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@43cb5f38
2023-12-03 09:31:49,246 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:31:49,276 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:31:49,276 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(647731172355791))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:31:49,280 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(647731172355791)]
 |  +-BasicFetch [org.example.entity.Client(647731172355791).firstName]
 |  \-BasicFetch [org.example.entity.Client(647731172355791).lastName]

2023-12-03 09:31:49,280 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(647731172355791)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:31:49,281 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:31:49,281 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:31:49,281 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(647731172355791) -> EntityResultInitializer(org.example.entity.Client(647731172355791))@1946904104 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:31:49,281 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:31:49,281 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:31:49,281 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 1
2023-12-03 09:31:49,281 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#1] : 70528019
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#1
2023-12-03 09:31:49,282 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 2
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#2] : 2106390956
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#2
2023-12-03 09:31:49,282 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 3
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#3] : 1594600318
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#3
2023-12-03 09:31:49,282 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 4
2023-12-03 09:31:49,282 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#4] : 61321954
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:31:49,282 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#4
2023-12-03 09:31:49,283 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 5
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#5] : 863661360
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#5
2023-12-03 09:31:49,283 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 6
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#6] : 690070378
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#6
2023-12-03 09:31:49,283 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 7
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#7] : 729005419
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#7
2023-12-03 09:31:49,283 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 8
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#8] : 360528453
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:31:49,283 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#8
2023-12-03 09:31:49,283 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 9
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#9] : 1963906615
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#9
2023-12-03 09:31:49,284 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 10
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#10] : 1368391951
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#10
2023-12-03 09:31:49,284 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647731172355791)): 11
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647731172355791)#11] : 1732146867
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:31:49,284 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647731172355791)#11
2023-12-03 09:31:49,284 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:31:49,284 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:31:49,284 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:31:49,286 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:31:49,286 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:31:49,286 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@39959931 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:31:49,287 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:31:49,287 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:31:49,287 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 1883269062
2023-12-03 09:31:49,287 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:31:49,287 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:31:49,287 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7f4596d0
2023-12-03 09:31:49,287 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:31:49,287 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:31:49,287 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:31:49,287 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1610803524 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:31:49,287 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:31:49,288 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:31:49,288 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 2024314762
2023-12-03 09:31:49,288 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:31:49,288 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:31:49,288 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@f171912
2023-12-03 09:31:49,288 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:32:07,576 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:32:07,578 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:32:07,580 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:32:07,597 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:32:07,598 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:32:07,606 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:32:07,607 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:32:07,611 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:32:07,613 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:32:07,613 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:32:07,613 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:32:07,613 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:32:07,613 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:32:07,614 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:32:07,614 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:32:07,614 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:32:07,615 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:32:07,615 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:32:07,615 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:32:07,615 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:32:07,620 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:32:07,620 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:32:07,645 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:32:07,645 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:32:07,646 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:32:07,647 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:32:07,648 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:32:07,649 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:32:07,650 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:32:07,652 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:32:07,652 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:32:07,653 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:32:07,663 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:32:07,664 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:32:07,664 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:32:07,664 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:32:07,664 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:32:07,665 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:32:07,665 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:32:07,674 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:32:07,674 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:32:07,674 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:32:07,681 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:32:07,684 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:32:07,685 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:32:07,687 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:32:07,697 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:32:07,697 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:32:07,697 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:32:07,697 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:32:07,697 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:32:07,698 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:32:07,700 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:32:07,700 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:32:07,701 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:32:07,713 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:32:07,723 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:32:07,725 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:32:07,728 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:32:07,730 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:32:07,735 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:32:07,735 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:32:07,735 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:32:07,736 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:32:07,737 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:32:07,739 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:32:07,740 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:32:07,740 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:32:07,741 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:32:07,741 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:32:07,741 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:32:07,741 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:32:07,741 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:32:07,742 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:32:07,742 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:32:07,744 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:32:07,744 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:32:07,744 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:32:07,744 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:32:07,744 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:32:07,744 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:32:07,744 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:32:07,744 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:32:07,745 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:32:07,745 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:32:07,745 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:32:07,745 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:32:07,745 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:32:07,745 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:32:07,745 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:32:07,745 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:32:07,745 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:32:07,745 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:32:07,745 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:32:07,746 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:32:07,746 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:32:07,746 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:32:07,746 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:32:07,746 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:32:07,746 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:32:07,746 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:32:07,746 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:32:07,746 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:32:07,746 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:32:07,748 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:32:07,749 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:32:07,749 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:32:07,749 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:32:07,749 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:32:07,749 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:32:07,749 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:32:07,749 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:32:07,749 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:32:07,750 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:32:07,750 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:32:07,752 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:32:07,752 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:32:07,752 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:32:07,752 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:32:07,752 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:32:07,752 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:32:07,752 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:32:07,752 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:32:07,752 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:32:07,752 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:32:07,752 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:32:07,753 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:32:07,753 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:32:07,753 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:32:07,753 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:32:07,754 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:32:07,754 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:32:07,754 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:32:07,754 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:32:07,754 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:32:07,756 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:32:07,756 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:32:07,756 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:32:07,757 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:32:07,757 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:32:07,758 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:32:07,761 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:32:07,761 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:32:07,761 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:32:07,768 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:32:07,826 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:32:07,838 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:32:07,838 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:32:07,840 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:32:07,842 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:32:07,855 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:32:07,855 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:32:07,856 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:32:07,856 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:32:07,856 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-03 09:32:07,856 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-03 09:32:07,856 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:32:07,857 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:32:07,858 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:32:07,859 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-03 09:32:07,859 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-03 09:32:07,859 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-03 09:32:07,859 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-03 09:32:07,859 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-03 09:32:07,860 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-03 09:32:07,861 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:32:07,862 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:32:07,863 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:32:07,864 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-03 09:32:07,865 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-03 09:32:07,866 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:32:07,866 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:32:07,866 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:32:07,866 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:32:07,866 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:32:07,866 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:32:07,867 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:32:07,868 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:32:07,869 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:32:07,870 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:32:07,872 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:32:07,908 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:32:07,908 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:32:07,934 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:07,935 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:07,936 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:07,936 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:07,936 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:07,936 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:07,936 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:32:07,936 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:32:08,005 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:32:08,009 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:08,009 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:08,009 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:32:08,018 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:32:08,018 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:32:08,024 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:32:08,024 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:32:08,024 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:32:08,030 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:32:08,039 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:32:08,039 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:32:08,041 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:32:08,041 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:32:08,041 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:32:08,041 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:32:08,041 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:32:08,064 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:32:08,064 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:32:08,065 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:32:08,065 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:32:08,065 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:32:08,070 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:32:08,071 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:32:08,074 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:32:08,075 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:32:08,076 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:32:08,076 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:32:08,076 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:32:08,076 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:32:08,078 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:32:08,079 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:32:08,082 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:32:08,082 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:32:08,082 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:32:08,082 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:32:08,082 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:32:08,082 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:32:08,082 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:32:08,082 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:32:08,082 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:32:08,083 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:32:08,083 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:32:08,083 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:32:08,083 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:32:08,083 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:32:08,083 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:32:08,083 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:32:08,083 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:32:08,083 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:32:08,092 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:32:08,092 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:32:08,093 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:32:08,093 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:32:08,093 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-03 09:32:08,094 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:32:08,094 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:32:08,094 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:32:08,094 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:32:08,095 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-03 09:32:08,095 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 161a13e6-6f6e-4cd0-a0a8-c78b3f298818 (<unnamed>)
2023-12-03 09:32:08,095 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:32:08,095 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:32:08,111 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:32:08,118 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:32:08,121 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:32:08,122 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@2045706119 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:32:08,126 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:32:08,127 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:32:08,128 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1183745381
2023-12-03 09:32:08,128 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:32:08,128 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:32:08,130 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:32:08,130 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@43cb5f38
2023-12-03 09:32:08,131 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:32:08,160 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:32:08,160 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(647750056080958))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:32:08,163 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(647750056080958)]
 |  +-BasicFetch [org.example.entity.Client(647750056080958).firstName]
 |  \-BasicFetch [org.example.entity.Client(647750056080958).lastName]

2023-12-03 09:32:08,163 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(647750056080958)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:32:08,164 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:32:08,164 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:32:08,164 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(647750056080958) -> EntityResultInitializer(org.example.entity.Client(647750056080958))@1946904104 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:32:08,164 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 1
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#1] : 70528019
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#1
2023-12-03 09:32:08,165 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 2
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#2] : 2106390956
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#2
2023-12-03 09:32:08,165 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 3
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#3] : 1594600318
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:32:08,165 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#3
2023-12-03 09:32:08,166 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 4
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#4] : 61321954
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#4
2023-12-03 09:32:08,166 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 5
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#5] : 863661360
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#5
2023-12-03 09:32:08,166 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 6
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#6] : 690070378
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#6
2023-12-03 09:32:08,166 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 7
2023-12-03 09:32:08,166 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#7] : 729005419
2023-12-03 09:32:08,166 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#7
2023-12-03 09:32:08,167 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 8
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#8] : 360528453
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#8
2023-12-03 09:32:08,167 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 9
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#9] : 1963906615
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#9
2023-12-03 09:32:08,167 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 10
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#10] : 1368391951
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#10
2023-12-03 09:32:08,167 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647750056080958)): 11
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647750056080958)#11] : 1732146867
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:32:08,167 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647750056080958)#11
2023-12-03 09:32:08,167 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:32:08,168 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:32:08,168 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:32:08,169 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:32:08,170 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:32:08,170 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@39959931 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:32:08,170 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:32:08,170 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:32:08,170 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 1883269062
2023-12-03 09:32:08,170 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:32:08,170 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:32:08,170 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7f4596d0
2023-12-03 09:32:08,170 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:32:08,170 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:32:08,170 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:32:08,171 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1610803524 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:32:08,171 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:32:08,171 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:32:08,171 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 2024314762
2023-12-03 09:32:08,171 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:32:08,171 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:32:08,171 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@f171912
2023-12-03 09:32:08,171 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:35:23,874 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:35:23,877 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:35:23,879 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:35:23,897 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:35:23,898 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:35:23,905 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:35:23,907 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:35:23,910 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:35:23,912 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:35:23,912 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:35:23,912 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:35:23,912 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:35:23,912 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:35:23,912 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:35:23,913 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:35:23,913 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:35:23,914 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:35:23,914 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:35:23,914 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:35:23,915 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:35:23,919 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:35:23,919 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:35:23,946 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:35:23,947 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:35:23,948 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:35:23,949 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:35:23,950 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:35:23,951 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:35:23,953 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:35:23,953 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:35:23,953 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:35:23,954 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:35:23,964 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:35:23,964 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:35:23,964 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:35:23,964 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:35:23,964 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:35:23,965 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:35:23,965 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:35:23,974 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:35:23,974 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:35:23,974 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:35:23,982 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:35:23,985 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:35:23,985 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:35:23,988 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:35:23,996 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:35:23,996 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:35:23,996 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:35:23,996 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:35:23,996 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:35:23,997 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:35:23,999 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:35:23,999 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:35:24,000 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:35:24,012 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:35:24,022 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:35:24,024 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:35:24,026 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:35:24,029 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:35:24,034 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:35:24,034 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:35:24,034 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:35:24,035 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:35:24,036 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:35:24,038 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:35:24,039 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:35:24,039 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:35:24,040 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:35:24,040 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:35:24,040 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:35:24,040 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:35:24,040 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:35:24,040 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:35:24,040 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:35:24,043 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:35:24,043 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:35:24,043 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:35:24,043 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:35:24,044 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:35:24,044 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:35:24,044 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:35:24,044 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:35:24,044 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:35:24,044 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:35:24,044 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:35:24,044 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:35:24,044 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:35:24,044 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:35:24,044 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:35:24,044 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:35:24,044 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:35:24,044 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:35:24,045 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:35:24,045 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:35:24,045 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:35:24,045 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:35:24,045 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:35:24,045 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:35:24,045 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:35:24,045 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:35:24,045 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:35:24,045 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:35:24,046 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:35:24,048 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:35:24,048 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:35:24,048 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:35:24,048 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:35:24,048 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:35:24,048 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:35:24,048 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:35:24,048 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:35:24,048 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:35:24,049 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:35:24,050 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:35:24,052 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:35:24,052 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:35:24,052 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:35:24,052 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:35:24,052 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:35:24,052 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:35:24,052 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:35:24,052 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:35:24,052 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:35:24,052 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:35:24,052 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:35:24,052 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:35:24,053 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:35:24,053 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:35:24,053 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:35:24,054 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:35:24,054 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:35:24,054 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:35:24,054 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:35:24,054 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:35:24,056 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:35:24,056 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:35:24,056 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:35:24,057 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:35:24,058 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:35:24,058 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:35:24,062 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:35:24,062 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:35:24,062 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:35:24,069 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:35:24,124 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:35:24,137 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:35:24,137 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:35:24,139 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:35:24,141 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:35:24,157 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:35:24,157 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:35:24,157 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:35:24,157 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:35:24,158 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:35:24,159 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:35:24,160 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:35:24,161 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-03 09:35:24,161 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-03 09:35:24,161 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-03 09:35:24,161 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-03 09:35:24,161 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-03 09:35:24,162 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:35:24,163 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-03 09:35:24,164 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:35:24,165 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:35:24,166 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-03 09:35:24,167 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:35:24,168 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:35:24,169 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:35:24,170 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:35:24,171 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:35:24,172 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:35:24,174 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:35:24,207 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:35:24,208 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:35:24,233 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,234 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,235 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,235 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,235 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,235 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,235 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:35:24,235 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:35:24,309 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:35:24,311 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,311 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,311 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:35:24,321 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:35:24,321 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:35:24,327 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:35:24,327 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:35:24,327 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:35:24,333 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:35:24,341 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:35:24,341 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:35:24,343 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:35:24,343 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:35:24,343 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:35:24,343 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:35:24,343 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:35:24,367 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:35:24,367 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:35:24,367 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:35:24,367 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:35:24,367 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:35:24,373 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:35:24,374 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:35:24,379 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:35:24,380 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:35:24,382 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:35:24,382 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:35:24,382 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:35:24,382 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:35:24,384 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:35:24,386 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:35:24,391 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:35:24,391 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:35:24,391 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:35:24,391 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:35:24,391 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:35:24,391 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:35:24,391 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:35:24,391 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:35:24,391 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:35:24,391 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:35:24,392 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:35:24,392 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:35:24,401 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:35:24,402 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:35:24,403 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:35:24,403 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:35:24,403 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-03 09:35:24,403 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:35:24,403 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:35:24,404 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:35:24,404 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:35:24,404 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-03 09:35:24,404 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 0d212a67-eb77-488f-a10a-dd977887c5ea (<unnamed>)
2023-12-03 09:35:24,404 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:35:24,404 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:35:24,418 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:35:24,428 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:35:24,431 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:35:24,431 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@2045706119 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:35:24,433 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:35:24,435 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:35:24,436 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1183745381
2023-12-03 09:35:24,436 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:35:24,436 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:35:24,438 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:35:24,438 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@43cb5f38
2023-12-03 09:35:24,439 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:35:24,469 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:35:24,470 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(647946363972958))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:35:24,473 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(647946363972958)]
 |  +-BasicFetch [org.example.entity.Client(647946363972958).firstName]
 |  \-BasicFetch [org.example.entity.Client(647946363972958).lastName]

2023-12-03 09:35:24,473 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(647946363972958)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:35:24,474 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:35:24,474 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:35:24,474 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(647946363972958) -> EntityResultInitializer(org.example.entity.Client(647946363972958))@1946904104 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:35:24,474 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 1
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#1] : 70528019
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#1
2023-12-03 09:35:24,475 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 2
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#2] : 2106390956
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#2
2023-12-03 09:35:24,475 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 3
2023-12-03 09:35:24,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#3] : 1594600318
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:35:24,475 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#3
2023-12-03 09:35:24,476 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 4
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#4] : 61321954
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#4
2023-12-03 09:35:24,476 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 5
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#5] : 863661360
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#5
2023-12-03 09:35:24,476 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 6
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#6] : 690070378
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#6
2023-12-03 09:35:24,476 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 7
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#7] : 729005419
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#7
2023-12-03 09:35:24,476 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,476 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 8
2023-12-03 09:35:24,476 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#8] : 360528453
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#8
2023-12-03 09:35:24,477 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 9
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#9] : 1963906615
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#9
2023-12-03 09:35:24,477 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 10
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#10] : 1368391951
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#10
2023-12-03 09:35:24,477 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(647946363972958)): 11
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(647946363972958)#11] : 1732146867
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:35:24,477 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(647946363972958)#11
2023-12-03 09:35:24,477 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:35:24,477 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:35:24,478 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:35:24,479 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:35:24,479 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:35:24,479 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@39959931 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:35:24,479 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:35:24,480 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:35:24,480 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 1883269062
2023-12-03 09:35:24,480 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:35:24,480 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:35:24,480 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7f4596d0
2023-12-03 09:35:24,480 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:35:24,480 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:35:24,480 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:35:24,480 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1610803524 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:35:24,480 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:35:24,481 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:35:24,481 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 2024314762
2023-12-03 09:35:24,481 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:35:24,481 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:35:24,481 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@f171912
2023-12-03 09:35:24,481 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:37:03,156 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:37:03,159 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:37:03,161 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:37:03,179 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:37:03,180 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:37:03,188 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:37:03,190 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:37:03,194 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:37:03,195 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:37:03,195 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:37:03,196 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:37:03,196 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:37:03,196 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:37:03,196 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:37:03,196 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:37:03,197 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:37:03,197 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:37:03,198 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:37:03,198 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:37:03,198 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:37:03,202 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:37:03,203 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:37:03,229 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:37:03,230 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:37:03,231 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:37:03,232 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:37:03,233 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:37:03,236 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:37:03,246 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:37:03,246 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:37:03,246 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:37:03,246 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:37:03,246 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:37:03,248 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:37:03,248 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:37:03,256 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:37:03,256 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:37:03,256 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:37:03,264 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:37:03,267 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:37:03,267 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:37:03,270 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:37:03,280 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:37:03,280 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:37:03,280 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:37:03,280 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:37:03,281 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:37:03,281 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:37:03,283 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:37:03,283 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:37:03,284 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:37:03,296 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:37:03,306 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:37:03,308 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:37:03,311 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:37:03,313 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:37:03,319 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:37:03,319 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:37:03,319 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:37:03,320 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:37:03,321 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:37:03,323 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:37:03,324 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:37:03,324 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:37:03,325 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:37:03,326 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:37:03,326 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:37:03,326 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:37:03,326 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:37:03,326 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:37:03,326 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:37:03,328 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:37:03,328 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:37:03,328 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:37:03,329 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:37:03,329 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:37:03,329 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:37:03,329 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:37:03,329 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:37:03,329 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:37:03,329 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:37:03,329 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:37:03,329 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:37:03,329 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:37:03,330 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:37:03,330 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:37:03,330 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:37:03,330 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:37:03,330 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:37:03,330 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:37:03,330 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:37:03,330 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:37:03,330 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:37:03,330 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:37:03,331 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:37:03,331 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:37:03,331 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:37:03,331 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:37:03,331 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:37:03,331 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:37:03,333 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:37:03,333 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:37:03,333 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:37:03,333 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:37:03,334 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:37:03,334 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:37:03,334 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:37:03,334 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:37:03,334 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:37:03,335 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:37:03,335 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:37:03,337 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:37:03,337 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:37:03,337 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:37:03,337 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:37:03,337 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:37:03,337 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:37:03,337 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:37:03,337 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:37:03,337 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:37:03,337 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:37:03,337 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:37:03,338 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:37:03,338 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:37:03,338 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:37:03,338 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:37:03,339 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:37:03,339 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:37:03,339 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:37:03,339 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:37:03,339 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:37:03,341 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:37:03,341 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:37:03,341 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:37:03,342 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:37:03,343 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:37:03,343 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:37:03,347 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:37:03,347 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:37:03,347 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:37:03,355 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:37:03,408 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:37:03,420 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:37:03,420 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:37:03,422 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:37:03,424 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:37:03,438 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:37:03,439 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:37:03,439 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:37:03,439 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:37:03,439 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:37:03,440 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:37:03,441 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:37:03,442 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:37:03,443 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-03 09:37:03,444 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-03 09:37:03,445 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:37:03,446 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-03 09:37:03,447 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:37:03,448 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:37:03,449 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-03 09:37:03,450 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-03 09:37:03,451 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:37:03,451 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:37:03,451 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:37:03,451 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:37:03,451 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:37:03,451 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:37:03,452 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:37:03,453 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:37:03,454 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:37:03,455 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:37:03,457 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:37:03,492 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:37:03,492 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:37:03,517 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,518 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,519 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,519 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:37:03,519 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:37:03,593 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:37:03,595 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,595 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,595 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:37:03,605 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:37:03,605 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:37:03,611 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:37:03,611 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:37:03,611 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:37:03,616 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:37:03,625 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:37:03,626 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:37:03,627 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:37:03,627 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:37:03,627 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:37:03,627 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:37:03,627 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:37:03,652 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:37:03,652 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:37:03,652 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:37:03,652 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:37:03,652 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:37:03,658 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:37:03,659 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:37:03,663 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:37:03,663 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:37:03,665 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:37:03,665 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:37:03,665 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:37:03,665 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:37:03,667 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:37:03,668 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:37:03,672 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:37:03,672 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:37:03,672 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:37:03,672 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:37:03,672 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:37:03,672 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:37:03,672 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:37:03,673 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:37:03,673 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:37:03,673 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:37:03,673 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:37:03,673 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:37:03,673 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:37:03,673 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:37:03,673 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:37:03,673 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:37:03,673 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:37:03,673 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:37:03,682 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:37:03,682 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:37:03,683 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:37:03,684 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:37:03,684 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-03 09:37:03,684 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:37:03,684 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:37:03,685 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:37:03,685 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:37:03,686 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-03 09:37:03,686 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 6b601c6c-7c6f-44fc-b578-695a5a2690a7 (<unnamed>)
2023-12-03 09:37:03,686 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:37:03,686 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:37:03,704 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:37:03,711 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:37:03,715 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:37:03,715 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@2045706119 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:37:03,719 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:37:03,720 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:37:03,721 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1183745381
2023-12-03 09:37:03,722 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:37:03,722 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:37:03,723 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:37:03,723 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@43cb5f38
2023-12-03 09:37:03,725 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:37:03,756 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:37:03,756 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(648045650194791))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:37:03,759 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(648045650194791)]
 |  +-BasicFetch [org.example.entity.Client(648045650194791).firstName]
 |  \-BasicFetch [org.example.entity.Client(648045650194791).lastName]

2023-12-03 09:37:03,759 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(648045650194791)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:37:03,760 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:37:03,760 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:37:03,760 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(648045650194791) -> EntityResultInitializer(org.example.entity.Client(648045650194791))@1946904104 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:37:03,760 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 1
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#1] : 70528019
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#1
2023-12-03 09:37:03,761 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 2
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#2] : 2106390956
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#2
2023-12-03 09:37:03,761 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,761 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 3
2023-12-03 09:37:03,761 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#3] : 1594600318
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#3
2023-12-03 09:37:03,762 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 4
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#4] : 61321954
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#4
2023-12-03 09:37:03,762 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 5
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#5] : 863661360
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#5
2023-12-03 09:37:03,762 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 6
2023-12-03 09:37:03,762 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#6] : 690070378
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:37:03,762 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#6
2023-12-03 09:37:03,763 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 7
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#7] : 729005419
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#7
2023-12-03 09:37:03,763 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 8
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#8] : 360528453
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#8
2023-12-03 09:37:03,763 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 9
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#9] : 1963906615
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#9
2023-12-03 09:37:03,763 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,763 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 10
2023-12-03 09:37:03,763 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#10] : 1368391951
2023-12-03 09:37:03,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:37:03,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:37:03,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#10
2023-12-03 09:37:03,764 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:37:03,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648045650194791)): 11
2023-12-03 09:37:03,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648045650194791)#11] : 1732146867
2023-12-03 09:37:03,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:37:03,764 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:37:03,764 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648045650194791)#11
2023-12-03 09:37:03,764 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:37:03,764 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:37:03,764 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:37:03,766 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:37:03,766 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:37:03,766 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@39959931 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:37:03,766 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:37:03,767 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:37:03,767 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 1883269062
2023-12-03 09:37:03,767 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:37:03,767 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:37:03,767 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7f4596d0
2023-12-03 09:37:03,767 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:37:03,767 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:37:03,767 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:37:03,767 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1610803524 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:37:03,767 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:37:03,767 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:37:03,767 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 2024314762
2023-12-03 09:37:03,768 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:37:03,768 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:37:03,768 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@f171912
2023-12-03 09:37:03,768 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:38:55,275 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:38:55,278 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:38:55,280 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:38:55,298 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:38:55,299 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:38:55,307 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:38:55,308 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:38:55,312 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:38:55,313 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:38:55,313 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:38:55,314 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:38:55,314 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:38:55,314 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:38:55,314 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:38:55,314 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:38:55,315 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:38:55,315 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:38:55,315 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:38:55,315 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:38:55,316 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:38:55,320 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:38:55,321 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:38:55,346 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:38:55,347 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:38:55,348 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:38:55,349 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:38:55,350 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:38:55,352 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:38:55,352 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:38:55,352 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:38:55,352 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:38:55,352 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:38:55,353 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:38:55,353 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:38:55,353 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:38:55,353 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:38:55,353 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:38:55,353 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:38:55,363 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:38:55,363 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:38:55,364 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:38:55,364 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:38:55,364 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:38:55,365 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:38:55,365 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:38:55,375 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:38:55,375 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:38:55,375 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:38:55,382 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:38:55,385 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:38:55,386 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:38:55,389 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:38:55,399 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:38:55,400 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:38:55,400 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:38:55,400 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:38:55,400 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:38:55,401 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:38:55,403 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:38:55,403 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:38:55,405 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:38:55,420 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:38:55,430 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:38:55,432 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:38:55,434 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:38:55,437 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:38:55,442 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:38:55,442 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:38:55,442 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:38:55,443 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:38:55,444 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:38:55,446 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:38:55,447 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:38:55,447 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:38:55,448 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:38:55,449 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:38:55,449 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:38:55,449 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:38:55,449 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:38:55,449 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:38:55,449 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:38:55,451 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:38:55,451 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:38:55,451 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:38:55,452 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:38:55,452 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:38:55,452 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:38:55,452 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:38:55,452 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:38:55,452 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:38:55,452 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:38:55,452 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:38:55,453 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:38:55,453 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:38:55,453 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:38:55,453 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:38:55,453 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:38:55,453 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:38:55,453 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:38:55,453 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:38:55,453 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:38:55,453 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:38:55,453 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:38:55,453 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:38:55,453 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:38:55,453 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:38:55,454 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:38:55,454 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:38:55,454 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:38:55,454 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:38:55,456 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:38:55,456 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:38:55,456 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:38:55,456 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:38:55,456 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:38:55,456 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:38:55,457 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:38:55,457 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:38:55,457 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:38:55,458 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:38:55,458 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:38:55,460 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:38:55,460 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:38:55,460 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:38:55,460 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:38:55,460 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:38:55,460 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:38:55,460 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:38:55,460 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:38:55,460 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:38:55,460 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:38:55,461 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:38:55,461 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:38:55,461 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:38:55,461 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:38:55,461 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:38:55,462 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:38:55,462 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:38:55,462 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:38:55,462 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:38:55,462 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:38:55,464 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:38:55,464 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:38:55,464 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:38:55,465 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:38:55,466 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:38:55,466 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:38:55,469 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:38:55,470 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:38:55,470 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:38:55,476 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:38:55,533 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:38:55,545 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:38:55,546 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:38:55,547 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:38:55,549 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:38:55,564 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:38:55,564 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:38:55,565 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:38:55,565 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:38:55,565 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-03 09:38:55,565 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-03 09:38:55,565 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:38:55,566 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:38:55,567 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:38:55,568 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:38:55,568 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-03 09:38:55,568 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-03 09:38:55,568 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:38:55,569 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-03 09:38:55,570 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-03 09:38:55,570 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-03 09:38:55,570 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-03 09:38:55,570 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-03 09:38:55,570 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:38:55,570 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:38:55,571 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:38:55,572 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:38:55,573 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-03 09:38:55,574 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-03 09:38:55,575 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:38:55,575 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:38:55,576 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:38:55,577 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:38:55,578 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:38:55,579 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:38:55,581 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:38:55,617 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:38:55,618 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:38:55,643 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,644 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,645 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,645 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,645 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,645 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,645 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:38:55,645 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:38:55,721 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:38:55,723 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,723 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,723 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:38:55,733 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:38:55,733 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:38:55,738 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:38:55,739 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:38:55,739 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:38:55,744 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:38:55,752 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:38:55,752 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:38:55,754 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:38:55,754 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:38:55,754 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:38:55,754 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:38:55,754 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:38:55,778 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:38:55,778 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:38:55,778 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:38:55,778 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:38:55,778 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:38:55,784 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:38:55,785 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:38:55,789 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:38:55,790 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:38:55,792 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:38:55,792 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:38:55,792 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:38:55,792 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:38:55,794 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:38:55,795 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:38:55,798 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:38:55,798 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:38:55,798 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:38:55,798 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:38:55,798 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:38:55,798 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:38:55,798 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:38:55,798 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:38:55,798 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:38:55,799 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:38:55,799 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:38:55,799 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:38:55,799 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:38:55,799 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:38:55,799 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:38:55,799 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:38:55,799 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:38:55,799 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:38:55,808 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:38:55,809 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:38:55,810 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:38:55,810 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:38:55,810 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-03 09:38:55,811 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:38:55,811 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:38:55,811 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:38:55,811 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:38:55,812 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-03 09:38:55,812 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 0edebb3b-45e8-4bfc-bc05-1bfb6af900c0 (<unnamed>)
2023-12-03 09:38:55,812 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:38:55,812 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:38:55,826 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:38:55,834 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:38:55,838 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:38:55,838 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@2045706119 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:38:55,840 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:38:55,843 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:38:55,844 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1183745381
2023-12-03 09:38:55,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:38:55,844 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:38:55,845 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:38:55,845 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@43cb5f38
2023-12-03 09:38:55,847 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:38:55,874 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:38:55,875 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(648157770324375))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:38:55,877 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(648157770324375)]
 |  +-BasicFetch [org.example.entity.Client(648157770324375).firstName]
 |  \-BasicFetch [org.example.entity.Client(648157770324375).lastName]

2023-12-03 09:38:55,877 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(648157770324375)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:38:55,878 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:38:55,878 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:38:55,878 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(648157770324375) -> EntityResultInitializer(org.example.entity.Client(648157770324375))@1946904104 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:38:55,878 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 1
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#1] : 70528019
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#1
2023-12-03 09:38:55,879 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 2
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#2] : 2106390956
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#2
2023-12-03 09:38:55,879 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 3
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#3] : 1594600318
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#3
2023-12-03 09:38:55,879 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,879 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 4
2023-12-03 09:38:55,879 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#4] : 61321954
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#4
2023-12-03 09:38:55,880 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 5
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#5] : 863661360
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#5
2023-12-03 09:38:55,880 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 6
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#6] : 690070378
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#6
2023-12-03 09:38:55,880 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 7
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#7] : 729005419
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#7
2023-12-03 09:38:55,880 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 8
2023-12-03 09:38:55,880 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#8] : 360528453
2023-12-03 09:38:55,880 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#8
2023-12-03 09:38:55,881 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 9
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#9] : 1963906615
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#9
2023-12-03 09:38:55,881 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 10
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#10] : 1368391951
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#10
2023-12-03 09:38:55,881 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648157770324375)): 11
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648157770324375)#11] : 1732146867
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:38:55,881 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648157770324375)#11
2023-12-03 09:38:55,881 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:38:55,881 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:38:55,881 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:38:55,883 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:38:55,883 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:38:55,883 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@39959931 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:38:55,883 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:38:55,883 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:38:55,883 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 1883269062
2023-12-03 09:38:55,884 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:38:55,884 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:38:55,884 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7f4596d0
2023-12-03 09:38:55,884 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:38:55,884 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:38:55,884 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:38:55,884 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1610803524 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:38:55,884 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:38:55,884 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:38:55,884 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 2024314762
2023-12-03 09:38:55,884 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:38:55,884 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:38:55,884 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@f171912
2023-12-03 09:38:55,884 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:38:55,889 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:38:55,889 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:38:55,891 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-03 09:38:55,893 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        TICKET
        (CLIENT_ID, CREATED_AT, FROM_PLANET_ID, TO_PLANET_ID, ID) 
    [34mvalues[0m
        (?, ?, ?, ?, [34mdefault[0m)
2023-12-03 09:38:55,896 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - could not execute statement [insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)]
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "Sun Dec 03 09:38:55 EET 2023"; SQL statement:
insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default) [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:772)
	at org.h2.value.TypeInfo.cast(TypeInfo.java:515)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:378)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:845)
	at org.h2.command.dml.Insert.insertRows(Insert.java:187)
	at org.h2.command.dml.Insert.update(Insert.java:151)
	at org.h2.command.CommandContainer.executeUpdateWithGeneratedKeys(CommandContainer.java:272)
	at org.h2.command.CommandContainer.update(CommandContainer.java:191)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:191)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:152)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:280)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:171)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:112)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2860)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:667)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:290)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:271)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:321)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:766)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.TicketCrudService.create(TicketCrudService.java:28)
	at org.example.App.main(App.java:34)
Caused by: java.lang.IllegalArgumentException: Sun Dec 03 09:38:55 EET 2023
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:166)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 37 more
2023-12-03 09:38:55,897 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 22007, SQLState: 22007
2023-12-03 09:38:55,897 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Cannot parse "TIMESTAMP" constant "Sun Dec 03 09:38:55 EET 2023"; SQL statement:
insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default) [22007-200]
2023-12-03 09:38:55,898 +0200 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:310) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:310)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:466)
	at org.hibernate.internal.ExceptionConverterImpl.rollbackIfNecessary(ExceptionConverterImpl.java:264)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:160)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:772)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.TicketCrudService.create(TicketCrudService.java:28)
	at org.example.App.main(App.java:34)
2023-12-03 09:39:40,786 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:39:40,789 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:39:40,791 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:39:40,809 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:39:40,810 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:39:40,817 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:39:40,819 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:39:40,823 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:39:40,824 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:39:40,825 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:39:40,825 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:39:40,825 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:39:40,825 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:39:40,825 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:39:40,825 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:39:40,826 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:39:40,827 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:39:40,827 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:39:40,827 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:39:40,827 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:39:40,831 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:39:40,832 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:39:40,858 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:39:40,859 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:39:40,860 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:39:40,861 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:39:40,862 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:39:40,863 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:39:40,865 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:39:40,866 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:39:40,866 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:39:40,866 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:39:40,866 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:39:40,875 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:39:40,876 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:39:40,876 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:39:40,876 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:39:40,876 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:39:40,877 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:39:40,877 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:39:40,885 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:39:40,885 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:39:40,885 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:39:40,892 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:39:40,895 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:39:40,896 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:39:40,899 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:39:40,906 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:39:40,906 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:39:40,906 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:39:40,907 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:39:40,907 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:39:40,907 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:39:40,909 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:39:40,909 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:39:40,911 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:39:40,923 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:39:40,933 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:39:40,935 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:39:40,937 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:39:40,940 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:39:40,945 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:39:40,945 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:39:40,945 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:39:40,946 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:39:40,947 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:39:40,949 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:39:40,950 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:39:40,950 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:39:40,951 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:39:40,952 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:39:40,952 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:39:40,952 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:39:40,952 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:39:40,952 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:39:40,952 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:39:40,954 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:39:40,954 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:39:40,954 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:39:40,954 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:39:40,955 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:39:40,955 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:39:40,955 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:39:40,955 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:39:40,955 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:39:40,955 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:39:40,955 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:39:40,955 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:39:40,955 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:39:40,955 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:39:40,955 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:39:40,955 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:39:40,955 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:39:40,955 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:39:40,956 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:39:40,956 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:39:40,956 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:39:40,956 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:39:40,956 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:39:40,956 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:39:40,956 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:39:40,956 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:39:40,956 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:39:40,956 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:39:40,956 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:39:40,959 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:39:40,959 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:39:40,959 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:39:40,959 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:39:40,959 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:39:40,959 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:39:40,960 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:39:40,960 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:39:40,960 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:39:40,961 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:39:40,961 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:39:40,963 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:39:40,963 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:39:40,963 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:39:40,963 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:39:40,963 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:39:40,963 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:39:40,963 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:39:40,963 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:39:40,963 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:39:40,963 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:39:40,963 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:39:40,963 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:39:40,963 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:39:40,964 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:39:40,964 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:39:40,965 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:39:40,965 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:39:40,965 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:39:40,965 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:39:40,965 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:39:40,966 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:39:40,966 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:39:40,966 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:39:40,967 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:39:40,968 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:39:40,969 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:39:40,972 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:39:40,972 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:39:40,972 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:39:40,980 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:39:41,036 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:39:41,048 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:39:41,048 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@215a34b4, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:39:41,049 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:39:41,052 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:39:41,065 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:39:41,065 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:39:41,065 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:39:41,065 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6cf31447] under count; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@3a2b2322] under every; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@5e1218b4] under any; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:39:41,066 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under sinh; prior registration was null
2023-12-03 09:39:41,067 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under cosh; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under tanh; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under pi; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under log; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:39:41,068 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@4f82663e] under position; prior registration was null
2023-12-03 09:39:41,069 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@77c7ed8e] under overlay; prior registration was null
2023-12-03 09:39:41,069 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@640dc4c6] under trim; prior registration was null
2023-12-03 09:39:41,069 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@6411d3c8] under cast; prior registration was null
2023-12-03 09:39:41,069 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2116b68b] under collate; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@1f387978] under extract; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@62b969c4] under ifnull; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@610df783] under pad; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@776802b0] under str; prior registration was null
2023-12-03 09:39:41,070 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@5cdf39b2] under format; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@16073fa8] under timestampadd; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@7918c7f8] under timestampdiff; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_date; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under current_time; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under current_timestamp; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_date; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under local_time; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under local_datetime; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under offset_datetime; prior registration was null
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:39:41,071 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under instant; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@2b61a019] under sql; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@11a00961] under count; prior registration was org.hibernate.dialect.function.CountFunction@6cf31447
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@7e2f86e6] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@4d774249] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:39:41,072 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@5c82cd4f
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@35835e65
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@2764c546] under trunc; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under date_trunc; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:39:41,073 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@408b87aa] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@4f82663e
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@79b08632] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@787f32b7] under format; prior registration was org.hibernate.dialect.function.FormatFunction@5cdf39b2
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:39:41,074 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@3f29e26] under listagg; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under mode; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@5cbd159f] under percentile_cont; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@3b05a99b] under percentile_disc; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under rank; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under dense_rank; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67b7c170] under percent_rank; prior registration was null
2023-12-03 09:39:41,075 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under cume_dist; prior registration was null
2023-12-03 09:39:41,076 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:39:41,077 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:39:41,078 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:39:41,079 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:39:41,080 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:39:41,082 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:39:41,117 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:39:41,117 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:39:41,143 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,145 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,146 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,146 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,146 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,146 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,146 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:39:41,146 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:39:41,218 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:39:41,220 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,220 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,220 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:39:41,229 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:39:41,229 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:39:41,235 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:39:41,235 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:39:41,235 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:39:41,241 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:39:41,249 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:39:41,250 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:39:41,251 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:39:41,251 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:39:41,251 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:39:41,251 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:39:41,252 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:39:41,276 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:39:41,276 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:39:41,276 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:39:41,276 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:39:41,276 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:39:41,281 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:39:41,282 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:39:41,286 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@14fded9d] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:39:41,286 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:39:41,288 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:39:41,288 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:39:41,288 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@239f017e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:39:41,288 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:39:41,290 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:39:41,291 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:39:41,296 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:39:41,296 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:39:41,296 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:39:41,296 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:39:41,296 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:39:41,296 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:39:41,296 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:39:41,296 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:39:41,296 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:39:41,297 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:39:41,297 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:39:41,297 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:39:41,307 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:39:41,307 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:39:41,308 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:39:41,308 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:39:41,309 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7e4579c7]
2023-12-03 09:39:41,309 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:39:41,309 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:39:41,309 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:39:41,309 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:39:41,311 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@5649d11a
2023-12-03 09:39:41,311 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: e716f9f8-49e7-49e2-bc50-780288ed0001 (<unnamed>)
2023-12-03 09:39:41,311 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:39:41,311 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:39:41,325 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:39:41,332 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:39:41,338 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:39:41,338 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@2045706119 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:39:41,340 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:39:41,341 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:39:41,342 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1183745381
2023-12-03 09:39:41,342 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:39:41,342 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:39:41,344 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:39:41,344 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@43cb5f38
2023-12-03 09:39:41,346 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:39:41,377 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:39:41,377 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(648203269585875))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:39:41,380 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(648203269585875)]
 |  +-BasicFetch [org.example.entity.Client(648203269585875).firstName]
 |  \-BasicFetch [org.example.entity.Client(648203269585875).lastName]

2023-12-03 09:39:41,381 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(648203269585875)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:39:41,382 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:39:41,382 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:39:41,382 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(648203269585875) -> EntityResultInitializer(org.example.entity.Client(648203269585875))@1946904104 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:39:41,382 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:39:41,383 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:39:41,383 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 1
2023-12-03 09:39:41,383 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#1] : 70528019
2023-12-03 09:39:41,383 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:39:41,383 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:39:41,383 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#1
2023-12-03 09:39:41,383 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,383 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:39:41,383 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 2
2023-12-03 09:39:41,383 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#2] : 2106390956
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#2
2023-12-03 09:39:41,384 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 3
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#3] : 1594600318
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#3
2023-12-03 09:39:41,384 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 4
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#4] : 61321954
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#4
2023-12-03 09:39:41,384 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 5
2023-12-03 09:39:41,384 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#5] : 863661360
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:39:41,384 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#5
2023-12-03 09:39:41,385 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 6
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#6] : 690070378
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#6
2023-12-03 09:39:41,385 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 7
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#7] : 729005419
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#7
2023-12-03 09:39:41,385 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 8
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#8] : 360528453
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#8
2023-12-03 09:39:41,385 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 9
2023-12-03 09:39:41,385 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#9] : 1963906615
2023-12-03 09:39:41,385 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#9
2023-12-03 09:39:41,386 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 10
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#10] : 1368391951
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#10
2023-12-03 09:39:41,386 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648203269585875)): 11
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648203269585875)#11] : 1732146867
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:39:41,386 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648203269585875)#11
2023-12-03 09:39:41,386 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@58fd1214
2023-12-03 09:39:41,386 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:39:41,386 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:39:41,388 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:39:41,388 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:39:41,388 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@39959931 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:39:41,388 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:39:41,388 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:39:41,389 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 1883269062
2023-12-03 09:39:41,389 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:39:41,389 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:39:41,389 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7f4596d0
2023-12-03 09:39:41,389 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:39:41,389 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:39:41,389 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:39:41,389 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1610803524 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:39:41,389 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:39:41,389 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:39:41,389 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 2024314762
2023-12-03 09:39:41,389 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:39:41,389 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:39:41,389 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@f171912
2023-12-03 09:39:41,389 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:39:41,393 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:39:41,394 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:39:41,396 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-03 09:39:41,398 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        TICKET
        (CLIENT_ID, CREATED_AT, FROM_PLANET_ID, TO_PLANET_ID, ID) 
    [34mvalues[0m
        (?, ?, ?, ?, [34mdefault[0m)
2023-12-03 09:39:41,400 +0200 [main] DEBUG (SqlExceptionHelper.java:134) - could not execute statement [insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)]
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "Sun Dec 03 09:39:41 EET 2023"; SQL statement:
insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default) [22007-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:136)
	at org.h2.value.Value.convertToTimestamp(Value.java:1169)
	at org.h2.value.Value.convertTo(Value.java:822)
	at org.h2.value.Value.convertTo(Value.java:772)
	at org.h2.value.TypeInfo.cast(TypeInfo.java:515)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:378)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:845)
	at org.h2.command.dml.Insert.insertRows(Insert.java:187)
	at org.h2.command.dml.Insert.update(Insert.java:151)
	at org.h2.command.CommandContainer.executeUpdateWithGeneratedKeys(CommandContainer.java:272)
	at org.h2.command.CommandContainer.update(CommandContainer.java:191)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:191)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:152)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:280)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:171)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:112)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2860)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:667)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:290)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:271)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:321)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:766)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.TicketCrudService.create(TicketCrudService.java:27)
	at org.example.App.main(App.java:34)
Caused by: java.lang.IllegalArgumentException: Sun Dec 03 09:39:41 EET 2023
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:166)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:316)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:134)
	... 37 more
2023-12-03 09:39:41,401 +0200 [main] WARN  (SqlExceptionHelper.java:145) - SQL Error: 22007, SQLState: 22007
2023-12-03 09:39:41,401 +0200 [main] ERROR (SqlExceptionHelper.java:150) - Cannot parse "TIMESTAMP" constant "Sun Dec 03 09:39:41 EET 2023"; SQL statement:
insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default) [22007-200]
2023-12-03 09:39:41,402 +0200 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:310) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:310)
	at org.hibernate.engine.transaction.internal.TransactionImpl.markRollbackOnly(TransactionImpl.java:203)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:466)
	at org.hibernate.internal.ExceptionConverterImpl.rollbackIfNecessary(ExceptionConverterImpl.java:264)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:160)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:772)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:750)
	at org.example.service.TicketCrudService.create(TicketCrudService.java:27)
	at org.example.App.main(App.java:34)
2023-12-03 09:41:02,391 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:41:02,394 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:41:02,396 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:41:02,413 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:41:02,414 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:41:02,422 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:41:02,424 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:41:02,428 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:41:02,429 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:41:02,429 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:41:02,429 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:41:02,429 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:41:02,429 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:41:02,430 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:41:02,430 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:41:02,430 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:41:02,431 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:41:02,431 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:41:02,431 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:41:02,431 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:41:02,435 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:41:02,435 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:41:02,462 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:41:02,463 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:41:02,464 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:41:02,465 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:41:02,466 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:41:02,469 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:41:02,470 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:41:02,470 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:41:02,470 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:41:02,480 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:41:02,481 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:41:02,481 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:41:02,481 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:41:02,481 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:41:02,482 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:41:02,482 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:41:02,491 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:41:02,491 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:41:02,491 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:41:02,498 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:41:02,501 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:41:02,501 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:41:02,506 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:41:02,511 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:41:02,511 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:41:02,511 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:41:02,512 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:41:02,512 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:41:02,512 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:41:02,514 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:41:02,514 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:41:02,515 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:41:02,528 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:41:02,538 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:41:02,540 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:41:02,542 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:41:02,545 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:41:02,550 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:41:02,551 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:41:02,551 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:41:02,551 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:41:02,553 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:41:02,554 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:41:02,556 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:41:02,556 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:41:02,557 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:41:02,557 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:41:02,557 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:41:02,557 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:41:02,557 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:41:02,557 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:41:02,557 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:41:02,559 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:41:02,560 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:41:02,560 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:41:02,560 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:41:02,560 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:41:02,560 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:41:02,560 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:41:02,560 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:41:02,561 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:41:02,561 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:41:02,561 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:41:02,561 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:41:02,561 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:41:02,561 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:41:02,561 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:41:02,561 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:41:02,561 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:41:02,561 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:41:02,562 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:41:02,562 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:41:02,562 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:41:02,562 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:41:02,562 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:41:02,562 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:41:02,562 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:41:02,562 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:41:02,562 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:41:02,562 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:41:02,563 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:41:02,565 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:41:02,565 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:41:02,565 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:41:02,565 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:41:02,565 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:41:02,565 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:41:02,565 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:41:02,565 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:41:02,565 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:41:02,566 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:41:02,567 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:41:02,568 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:41:02,568 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:41:02,568 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:41:02,568 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:41:02,568 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:41:02,568 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:41:02,569 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:41:02,569 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:41:02,569 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:41:02,569 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:41:02,569 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:41:02,569 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:41:02,569 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:41:02,570 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:41:02,572 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:41:02,572 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:41:02,572 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:41:02,573 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:41:02,574 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:41:02,574 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:41:02,579 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:41:02,579 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:41:02,579 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:41:02,586 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:41:02,639 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:41:02,652 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:41:02,652 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@19569ebd, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:41:02,654 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:41:02,656 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:41:02,670 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:41:02,671 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:41:02,671 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:41:02,671 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:41:02,671 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6f0cb5a1] under count; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@c6e0f32] under every; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@6f3f0fae] under any; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:41:02,672 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under sinh; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under cosh; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@971e903] under tanh; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@35636217] under pi; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1549bba7] under log; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:41:02,673 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:41:02,674 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@1a28aef1] under position; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@2c6ee758] under overlay; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@203c20cf] under trim; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@616b241a] under cast; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@b8e246c] under collate; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@3e1624c7] under extract; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@48535004] under ifnull; prior registration was null
2023-12-03 09:41:02,675 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:41:02,676 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:41:02,676 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@79d743e6] under pad; prior registration was null
2023-12-03 09:41:02,676 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@592238c5] under str; prior registration was null
2023-12-03 09:41:02,676 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@33b082c5] under format; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@3bead518] under timestampadd; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@345cf395] under timestampdiff; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under current_date; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under current_time; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under current_timestamp; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under local_date; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under local_time; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@30814f43] under local_datetime; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1fde4f40] under offset_datetime; prior registration was null
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:41:02,677 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@49cf9028] under instant; prior registration was null
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@4992613f] under sql; prior registration was null
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6fd5717c] under count; prior registration was org.hibernate.dialect.function.CountFunction@6f0cb5a1
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@53ac845a] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@35636217
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5136207f] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:41:02,678 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:41:02,679 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:41:02,680 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@7a231dfd
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@30814f43
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@79b08632] under trunc; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@787f32b7] under date_trunc; prior registration was null
2023-12-03 09:41:02,681 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6aef4eb8] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@1a28aef1
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@76c52298] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@bb9ab64] under format; prior registration was org.hibernate.dialect.function.FormatFunction@33b082c5
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:41:02,682 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:41:02,683 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:41:02,683 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:41:02,683 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:41:02,683 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:41:02,683 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:41:02,683 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@314c8b4a] under listagg; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@2c43eb8] under mode; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@7d0cc890] under percentile_cont; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@49293b43] under percentile_disc; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under rank; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@889d9e8] under dense_rank; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5246a3b3] under percent_rank; prior registration was null
2023-12-03 09:41:02,684 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@ba354ca] under cume_dist; prior registration was null
2023-12-03 09:41:02,685 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:41:02,685 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:41:02,685 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:41:02,685 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:41:02,685 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:41:02,685 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:41:02,686 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:41:02,687 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:41:02,688 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:41:02,689 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:41:02,691 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:41:02,723 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:41:02,724 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:41:02,747 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,748 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,749 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,749 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,749 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,749 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,749 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:41:02,750 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:41:02,822 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:41:02,825 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,825 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,825 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:41:02,834 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:41:02,834 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:41:02,840 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:41:02,840 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:41:02,840 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:41:02,845 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:41:02,854 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:41:02,854 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:41:02,855 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:41:02,855 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:41:02,855 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:41:02,856 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:41:02,856 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:41:02,879 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:41:02,879 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:41:02,879 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:41:02,879 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:41:02,879 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:41:02,884 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:41:02,885 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:41:02,889 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@34c70b5e] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:41:02,890 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:41:02,891 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2acdcce8] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:41:02,891 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:41:02,891 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@7102ac3e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:41:02,891 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:41:02,893 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:41:02,894 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:41:02,898 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:41:02,898 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:41:02,898 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:41:02,898 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:41:02,898 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:41:02,898 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:41:02,898 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:41:02,898 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:41:02,898 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:41:02,899 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:41:02,899 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:41:02,899 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:41:02,899 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:41:02,899 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:41:02,899 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:41:02,899 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:41:02,899 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:41:02,899 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:41:02,911 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:41:02,912 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:41:02,913 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:41:02,913 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:41:02,913 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@59b32539]
2023-12-03 09:41:02,914 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:41:02,914 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:41:02,914 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:41:02,914 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:41:02,915 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@2582b0ef
2023-12-03 09:41:02,915 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: c31edcc4-69d2-4c15-8bfa-6462296add9f (<unnamed>)
2023-12-03 09:41:02,915 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:41:02,915 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:41:02,931 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:41:02,937 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:41:02,941 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:41:02,941 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@326692514 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:41:02,943 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:41:02,944 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:41:02,945 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1193577032
2023-12-03 09:41:02,945 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:41:02,946 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:41:02,947 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:41:02,947 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@1450131a
2023-12-03 09:41:02,948 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:02,978 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:41:02,978 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(648284871919250))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:41:02,981 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(648284871919250)]
 |  +-BasicFetch [org.example.entity.Client(648284871919250).firstName]
 |  \-BasicFetch [org.example.entity.Client(648284871919250).lastName]

2023-12-03 09:41:02,981 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(648284871919250)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:41:02,982 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:41:02,982 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:41:02,982 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(648284871919250) -> EntityResultInitializer(org.example.entity.Client(648284871919250))@731979931 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:41:02,982 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 1
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#1] : 2106390956
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#1
2023-12-03 09:41:02,983 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 2
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#2] : 690070378
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#2
2023-12-03 09:41:02,983 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 3
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#3] : 729005419
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#3
2023-12-03 09:41:02,983 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 4
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#4] : 360528453
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:41:02,983 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#4
2023-12-03 09:41:02,984 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 5
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#5] : 1963906615
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#5
2023-12-03 09:41:02,984 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 6
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#6] : 1368391951
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#6
2023-12-03 09:41:02,984 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 7
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#7] : 1732146867
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#7
2023-12-03 09:41:02,984 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 8
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#8] : 468567811
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#8
2023-12-03 09:41:02,984 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 9
2023-12-03 09:41:02,984 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#9] : 416355623
2023-12-03 09:41:02,984 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#9
2023-12-03 09:41:02,985 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 10
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#10] : 1234757451
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#10
2023-12-03 09:41:02,985 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648284871919250)): 11
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648284871919250)#11] : 1569164069
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:41:02,985 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648284871919250)#11
2023-12-03 09:41:02,985 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:41:02,985 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:02,985 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:02,987 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:41:02,987 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:41:02,987 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@2135267024 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:41:02,987 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:41:02,988 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:41:02,988 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 721975085
2023-12-03 09:41:02,988 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:41:02,988 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:41:02,988 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@78a8978a
2023-12-03 09:41:02,988 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:02,988 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:41:02,988 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:41:02,988 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@253171986 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:41:02,988 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:41:02,988 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:41:02,988 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 700249373
2023-12-03 09:41:02,989 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:41:02,989 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:41:02,989 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@1e54a6b1
2023-12-03 09:41:02,989 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:02,989 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:41:02,989 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:41:02,991 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-03 09:41:02,994 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        TICKET
        (CLIENT_ID, CREATED_AT, FROM_PLANET_ID, TO_PLANET_ID, ID) 
    [34mvalues[0m
        (?, ?, ?, ?, [34mdefault[0m)
2023-12-03 09:41:02,996 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Ticket) : 3
2023-12-03 09:41:02,996 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-03 09:41:02,997 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-03 09:41:02,998 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:41:02,998 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:41:02,998 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:41:03,000 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-03 09:41:03,000 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:41:03,000 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:41:03,004 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Ticket{createdAt=Sun Dec 03 09:41:02 EET 2023, client=org.example.entity.Client#1, id=3, fromPlanet=org.example.entity.Planet#1, toPlanet=org.example.entity.Planet#2}
2023-12-03 09:41:03,005 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:03,005 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:41:03,005 +0200 [main] INFO  (TicketCrudService.java:29) - Ticket created: 3
2023-12-03 09:43:21,730 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:43:21,733 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:43:21,735 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:43:21,753 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:43:21,754 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:43:21,762 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:43:21,763 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:43:21,767 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:43:21,768 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:43:21,768 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:43:21,769 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:43:21,769 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:43:21,769 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:43:21,769 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:43:21,769 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:43:21,769 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:43:21,770 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:43:21,770 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:43:21,770 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:43:21,771 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:43:21,774 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:43:21,775 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:43:21,799 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:43:21,800 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:43:21,801 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:43:21,802 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:43:21,803 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:43:21,804 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:43:21,806 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@3899782c
2023-12-03 09:43:21,806 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3899782c
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@1c33c17b
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:43:21,807 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:43:21,817 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:43:21,817 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:43:21,817 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:43:21,817 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:43:21,817 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:43:21,818 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:43:21,818 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:43:21,829 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:43:21,829 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:43:21,829 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:43:21,836 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:43:21,839 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:43:21,839 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:43:21,842 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:43:21,850 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:43:21,850 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:43:21,850 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:43:21,851 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:43:21,851 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:43:21,851 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:43:21,853 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:43:21,853 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:43:21,855 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13cf7d52] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3a3e4aff]
2023-12-03 09:43:21,870 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:43:21,880 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:43:21,882 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:43:21,884 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:43:21,887 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:43:21,893 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:43:21,894 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:43:21,894 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:43:21,895 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:43:21,896 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:43:21,898 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:43:21,899 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:43:21,899 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:43:21,900 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:43:21,900 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:43:21,900 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:43:21,900 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:43:21,900 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:43:21,901 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:43:21,901 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:43:21,903 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:43:21,903 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:43:21,903 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:43:21,903 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:43:21,904 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:43:21,904 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:43:21,904 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:43:21,904 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:43:21,904 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:43:21,904 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:43:21,904 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:43:21,904 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:43:21,904 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:43:21,904 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:43:21,904 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:43:21,904 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:43:21,904 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:43:21,904 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:43:21,904 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:43:21,905 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:43:21,905 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:43:21,905 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:43:21,905 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:43:21,905 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:43:21,905 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:43:21,905 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:43:21,905 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:43:21,905 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:43:21,905 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:43:21,907 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:43:21,907 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:43:21,908 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:43:21,908 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:43:21,908 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:43:21,908 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:43:21,908 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:43:21,908 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:43:21,908 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:43:21,909 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:43:21,910 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:43:21,911 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:43:21,911 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:43:21,911 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:43:21,911 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:43:21,911 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:43:21,911 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:43:21,912 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:43:21,912 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:43:21,912 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:43:21,912 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:43:21,912 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:43:21,912 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:43:21,912 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:43:21,913 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:43:21,915 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:43:21,915 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:43:21,915 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:43:21,916 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:43:21,917 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:43:21,917 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:43:21,922 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:43:21,922 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:43:21,922 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:43:21,930 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:43:21,988 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:43:22,000 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:43:22,000 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@30506c0d, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:43:22,002 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:43:22,004 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:43:22,019 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:43:22,019 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:43:22,019 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:43:22,019 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@2c708440] under count; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@655523dd] under every; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@6f7e336b] under any; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:43:22,020 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50f40653] under sinh; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50a3d0f6] under cosh; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under tanh; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under pi; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under log; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:43:22,021 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:43:22,022 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@c6a6c1d] under position; prior registration was null
2023-12-03 09:43:22,023 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@10667848] under overlay; prior registration was null
2023-12-03 09:43:22,023 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@66bacdbc] under trim; prior registration was null
2023-12-03 09:43:22,023 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@44de94c3] under cast; prior registration was null
2023-12-03 09:43:22,023 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@256aa5f2] under collate; prior registration was null
2023-12-03 09:43:22,024 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@616b241a] under extract; prior registration was null
2023-12-03 09:43:22,024 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:43:22,024 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:43:22,024 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@4441d567] under ifnull; prior registration was null
2023-12-03 09:43:22,024 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:43:22,024 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:43:22,025 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@47ec7422] under pad; prior registration was null
2023-12-03 09:43:22,026 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@2b56f5f8] under str; prior registration was null
2023-12-03 09:43:22,026 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@6ee8dcd3] under format; prior registration was null
2023-12-03 09:43:22,026 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@3cd59ef5] under timestampadd; prior registration was null
2023-12-03 09:43:22,026 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@46d9aec8] under timestampdiff; prior registration was null
2023-12-03 09:43:22,026 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1c504e66] under current_date; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@345cf395] under current_time; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_timestamp; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under local_date; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under local_time; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_datetime; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under offset_datetime; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under instant; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@1fde4f40] under sql; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@49cf9028] under count; prior registration was org.hibernate.dialect.function.CountFunction@2c708440
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@4992613f] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:43:22,027 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6fd5717c] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@2257fadf
2023-12-03 09:43:22,028 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@7144655b
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@73ad4ecc] under trunc; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@69da0b12] under date_trunc; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2764c546] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@c6a6c1d
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@408b87aa] under format; prior registration was org.hibernate.dialect.function.FormatFunction@6ee8dcd3
2023-12-03 09:43:22,029 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@1ad8df52] under listagg; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@26d820eb] under mode; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@507d20bb] under percentile_cont; prior registration was null
2023-12-03 09:43:22,030 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under percentile_disc; prior registration was null
2023-12-03 09:43:22,031 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7d0cc890] under rank; prior registration was null
2023-12-03 09:43:22,031 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@49293b43] under dense_rank; prior registration was null
2023-12-03 09:43:22,031 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under percent_rank; prior registration was null
2023-12-03 09:43:22,031 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under cume_dist; prior registration was null
2023-12-03 09:43:22,032 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:43:22,032 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:43:22,032 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:43:22,032 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:43:22,032 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:43:22,032 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:43:22,033 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:43:22,034 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:43:22,035 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:43:22,036 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:43:22,037 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:43:22,071 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:43:22,071 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:43:22,095 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,096 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,097 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,097 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,097 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,097 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,097 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:43:22,097 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:43:22,170 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:43:22,171 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,171 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,171 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:43:22,180 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:43:22,180 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:43:22,185 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:43:22,186 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:43:22,186 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:43:22,191 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:43:22,200 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:43:22,200 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:43:22,201 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:43:22,201 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:43:22,201 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:43:22,202 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:43:22,202 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:43:22,224 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:43:22,224 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:43:22,224 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:43:22,224 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:43:22,224 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:43:22,230 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:43:22,231 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:43:22,234 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@5d7399f9] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:43:22,235 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:43:22,236 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@45b15381] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:43:22,237 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:43:22,237 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:43:22,237 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:43:22,238 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:43:22,240 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:43:22,243 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:43:22,243 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:43:22,243 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:43:22,243 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:43:22,243 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:43:22,243 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:43:22,243 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:43:22,243 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:43:22,243 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:43:22,244 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:43:22,244 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:43:22,244 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:43:22,244 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:43:22,244 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:43:22,244 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:43:22,244 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:43:22,244 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:43:22,244 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:43:22,253 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:43:22,254 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:43:22,255 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:43:22,255 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:43:22,255 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13cf7d52] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@5a917723]
2023-12-03 09:43:22,256 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:43:22,256 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:43:22,256 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:43:22,256 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:43:22,257 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@759de304
2023-12-03 09:43:22,257 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 58e2866f-5701-4157-8dda-720f97a285f5 (<unnamed>)
2023-12-03 09:43:22,257 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:43:22,257 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:43:22,272 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:43:22,279 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:43:22,286 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:43:22,286 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Ticket.client -> EntityJoinedFetchInitializer(org.example.entity.Ticket.client)@104136534 (ToOneAttributeMapping(NavigableRole[org.example.entity.Ticket.client])@805184575)
2023-12-03 09:43:22,286 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Ticket.fromPlanet -> EntityJoinedFetchInitializer(org.example.entity.Ticket.fromPlanet)@1487814699 (ToOneAttributeMapping(NavigableRole[org.example.entity.Ticket.fromPlanet])@1083777179)
2023-12-03 09:43:22,286 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Ticket.toPlanet -> EntityJoinedFetchInitializer(org.example.entity.Ticket.toPlanet)@1135348328 (ToOneAttributeMapping(NavigableRole[org.example.entity.Ticket.toPlanet])@497877502)
2023-12-03 09:43:22,286 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Ticket -> EntityResultInitializer(org.example.entity.Ticket)@925410680 (SingleTableEntityPersister(org.example.entity.Ticket))
2023-12-03 09:43:22,288 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        t1_0.ID,
        t1_0.CLIENT_ID,
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        t1_0.CREATED_AT,
        t1_0.FROM_PLANET_ID,
        fp1_0.ID,
        fp1_0.NAME,
        t1_0.TO_PLANET_ID,
        tp1_0.ID,
        tp1_0.NAME 
    [34mfrom[0m
        TICKET t1_0 
    [34mjoin[0m
        CLIENT c1_0 
            [34mon[0m c1_0.ID=t1_0.CLIENT_ID 
    [34mjoin[0m
        PLANET fp1_0 
            [34mon[0m fp1_0.ID=t1_0.FROM_PLANET_ID 
    [34mjoin[0m
        PLANET tp1_0 
            [34mon[0m tp1_0.ID=t1_0.TO_PLANET_ID 
    [34mwhere[0m
        t1_0.ID=?
2023-12-03 09:43:22,291 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [1]
2023-12-03 09:43:22,291 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityJoinedFetchInitializer) Hydrated EntityKey (org.example.entity.Ticket.client): 1
2023-12-03 09:43:22,291 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [1]
2023-12-03 09:43:22,291 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [7] - [1]
2023-12-03 09:43:22,291 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityJoinedFetchInitializer) Hydrated EntityKey (org.example.entity.Ticket.fromPlanet): 1
2023-12-03 09:43:22,291 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [6] - [1]
2023-12-03 09:43:22,291 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [10] - [2]
2023-12-03 09:43:22,291 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityJoinedFetchInitializer) Hydrated EntityKey (org.example.entity.Ticket.toPlanet): 2
2023-12-03 09:43:22,291 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [9] - [2]
2023-12-03 09:43:22,291 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Ticket): 3
2023-12-03 09:43:22,292 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityJoinedFetchInitializer) Created new entity instance [org.example.entity.Ticket.client#1] : 1807397140
2023-12-03 09:43:22,293 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityJoinedFetchInitializer) Created new entity instance [org.example.entity.Ticket.fromPlanet#1] : 1562057770
2023-12-03 09:43:22,293 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityJoinedFetchInitializer) Created new entity instance [org.example.entity.Ticket.toPlanet#2] : 1670849676
2023-12-03 09:43:22,293 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Ticket#3] : 636886060
2023-12-03 09:43:22,293 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [3] - [Ivan]
2023-12-03 09:43:22,293 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [4] - [Petrov]
2023-12-03 09:43:22,295 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityJoinedFetchInitializer) Done materializing entityInstance : org.example.entity.Ticket.client#1
2023-12-03 09:43:22,295 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [8] - [Mars]
2023-12-03 09:43:22,295 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityJoinedFetchInitializer) Done materializing entityInstance : org.example.entity.Ticket.fromPlanet#1
2023-12-03 09:43:22,295 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [11] - [Venus]
2023-12-03 09:43:22,295 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityJoinedFetchInitializer) Done materializing entityInstance : org.example.entity.Ticket.toPlanet#2
2023-12-03 09:43:22,295 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [5] - [2023-12-03 09:41:02.989]
2023-12-03 09:43:22,295 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Ticket#3
2023-12-03 09:43:22,295 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@183ade54
2023-12-03 09:43:22,297 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:43:22,297 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:43:22,297 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:43:22,303 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:43:22,303 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:43:22,303 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:43:22,304 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2023-12-03 09:43:22,304 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:43:22,305 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:43:22,305 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Ticket{createdAt=2023-12-03 09:41:02.989, client=org.example.entity.Client#1, id=3, fromPlanet=org.example.entity.Planet#1, toPlanet=org.example.entity.Planet#2}
2023-12-03 09:43:22,308 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mdelete[0m 
    [34mfrom[0m
        TICKET 
    [34mwhere[0m
        ID=?
2023-12-03 09:43:22,310 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:43:22,310 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:43:22,310 +0200 [main] INFO  (TicketCrudService.java:79) - Ticket deleted: 3
2023-12-03 09:44:03,916 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:44:03,919 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:44:03,921 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:44:03,939 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:44:03,940 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:44:03,947 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:44:03,949 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:44:03,953 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:44:03,954 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:44:03,956 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:44:03,956 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:44:03,956 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:44:03,956 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:44:03,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:44:03,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:44:03,957 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:44:03,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:44:03,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:44:03,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:44:03,958 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:44:03,962 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:44:03,963 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:44:03,988 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:44:03,989 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:44:03,990 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:44:03,991 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:44:03,992 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@558bdf1f
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@8576fa0
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7582ff54
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@67545b57
2023-12-03 09:44:03,993 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6c2c1385
2023-12-03 09:44:03,995 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:44:03,995 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@30e868be
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@39de3d36
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@77128536
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@58326051
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32c4e8b2
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64bce832
2023-12-03 09:44:03,996 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@764faa6
2023-12-03 09:44:04,006 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:44:04,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:44:04,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:44:04,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:44:04,007 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:44:04,008 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:44:04,008 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:44:04,017 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:44:04,017 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:44:04,017 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:44:04,024 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:44:04,027 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:44:04,027 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:44:04,031 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:44:04,039 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:44:04,039 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:44:04,039 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:44:04,040 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:44:04,040 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:44:04,040 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:44:04,042 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:44:04,042 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:44:04,044 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@78fbff54]
2023-12-03 09:44:04,057 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:44:04,067 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:44:04,069 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:44:04,071 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:44:04,073 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:44:04,078 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:44:04,079 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:44:04,079 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:44:04,080 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:44:04,081 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:44:04,083 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:44:04,084 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:44:04,084 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:44:04,085 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:44:04,085 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:44:04,085 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:44:04,085 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:44:04,085 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:44:04,085 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:44:04,086 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:44:04,088 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:44:04,088 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:44:04,088 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:44:04,088 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:44:04,088 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:44:04,088 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:44:04,089 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:44:04,089 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:44:04,089 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:44:04,089 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:44:04,089 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:44:04,089 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:44:04,089 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:44:04,089 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:44:04,089 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:44:04,089 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:44:04,089 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:44:04,089 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:44:04,089 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:44:04,089 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:44:04,089 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:44:04,089 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:44:04,090 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:44:04,090 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:44:04,090 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:44:04,090 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:44:04,090 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:44:04,090 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:44:04,090 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:44:04,092 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:44:04,092 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:44:04,092 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:44:04,092 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:44:04,092 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:44:04,093 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:44:04,093 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:44:04,093 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:44:04,093 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:44:04,094 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:44:04,094 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:44:04,095 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:44:04,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:44:04,096 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:44:04,096 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:44:04,096 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:44:04,096 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:44:04,096 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:44:04,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:44:04,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:44:04,096 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:44:04,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:44:04,096 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:44:04,097 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:44:04,097 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:44:04,097 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:44:04,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:44:04,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:44:04,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:44:04,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:44:04,098 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:44:04,100 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:44:04,100 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:44:04,100 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:44:04,101 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:44:04,102 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:44:04,102 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:44:04,106 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:44:04,106 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:44:04,106 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:44:04,114 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:44:04,169 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:44:04,182 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:44:04,182 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@19569ebd, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:44:04,183 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:44:04,186 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:44:04,200 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:44:04,200 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:44:04,200 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:44:04,200 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:44:04,200 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6f0cb5a1] under count; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@c6e0f32] under every; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@6f3f0fae] under any; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:44:04,201 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@24e08d59] under sinh; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@77cb9cd1] under cosh; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@971e903] under tanh; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@35636217] under pi; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1549bba7] under log; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:44:04,202 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:44:04,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:44:04,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:44:04,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@1a28aef1] under position; prior registration was null
2023-12-03 09:44:04,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@2c6ee758] under overlay; prior registration was null
2023-12-03 09:44:04,203 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@203c20cf] under trim; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@616b241a] under cast; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@b8e246c] under collate; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@3e1624c7] under extract; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@48535004] under ifnull; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@79d743e6] under pad; prior registration was null
2023-12-03 09:44:04,204 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@592238c5] under str; prior registration was null
2023-12-03 09:44:04,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@33b082c5] under format; prior registration was null
2023-12-03 09:44:04,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@3bead518] under timestampadd; prior registration was null
2023-12-03 09:44:04,205 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@345cf395] under timestampdiff; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under current_date; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under current_time; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under current_timestamp; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@289fdb08] under local_date; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7a231dfd] under local_time; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@30814f43] under local_datetime; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1fde4f40] under offset_datetime; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@49cf9028] under instant; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@4992613f] under sql; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@6fd5717c] under count; prior registration was org.hibernate.dialect.function.CountFunction@6f0cb5a1
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@53ac845a] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@35636217
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:44:04,206 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@5136207f] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@7a231dfd
2023-12-03 09:44:04,207 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@30814f43
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@79b08632] under trunc; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@787f32b7] under date_trunc; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6aef4eb8] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@1a28aef1
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@76c52298] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@bb9ab64] under format; prior registration was org.hibernate.dialect.function.FormatFunction@33b082c5
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:44:04,208 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@314c8b4a] under listagg; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@2c43eb8] under mode; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@7d0cc890] under percentile_cont; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@49293b43] under percentile_disc; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@67440de6] under rank; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@889d9e8] under dense_rank; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5246a3b3] under percent_rank; prior registration was null
2023-12-03 09:44:04,209 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@ba354ca] under cume_dist; prior registration was null
2023-12-03 09:44:04,210 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:44:04,211 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:44:04,212 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:44:04,213 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:44:04,214 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:44:04,216 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:44:04,251 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:44:04,252 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:44:04,276 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,278 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,279 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,279 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,279 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,279 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,279 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:44:04,279 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:44:04,348 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:44:04,350 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,350 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,350 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:44:04,359 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:44:04,359 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:44:04,365 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:44:04,365 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:44:04,365 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:44:04,371 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:44:04,379 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:44:04,379 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:44:04,381 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:44:04,381 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:44:04,381 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:44:04,382 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:44:04,382 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:44:04,405 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:44:04,405 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:44:04,405 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:44:04,405 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:44:04,405 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:44:04,411 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:44:04,412 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:44:04,416 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@34c70b5e] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:44:04,417 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:44:04,419 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2acdcce8] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:44:04,419 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:44:04,419 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@7102ac3e] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:44:04,419 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:44:04,421 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:44:04,422 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:44:04,425 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:44:04,425 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:44:04,425 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:44:04,425 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:44:04,425 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:44:04,425 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:44:04,426 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:44:04,426 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:44:04,426 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:44:04,426 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:44:04,426 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:44:04,426 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:44:04,426 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:44:04,426 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:44:04,426 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:44:04,426 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:44:04,426 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:44:04,426 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:44:04,436 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:44:04,436 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:44:04,437 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:44:04,437 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:44:04,437 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@77a98a6a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@59b32539]
2023-12-03 09:44:04,438 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:44:04,438 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:44:04,438 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:44:04,438 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:44:04,439 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@2582b0ef
2023-12-03 09:44:04,439 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: c5c002ff-712e-43e8-9d45-37ce899f7ca4 (<unnamed>)
2023-12-03 09:44:04,439 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:44:04,439 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:44:04,455 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:44:04,462 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:44:04,465 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:44:04,466 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@326692514 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:44:04,471 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:44:04,472 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:44:04,473 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1193577032
2023-12-03 09:44:04,474 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:44:04,474 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:44:04,475 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:44:04,475 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@1450131a
2023-12-03 09:44:04,477 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,507 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:44:04,507 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(648466399754333))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:44:04,510 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(648466399754333)]
 |  +-BasicFetch [org.example.entity.Client(648466399754333).firstName]
 |  \-BasicFetch [org.example.entity.Client(648466399754333).lastName]

2023-12-03 09:44:04,511 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(648466399754333)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:44:04,512 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:44:04,512 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:44:04,512 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(648466399754333) -> EntityResultInitializer(org.example.entity.Client(648466399754333))@731979931 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:44:04,512 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:44:04,512 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:44:04,512 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 1
2023-12-03 09:44:04,512 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#1] : 2106390956
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#1
2023-12-03 09:44:04,513 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 2
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#2] : 690070378
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#2
2023-12-03 09:44:04,513 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 3
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#3] : 729005419
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#3
2023-12-03 09:44:04,513 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,513 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 4
2023-12-03 09:44:04,513 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#4] : 360528453
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#4
2023-12-03 09:44:04,514 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 5
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#5] : 1963906615
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#5
2023-12-03 09:44:04,514 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 6
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#6] : 1368391951
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#6
2023-12-03 09:44:04,514 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 7
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#7] : 1732146867
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#7
2023-12-03 09:44:04,514 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 8
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#8] : 468567811
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:44:04,514 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#8
2023-12-03 09:44:04,515 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 9
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#9] : 416355623
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#9
2023-12-03 09:44:04,515 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 10
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#10] : 1234757451
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#10
2023-12-03 09:44:04,515 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648466399754333)): 11
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648466399754333)#11] : 1569164069
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:44:04,515 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648466399754333)#11
2023-12-03 09:44:04,515 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@337a6d30
2023-12-03 09:44:04,515 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,515 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,517 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:44:04,517 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:44:04,517 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@2135267024 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:44:04,517 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:44:04,517 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:44:04,518 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 721975085
2023-12-03 09:44:04,518 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:44:04,518 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:44:04,518 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@78a8978a
2023-12-03 09:44:04,518 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,518 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:44:04,518 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:44:04,518 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@253171986 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:44:04,518 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:44:04,518 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:44:04,518 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 700249373
2023-12-03 09:44:04,518 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:44:04,518 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:44:04,518 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@1e54a6b1
2023-12-03 09:44:04,518 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,519 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:44:04,519 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:44:04,521 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-03 09:44:04,524 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        TICKET
        (CLIENT_ID, CREATED_AT, FROM_PLANET_ID, TO_PLANET_ID, ID) 
    [34mvalues[0m
        (?, ?, ?, ?, [34mdefault[0m)
2023-12-03 09:44:04,526 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Ticket) : 4
2023-12-03 09:44:04,526 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-03 09:44:04,527 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-03 09:44:04,527 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:44:04,527 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:44:04,528 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:44:04,529 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-03 09:44:04,529 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:44:04,529 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:44:04,533 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Ticket{createdAt=Sun Dec 03 09:44:04 EET 2023, client=org.example.entity.Client#1, id=4, fromPlanet=org.example.entity.Planet#1, toPlanet=org.example.entity.Planet#2}
2023-12-03 09:44:04,534 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,534 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:44:04,534 +0200 [main] INFO  (TicketCrudService.java:29) - Ticket created: 4
2023-12-03 09:45:52,619 +0200 [main] DEBUG (CoreLogging.java:29) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2023-12-03 09:45:52,622 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.boot.beanvalidation.BeanValidationIntegrator].
2023-12-03 09:45:52,624 +0200 [main] DEBUG (IntegratorServiceImpl.java:51) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2023-12-03 09:45:52,641 +0200 [main] INFO  (Version.java:44) - HHH000412: Hibernate ORM core version 6.3.1.Final
2023-12-03 09:45:52,642 +0200 [main] INFO  (Environment.java:148) - HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.format_sql=true, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.connection.password=****, hibernate.highlight_sql=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, hibernate.connection.pool_size=10, hibernate.connection.autocommit=true, hibernate.show_sql=true}
2023-12-03 09:45:52,649 +0200 [main] DEBUG (Configuration.java:956) - Building session factory using internal StandardServiceRegistryBuilder
2023-12-03 09:45:52,651 +0200 [main] DEBUG (Configuration.java:858) - Building session factory using provided StandardServiceRegistry
2023-12-03 09:45:52,654 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:94) - Ignoring CDI for resolving IdentifierGenerator instances as extended or delayed CDI support was enabled
2023-12-03 09:45:52,656 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2023-12-03 09:45:52,656 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2023-12-03 09:45:52,656 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:45:52,656 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2023-12-03 09:45:52,656 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2023-12-03 09:45:52,657 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2023-12-03 09:45:52,657 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2023-12-03 09:45:52,657 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:45:52,658 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2023-12-03 09:45:52,658 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2023-12-03 09:45:52,658 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2023-12-03 09:45:52,659 +0200 [main] DEBUG (StandardIdentifierGeneratorFactory.java:170) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2023-12-03 09:45:52,663 +0200 [main] DEBUG (RegionFactoryInitiator.java:122) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2023-12-03 09:45:52,663 +0200 [main] INFO  (RegionFactoryInitiator.java:50) - HHH000026: Second-level cache disabled
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1984b1f
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3bd323e9
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@39ac0c0a
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@c7ba306
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-03 09:45:52,690 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@4ff8d125
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6d167f58
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3403e2ac
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration image -> org.hibernate.type.BasicTypeReference@65b104b9
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@6c4980d3
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@327bcebd
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@19c65cdc
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration short -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@74bf1791
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration integer -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration int -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@54504ecd
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration long -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@38b27cdc
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:45:52,691 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration float -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1339e7aa
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration double -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1fb669c3
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@49c66ade
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6239aba6
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3e6104fc
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@12359a82
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration string -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@68df9280
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@479460a6
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7164ca4c
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@4f3bbf68
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration text -> org.hibernate.type.BasicTypeReference@5be46f9d
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3f91b517
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration clob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@68702e03
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:45:52,692 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7a220c9a
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2421cc4
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@30c93896
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@59a008ba
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@338c99c8
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@21ba0741
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@58ce9668
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@172b013
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@56673b2c
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2796aeae
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@b4711e2
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1fa1cab1
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@70f02c32
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@62010f5c
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@51fadaff
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@401f7633
2023-12-03 09:45:52,693 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@31ff43be
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5b6ec132
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5c44c582
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@67d18ed7
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2c78d320
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration date -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@132e0cc
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration time -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7b205dbd
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@106cc338
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7a67e3c6
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6cc558c6
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@15713d56
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration instant -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@63f259c3
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@26ceffa8
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@600b90df
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7c8c9a05
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration class -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:45:52,694 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@d41f816
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration currency -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5c2375a9
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration locale -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@60129b9a
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@78d6692f
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7a55af6b
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@3d9c13b5
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration url -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@492691d7
2023-12-03 09:45:52,695 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@27216cd
2023-12-03 09:45:52,697 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration object -> org.hibernate.type.JavaObjectType@3899782c
2023-12-03 09:45:52,697 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3899782c
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration null -> org.hibernate.type.NullType@1c33c17b
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@5bf0fe62
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1e097d59
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@673be18f
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@6581dc0a
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@39de3d36
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6ce86ce1
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@54e7df6a
2023-12-03 09:45:52,698 +0200 [main] DEBUG (BasicTypeRegistry.java:410) - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3fed2870
2023-12-03 09:45:52,708 +0200 [main] WARN  (DriverManagerConnectionProviderImpl.java:80) - HHH10001002: Using built-in connection pool (not intended for production use)
2023-12-03 09:45:52,709 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:135) - HHH10001005: Loaded JDBC driver class: org.h2.Driver
2023-12-03 09:45:52,709 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:157) - HHH10001012: Connecting with JDBC URL [jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL]
2023-12-03 09:45:52,709 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:163) - HHH10001001: Connection properties: {password=, autocommit=true, user=sa}
2023-12-03 09:45:52,709 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:170) - HHH10001003: Autocommit mode: true
2023-12-03 09:45:52,710 +0200 [main] DEBUG (DriverManagerConnectionProviderImpl.java:358) - Initializing Connection pool with 1 Connections
2023-12-03 09:45:52,710 +0200 [main] INFO  (DriverManagerConnectionProviderImpl.java:366) - HHH10001115: Connection pool size: 10 (min=1)
2023-12-03 09:45:52,721 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:349) - Database ->
       name : H2
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:45:52,721 +0200 [main] DEBUG (JdbcEnvironmentInitiator.java:360) - Driver ->
       name : H2 JDBC Driver
    version : 1.4.200 (2019-10-14)
      major : 1
      minor : 4
2023-12-03 09:45:52,721 +0200 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.1
2023-12-03 09:45:52,728 +0200 [main] WARN  (Dialect.java:353) - HHH000511: The 1.4.200 version for [org.hibernate.dialect.H2Dialect] is no longer supported, hence certain features may not work properly. The minimum supported version is 2.1.214. Check the community dialects project for available legacy versions.
2023-12-03 09:45:52,732 +0200 [main] WARN  (DialectFactoryImpl.java:152) - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2023-12-03 09:45:52,732 +0200 [main] DEBUG (DialectFactoryImpl.java:93) - HHH035001: Using dialect: org.hibernate.dialect.H2Dialect, version: 1.4.200
2023-12-03 09:45:52,735 +0200 [main] DEBUG (IdentifierHelperBuilder.java:116) - JDBC driver metadata reported database stores quoted identifiers in neither upper, lower nor mixed case
2023-12-03 09:45:52,744 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2023-12-03 09:45:52,744 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2023-12-03 09:45:52,744 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2023-12-03 09:45:52,745 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:45:52,745 +0200 [main] DEBUG (JdbcTypeRegistry.java:66) - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2023-12-03 09:45:52,745 +0200 [main] DEBUG (JdbcTypeRegistry.java:58) - addDescriptor(TimestampUtcDescriptor) replaced previous registration(TimestampUtcDescriptor)
2023-12-03 09:45:52,747 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:45:52,747 +0200 [main] DEBUG (BasicTypeRegistry.java:385) - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2023-12-03 09:45:52,749 +0200 [main] DEBUG (TypeConfiguration.java:192) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13cf7d52] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@3a3e4aff]
2023-12-03 09:45:52,765 +0200 [main] DEBUG (Namespace.java:64) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2023-12-03 09:45:52,776 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Planet
2023-12-03 09:45:52,778 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Planet
2023-12-03 09:45:52,781 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Planet on table PLANET
2023-12-03 09:45:52,783 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:45:52,789 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:45:52,790 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:45:52,790 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:45:52,791 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:45:52,792 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:id]
2023-12-03 09:45:52,794 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:45:52,795 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.ID
2023-12-03 09:45:52,795 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:45:52,796 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:45:52,796 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='NAME')
2023-12-03 09:45:52,796 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property name with lazy=false
2023-12-03 09:45:52,796 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Planet:name]
2023-12-03 09:45:52,796 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for name
2023-12-03 09:45:52,796 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: PLANET.NAME
2023-12-03 09:45:52,796 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property name
2023-12-03 09:45:52,798 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Client
2023-12-03 09:45:52,799 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Client
2023-12-03 09:45:52,799 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Client on table CLIENT
2023-12-03 09:45:52,799 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:45:52,799 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:45:52,799 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:45:52,799 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:45:52,800 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:45:52,800 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:id]
2023-12-03 09:45:52,800 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:45:52,800 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.ID
2023-12-03 09:45:52,800 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:45:52,800 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:45:52,800 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='FIRST_NAME')
2023-12-03 09:45:52,800 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property firstName with lazy=false
2023-12-03 09:45:52,800 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:firstName]
2023-12-03 09:45:52,800 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for firstName
2023-12-03 09:45:52,800 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.FIRST_NAME
2023-12-03 09:45:52,800 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property firstName
2023-12-03 09:45:52,800 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='LAST_NAME')
2023-12-03 09:45:52,800 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property lastName with lazy=false
2023-12-03 09:45:52,800 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Client:lastName]
2023-12-03 09:45:52,800 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for lastName
2023-12-03 09:45:52,800 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: CLIENT.LAST_NAME
2023-12-03 09:45:52,800 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property lastName
2023-12-03 09:45:52,801 +0200 [main] DEBUG (EntityBinder.java:209) - Binding entity from annotated class: org.example.entity.Ticket
2023-12-03 09:45:52,801 +0200 [main] DEBUG (EntityBinder.java:1244) - Import with entity name Ticket
2023-12-03 09:45:52,801 +0200 [main] DEBUG (EntityBinder.java:1793) - Bind entity org.example.entity.Ticket on table TICKET
2023-12-03 09:45:52,801 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedDiscriminatorColumn(column='DTYPE')
2023-12-03 09:45:52,803 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='ID')
2023-12-03 09:45:52,804 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:45:52,804 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:45:52,804 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property id with lazy=false
2023-12-03 09:45:52,804 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:id]
2023-12-03 09:45:52,804 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for id
2023-12-03 09:45:52,804 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.ID
2023-12-03 09:45:52,804 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property id
2023-12-03 09:45:52,804 +0200 [main] DEBUG (GeneratorBinder.java:73) - #makeIdGenerator(BasicValue([Column(ID)]), id, identity, , ...)
2023-12-03 09:45:52,805 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='CLIENT_ID')
2023-12-03 09:45:52,806 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:45:52,808 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property client
2023-12-03 09:45:52,808 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn(column='CREATED_AT')
2023-12-03 09:45:52,808 +0200 [main] DEBUG (PropertyBinder.java:252) - MetadataSourceProcessor property createdAt with lazy=false
2023-12-03 09:45:52,808 +0200 [main] DEBUG (AbstractPropertyHolder.java:107) - Attempting to locate auto-apply AttributeConverter for property [org.example.entity.Ticket:createdAt]
2023-12-03 09:45:52,808 +0200 [main] DEBUG (BasicValueBinder.java:1210) - building BasicValue for createdAt
2023-12-03 09:45:52,808 +0200 [main] DEBUG (BasicValue.java:263) - Skipping column re-registration: TICKET.CREATED_AT
2023-12-03 09:45:52,808 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property createdAt
2023-12-03 09:45:52,808 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='FROM_PLANET_ID')
2023-12-03 09:45:52,808 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:45:52,809 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property fromPlanet
2023-12-03 09:45:52,809 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedJoinColumn(column='TO_PLANET_ID')
2023-12-03 09:45:52,809 +0200 [main] DEBUG (AnnotatedColumn.java:261) - Binding column: AnnotatedColumn()
2023-12-03 09:45:52,809 +0200 [main] DEBUG (PropertyBinder.java:392) - Building property toPlanet
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for name
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for firstName
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for lastName
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for id
2023-12-03 09:45:52,810 +0200 [main] DEBUG (BasicValueBinder.java:1288) - Starting `BasicValueBinder#fillSimpleValue` for createdAt
2023-12-03 09:45:52,812 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [planet]
2023-12-03 09:45:52,812 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [client]
2023-12-03 09:45:52,812 +0200 [main] DEBUG (PrimaryKey.java:40) - Forcing column [id] to be non-null as it is part of the primary key for table [ticket]
2023-12-03 09:45:52,813 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:45:52,814 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:45:52,814 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:45:52,818 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Client
2023-12-03 09:45:52,819 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:45:52,819 +0200 [main] DEBUG (InFlightMetadataCollectorImpl.java:1950) - Resolving reference to class: org.example.entity.Planet
2023-12-03 09:45:52,826 +0200 [main] DEBUG (BytecodeProviderInitiator.java:53) - HHH000021: Bytecode provider: bytebuddy
2023-12-03 09:45:52,880 +0200 [main] DEBUG (SessionFactoryImpl.java:210) - Building session factory
2023-12-03 09:45:52,893 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:45:52,893 +0200 [main] DEBUG (SessionFactoryImpl.java:227) - Instantiating SessionFactory with settings: {hibernate.format_sql=true, java.specification.version=17, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.H2Dialect, java.class.path=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/classes/java/main:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/build/resources/main:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.28/a2ff5da8bcd8b1b26f36b806ced63213362c6dcc/lombok-1.18.28.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.h2database/h2/1.4.200/f7533fe7cb8e99c87a43d325a77b4b678ad9031a/h2-1.4.200.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.flywaydb/flyway-core/6.4.1/889ae0316ceadb713fb590b2278ff8fa8898e6aa/flyway-core-6.4.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.orm/hibernate-core/6.3.1.Final/1101d7e09e4853a110fd27a6f35c906f5709ac4f/hibernate-core-6.3.1.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-runtime/4.0.2/e4e4e0c5b0d42054d00dc4023901572a60d368c7/jaxb-runtime-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/jaxb-core/4.0.2/8c29249f6c10f4ee08967783831580b0f5c5360/jaxb-core-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.xml.bind/jakarta.xml.bind-api/4.0.1/ca2330866cbc624c7e5ce982e121db1125d23e15/jakarta.xml.bind-api-4.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.persistence/jakarta.persistence-api/3.1.0/66901fa1c373c6aff65c13791cc11da72060a8d6/jakarta.persistence-api-3.1.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.transaction/jakarta.transaction-api/2.0.1/51a520e3fae406abb84e2e1148e6746ce3f80a1a/jakarta.transaction-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.5.0.Final/c19307cc11f28f5e2679347e633a3294d865334d/jboss-logging-3.5.0.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/6.0.6.Final/77a5f94b56d49508e0ee334751db5b78e5ccd50c/hibernate-commons-annotations-6.0.6.Final.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/io.smallrye/jandex/3.1.2/a6c1c89925c7df06242b03dddb353116ceb9584c/jandex-3.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.5.1/3fe0bed568c62df5e89f4f174c101eab25345b6c/classmate-1.5.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.14.7/34efde5f0bb93afc94aaf9d400521899c4806873/byte-buddy-1.14.7.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.inject/jakarta.inject-api/2.0.1/4c28afe1991a941d7702fe1362c365f0a8641d1e/jakarta.inject-api-2.0.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.10.1/10839f875928f59c622d675091d51a43ea0dc5f7/antlr4-runtime-4.10.1.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.eclipse.angus/angus-activation/2.0.0/72369f4e2314d38de2dcbb277141ef0226f73151/angus-activation-2.0.0.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/jakarta.activation/jakarta.activation-api/2.1.2/640c0d5aff45dbff1e1a1bc09673ff3a02b1ba12/jakarta.activation-api-2.1.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/org.glassfish.jaxb/txw2/4.0.2/24e167be69c29ebb7ee0a3b1f9b546f1dfd111fc/txw2-4.0.2.jar:/Users/dmytropoliashenko/.gradle/caches/modules-2/files-2.1/com.sun.istack/istack-commons-runtime/4.1.1/9b3769c76235bc283b060da4fae2318c6d53f07e/istack-commons-runtime-4.1.1.jar, hibernate.highlight_sql=true, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=https://java.oracle.com/, user.timezone=Europe/Kiev, hibernate.connection.autocommit=true, java.vm.specification.version=17, os.name=Mac OS X, user.country=UA, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib, sun.java.command=org.example.App, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, jdk.debug=release, sun.cpu.endian=little, user.home=/Users/dmytropoliashenko, user.language=uk, java.specification.vendor=Oracle Corporation, java.version.date=2023-07-18, java.home=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home, file.separator=/, java.vm.compressedOopsMode=Zero based, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.runtime.version=17.0.8+9-LTS-211, user.name=dmytropoliashenko, path.separator=:, hibernate.connection.username=****, os.version=14.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:h2:/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13/db/SpaceTravel3;MODE=MYSQL, file.encoding=UTF-8, hibernate.show_sql=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=org.h2.Driver, java.vendor.url.bug=https://bugreport.java.com/bugreport/, java.io.tmpdir=/var/folders/kf/jf36twhs4wsdv7gwlb99l2b80000gn/T/, java.version=17.0.8, user.dir=/Users/dmytropoliashenko/work/Java/GoIt/java_developer_module_13, os.arch=aarch64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@30506c0d, native.encoding=UTF-8, java.library.path=/Users/dmytropoliashenko/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, sharing, java.vm.version=17.0.8+9-LTS-211, hibernate.connection.pool_size=10, sun.io.unicode.encoding=UnicodeBig, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.class.version=61.0}
2023-12-03 09:45:52,894 +0200 [main] DEBUG (SessionFactoryImpl.java:241) - Session factory constructed with filter configurations : {}
2023-12-03 09:45:52,897 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:45:52,911 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was null
2023-12-03 09:45:52,912 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was null
2023-12-03 09:45:52,912 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was null
2023-12-03 09:45:52,912 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was null
2023-12-03 09:45:52,912 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@2c708440] under count; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@655523dd] under every; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.EveryAnyEmulation@6f7e336b] under any; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(floor)] under floor; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ceiling)] under ceiling; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(mod)] under mod; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(abs)] under abs; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sign)] under sign; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sqrt)] under sqrt; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ln)] under ln; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(exp)] under exp; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(power)] under power; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(round)] under round; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sin)] under sin; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cos)] under cos; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(tan)] under tan; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(asin)] under asin; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(acos)] under acos; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan)] under atan; prior registration was null
2023-12-03 09:45:52,913 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(atan2)] under atan2; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50f40653] under sinh; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@50a3d0f6] under cosh; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6e57b5e9] under tanh; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14] under pi; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6a0ac48e] under log; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(coalesce)] under coalesce; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nullif)] under nullif; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(left)] under left; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(right)] under right; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(replace)] under replace; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(concat)] under concat; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lower)] under lower; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(upper)] under upper; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substring)] under substring; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(locate)] under locate; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(character_length)] under character_length; prior registration was null
2023-12-03 09:45:52,914 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : length -> character_length
2023-12-03 09:45:52,915 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LocatePositionEmulation@c6a6c1d] under position; prior registration was null
2023-12-03 09:45:52,915 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InsertSubstringOverlayEmulation@10667848] under overlay; prior registration was null
2023-12-03 09:45:52,915 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TrimFunction@66bacdbc] under trim; prior registration was null
2023-12-03 09:45:52,915 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastFunction@44de94c3] under cast; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@256aa5f2] under collate; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ExtractFunction@616b241a] under extract; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(least)] under least; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(greatest)] under greatest; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CoalesceIfnullEmulation@4441d567] under ifnull; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lpad)] under lpad; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rpad)] under rpad; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.LpadRpadPadEmulation@47ec7422] under pad; prior registration was null
2023-12-03 09:45:52,916 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CastStrEmulation@2b56f5f8] under str; prior registration was null
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@6ee8dcd3] under format; prior registration was null
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampaddFunction@3cd59ef5] under timestampadd; prior registration was null
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TimestampdiffFunction@46d9aec8] under timestampdiff; prior registration was null
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : dateadd -> timestampadd
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : datediff -> timestampdiff
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@1c504e66] under current_date; prior registration was null
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@345cf395] under current_time; prior registration was null
2023-12-03 09:45:52,917 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@bc4d5e1] under current_timestamp; prior registration was null
2023-12-03 09:45:52,918 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current date -> current_date
2023-12-03 09:45:52,918 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current time -> current_time
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current timestamp -> current_timestamp
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@3c6aa04a] under local_date; prior registration was null
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@2257fadf] under local_time; prior registration was null
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@7144655b] under local_datetime; prior registration was null
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@5c82cd4f] under offset_datetime; prior registration was null
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local date -> local_date
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local time -> local_time
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : local datetime -> local_datetime
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : offset datetime -> offset_datetime
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CurrentFunction@35835e65] under instant; prior registration was null
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : current_instant -> instant
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.SqlFunction@1fde4f40] under sql; prior registration was null
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(max)] under max; prior registration was NamedSqmFunctionTemplate(max)
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(min)] under min; prior registration was NamedSqmFunctionTemplate(min)
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sum)] under sum; prior registration was NamedSqmFunctionTemplate(sum)
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(avg)] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:45:52,919 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.CountFunction@49cf9028] under count; prior registration was org.hibernate.dialect.function.CountFunction@2c708440
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.AvgFunction@4992613f] under avg; prior registration was NamedSqmFunctionTemplate(avg)
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(pi)] under pi; prior registration was org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@1abc9f14
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(cot)] under cot; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(radians)] under radians; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(degrees)] under degrees; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(log10)] under log10; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@6fd5717c] under mod; prior registration was NamedSqmFunctionTemplate(mod)
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rand)] under rand; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(soundex)] under soundex; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(translate)] under translate; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitand)] under bitand; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitor)] under bitor; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bitxor)] under bitxor; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_and)] under bit_and; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_or)] under bit_or; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day)] under day; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(month)] under month; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(year)] under year; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(hour)] under hour; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(minute)] under minute; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(second)] under second; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(microsecond)] under microsecond; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_week)] under day_of_week; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_month)] under day_of_month; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : day -> day_of_month
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(day_of_year)] under day_of_year; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(week)] under week; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(quarter)] under quarter; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(monthname)] under monthname; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(dayname)] under dayname; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under localtime; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under localtimestamp; prior registration was null
2023-12-03 09:45:52,920 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtime)] under local_time; prior registration was org.hibernate.dialect.function.CurrentFunction@2257fadf
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(localtimestamp)] under local_datetime; prior registration was org.hibernate.dialect.function.CurrentFunction@7144655b
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.TruncFunction@73ad4ecc] under trunc; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : truncate -> trunc
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@69da0b12] under date_trunc; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bit_length)] under bit_length; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ascii)] under ascii; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(octet_length)] under octet_length; prior registration was NamedSqmFunctionTemplate(octet_length)
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(space)] under space; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(repeat)] under repeat; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(char)] under char; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : chr -> char
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(instr)] under instr; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(substr)] under substr; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@2764c546] under position; prior registration was org.hibernate.dialect.function.LocatePositionEmulation@c6a6c1d
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(ltrim)] under ltrim; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rtrim)] under rtrim; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.query.sqm.function.PatternBasedSqmFunctionDescriptor@59496961] under concat; prior registration was NamedSqmFunctionTemplate(concat)
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curtime)] under curtime; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(curdate)] under curdate; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(now)] under now; prior registration was null
2023-12-03 09:45:52,921 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(sysdate)] under sysdate; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(insert)] under insert; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_and)] under bool_and; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : every -> bool_and
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(bool_or)] under bool_or; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:307) - Registering alternate key : any -> bool_or
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(median)] under median; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_pop)] under stddev_pop; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(stddev_samp)] under stddev_samp; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_pop)] under var_pop; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(var_samp)] under var_samp; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.FormatFunction@408b87aa] under format; prior registration was org.hibernate.dialect.function.FormatFunction@6ee8dcd3
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(rownum)] under rownum; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(row_number)] under row_number; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lag)] under lag; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(lead)] under lead; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(first_value)] under first_value; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(last_value)] under last_value; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [NamedSqmFunctionTemplate(nth_value)] under nth_value; prior registration was null
2023-12-03 09:45:52,922 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.ListaggFunction@1ad8df52] under listagg; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@26d820eb] under mode; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@507d20bb] under percentile_cont; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.InverseDistributionFunction@9fec931] under percentile_disc; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7d0cc890] under rank; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@49293b43] under dense_rank; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@5ff60a8c] under percent_rank; prior registration was null
2023-12-03 09:45:52,923 +0200 [main] DEBUG (SqmFunctionRegistry.java:90) - Registered SqmFunctionTemplate [org.hibernate.dialect.function.HypotheticalSetFunction@7ce4de34] under cume_dist; prior registration was null
2023-12-03 09:45:52,924 +0200 [main] DEBUG (QueryEngineImpl.java:100) - abs(NUMERIC arg)
2023-12-03 09:45:52,924 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double acos(NUMERIC arg)
2023-12-03 09:45:52,924 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean any(BOOLEAN predicate)
2023-12-03 09:45:52,924 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer ascii(STRING arg)
2023-12-03 09:45:52,924 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double asin(NUMERIC arg)
2023-12-03 09:45:52,924 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan(NUMERIC arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double atan2(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double avg(NUMERIC arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_and(arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer bit_length(STRING_OR_CLOB arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bit_or(arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitand(arg0, arg1)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitor(arg0, arg1)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - bitxor(arg0, arg1)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_and(BOOLEAN predicate)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean bool_or(BOOLEAN predicate)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - cast(arg as Type)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ceiling(NUMERIC arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character char(INTEGER arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer character_length(STRING_OR_CLOB arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Character chr(INTEGER arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - coalesce(arg0[, arg1[, ...]])
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String collate(STRING string as COLLATION collation)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String concat(STRING string0[, STRING string1[, ...]])
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cos(NUMERIC arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cosh(NUMERIC arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cot(NUMERIC arg)
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long count([distinct ]{arg|*})
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double cume_dist([arg0[, ...]])
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date curdate()
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current date
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current time
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current timestamp
2023-12-03 09:45:52,925 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Date current_date
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant current_instant
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time current_time
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp current_timestamp
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time curtime()
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - date_trunc(STRING field, TEMPORAL datetime)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - dateadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) datediff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day(DATE arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_month(DATE arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_week(DATE arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer day_of_year(DATE arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String dayname(DATE arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double degrees(NUMERIC arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long dense_rank([arg0[, ...]])
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Boolean every(BOOLEAN predicate)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double exp(NUMERIC arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - extract(TEMPORAL_UNIT field from TEMPORAL arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - first_valueANY value
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - floor(NUMERIC arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String format(TEMPORAL datetime as STRING pattern)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - greatest(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer hour(TIME arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - ifnull(arg0, arg1)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String insert(STRING string, INTEGER start, INTEGER length, STRING replacement)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Instant instant
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer instr(STRING string, STRING pattern[, INTEGER start[, INTEGER occurrence]])
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - lagANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - last_valueANY value
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - leadANY value[, INTEGER offset[, ANY default]]
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - least(COMPARABLE arg0, COMPARABLE arg1[, arg2[, ...]])
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String left(STRING string, INTEGER length)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer length(STRING_OR_CLOB arg)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String listagg(STRING arg0, STRING arg1)
2023-12-03 09:45:52,926 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double ln(NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local date
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local datetime
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local time
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDate local_date
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalDateTime local_datetime
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - LocalTime local_time
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Time localtime
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp localtimestamp
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer locate(STRING pattern, STRING string[, INTEGER start])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log(NUMERIC base, NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double log10(NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lower(STRING string)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String lpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String ltrim(STRING string)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - max(COMPARABLE arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double median(NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer microsecond(TIME arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - min(COMPARABLE arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer minute(TIME arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer mod(INTEGER arg0, INTEGER arg1)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - mode()
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer month(DATE arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String monthname(DATE arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp now()
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nth_valueANY value, INTEGER nth
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - nullif(arg0, arg1)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer octet_length(STRING_OR_CLOB arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset datetime
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - OffsetDateTime offset_datetime
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String overlay(STRING string placing STRING replacement from INTEGER start[ for INTEGER length])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String pad(STRING string with INTEGER length {leading|trailing}[ STRING character])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double percent_rank([arg0[, ...]])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_cont(NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - percentile_disc(NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double pi
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer position(STRING pattern in STRING string)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double power(NUMERIC arg0, NUMERIC arg1)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer quarter(DATE arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double radians(NUMERIC arg)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double rand([INTEGER seed])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rank([arg0[, ...]])
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String repeat(STRING string, INTEGER times)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String replace(STRING string, STRING pattern, STRING replacement)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String right(STRING string, INTEGER length)
2023-12-03 09:45:52,927 +0200 [main] DEBUG (QueryEngineImpl.java:100) - round(NUMERIC number[, INTEGER places])
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long row_number()
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Long rownum()
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rpad(STRING string, INTEGER length[, STRING padding])
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String rtrim(STRING string)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer second(TIME arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer sign(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sin(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sinh(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String soundex(arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String space(INTEGER arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Object sql
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double sqrt(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_pop(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double stddev_samp(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String str(arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substr(STRING string, INTEGER start[, INTEGER length])
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String substring(STRING string{ from|,} INTEGER start[{ for|,} INTEGER length])
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - sum(arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Timestamp sysdate
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tan(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double tanh(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - timestampadd(TEMPORAL_UNIT field, INTEGER magnitude, TEMPORAL datetime)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - basicType@12(java.lang.Long,-5)|basicType@15(java.lang.Double,8) timestampdiff(TEMPORAL_UNIT field, TEMPORAL start, TEMPORAL end)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String translate(STRING arg0, STRING arg1, STRING arg2)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String trim([[{leading|trailing|both} ][STRING arg0 ]from] STRING arg1)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - trunc( ... )
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - truncate( ... )
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - String upper(STRING string)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_pop(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Double var_samp(NUMERIC arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer week(DATE arg)
2023-12-03 09:45:52,928 +0200 [main] DEBUG (QueryEngineImpl.java:100) - Integer year(DATE arg)
2023-12-03 09:45:52,930 +0200 [main] DEBUG (QueryInterpretationCacheStandardImpl.java:48) - Starting QueryInterpretationCache(2048)
2023-12-03 09:45:52,964 +0200 [main] DEBUG (SessionFactoryServiceRegistryImpl.java:105) - EventListenerRegistry access via ServiceRegistry is deprecated.  Use `sessionFactory.getEventEngine().getListenerRegistry()` instead
2023-12-03 09:45:52,964 +0200 [main] DEBUG (EntityCopyObserverFactoryInitiator.java:39) - Configured EntityCopyObserver strategy: disallow
2023-12-03 09:45:52,989 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:52,990 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:52,991 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:52,991 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:52,991 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:52,991 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:52,991 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Ticket] is safe
2023-12-03 09:45:52,991 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Ticket
2023-12-03 09:45:53,065 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Ticket]: private accessor [client]
2023-12-03 09:45:53,067 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#client` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:53,067 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#fromPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:53,067 +0200 [main] DEBUG (EnhancementHelper.java:46) - To-one property `org.example.entity.Ticket#toPlanet` was mapped with LAZY + NO_PROXY but the class was not enhanced
2023-12-03 09:45:53,079 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Planet] is safe
2023-12-03 09:45:53,079 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Planet
2023-12-03 09:45:53,085 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Planet]: private accessor [name]
2023-12-03 09:45:53,085 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [org.example.entity.Client] is safe
2023-12-03 09:45:53,085 +0200 [main] DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : org.example.entity.Client
2023-12-03 09:45:53,090 +0200 [main] DEBUG (BytecodeProviderImpl.java:235) - HHH000513: Unable to create the ReflectionOptimizer for [org.example.entity.Client]: private accessor [firstName]
2023-12-03 09:45:53,099 +0200 [main] DEBUG (MappingModelCreationProcess.java:92) - Starting post-init callbacks
2023-12-03 09:45:53,099 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.client]
2023-12-03 09:45:53,100 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.fromPlanet]
2023-12-03 09:45:53,101 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : To-one key - NavigableRole[org.example.entity.Ticket.toPlanet]
2023-12-03 09:45:53,101 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Ticket) `staticFetchableList` generator
2023-12-03 09:45:53,101 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Planet) `staticFetchableList` generator
2023-12-03 09:45:53,101 +0200 [main] DEBUG (MappingModelCreationProcess.java:242) - Starting PostInitCallbackEntry : Entity(org.example.entity.Client) `staticFetchableList` generator
2023-12-03 09:45:53,126 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Ticket
2023-12-03 09:45:53,126 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from TICKET where ID=?
2023-12-03 09:45:53,126 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into TICKET (CLIENT_ID,CREATED_AT,FROM_PLANET_ID,TO_PLANET_ID,ID) values (?,?,?,?,default)
2023-12-03 09:45:53,126 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update TICKET set CLIENT_ID=?,CREATED_AT=?,FROM_PLANET_ID=?,TO_PLANET_ID=? where ID=?
2023-12-03 09:45:53,127 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from TICKET where ID=?
2023-12-03 09:45:53,133 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : t1_0
2023-12-03 09:45:53,134 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Ticket)] with identifierForTableGroup [org.example.entity.Ticket] for NavigablePath [org.example.entity.Ticket] 
2023-12-03 09:45:53,138 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@5d7399f9] with identifierForTableGroup [org.example.entity.Ticket.client] for NavigablePath [org.example.entity.Ticket.client] 
2023-12-03 09:45:53,139 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:45:53,141 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@45b15381] with identifierForTableGroup [org.example.entity.Ticket.fromPlanet] for NavigablePath [org.example.entity.Ticket.fromPlanet] 
2023-12-03 09:45:53,141 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : fp1_0
2023-12-03 09:45:53,141 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [org.hibernate.sql.ast.tree.from.LazyTableGroup@2dbfcf7] with identifierForTableGroup [org.example.entity.Ticket.toPlanet] for NavigablePath [org.example.entity.Ticket.toPlanet] 
2023-12-03 09:45:53,141 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : tp1_0
2023-12-03 09:45:53,143 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Ticket]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.client]
 |  +-BasicFetch [org.example.entity.Ticket.createdAt]
 |  +-EntityFetchJoinedImpl [org.example.entity.Ticket.fromPlanet]
 |  \-EntityFetchJoinedImpl [org.example.entity.Ticket.toPlanet]

2023-12-03 09:45:53,144 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (t1 : org.example.entity.Ticket) {
          primaryTableReference : TICKET as t1_0
          TableGroupJoins {
             join LazyTableGroup (c1 : org.example.entity.Ticket.client) {
              primaryTableReference : CLIENT as c1_0
            }
             join LazyTableGroup (fp1 : org.example.entity.Ticket.fromPlanet) {
              primaryTableReference : PLANET as fp1_0
            }
             join LazyTableGroup (tp1 : org.example.entity.Ticket.toPlanet) {
              primaryTableReference : PLANET as tp1_0
            }
          }
        }
      }
    }

2023-12-03 09:45:53,148 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Planet
2023-12-03 09:45:53,148 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from PLANET where ID=?
2023-12-03 09:45:53,148 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into PLANET (NAME,ID) values (?,default)
2023-12-03 09:45:53,148 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update PLANET set NAME=? where ID=?
2023-12-03 09:45:53,148 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from PLANET where ID=?
2023-12-03 09:45:53,148 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : p1_0
2023-12-03 09:45:53,148 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Planet)] with identifierForTableGroup [org.example.entity.Planet] for NavigablePath [org.example.entity.Planet] 
2023-12-03 09:45:53,149 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Planet]
 |  \-BasicFetch [org.example.entity.Planet.name]

2023-12-03 09:45:53,149 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (p1 : org.example.entity.Planet) {
          primaryTableReference : PLANET as p1_0
        }
      }
    }

2023-12-03 09:45:53,149 +0200 [main] DEBUG (AbstractEntityPersister.java:2984) - Static SQL for entity: org.example.entity.Client
2023-12-03 09:45:53,149 +0200 [main] DEBUG (AbstractEntityPersister.java:2989) -  Version select: select ID from CLIENT where ID=?
2023-12-03 09:45:53,149 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert (0): insert into CLIENT (FIRST_NAME,LAST_NAME,ID) values (?,?,default)
2023-12-03 09:45:53,149 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update (0): update CLIENT set FIRST_NAME=?,LAST_NAME=? where ID=?
2023-12-03 09:45:53,149 +0200 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete (0): delete from CLIENT where ID=?
2023-12-03 09:45:53,149 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:45:53,149 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client)] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:45:53,149 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client]
 |  +-BasicFetch [org.example.entity.Client.firstName]
 |  \-BasicFetch [org.example.entity.Client.lastName]

2023-12-03 09:45:53,149 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:45:53,159 +0200 [main] DEBUG (JtaPlatformInitiator.java:45) - No JtaPlatform was specified, checking resolver
2023-12-03 09:45:53,159 +0200 [main] DEBUG (JtaPlatformResolverInitiator.java:34) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2023-12-03 09:45:53,160 +0200 [main] DEBUG (StandardJtaPlatformResolver.java:138) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-12-03 09:45:53,160 +0200 [main] INFO  (JtaPlatformInitiator.java:58) - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2023-12-03 09:45:53,160 +0200 [main] DEBUG (TypeConfiguration.java:204) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@13cf7d52] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@5a917723]
2023-12-03 09:45:53,161 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:243) - Checking 0 named HQL queries
2023-12-03 09:45:53,161 +0200 [main] DEBUG (NamedObjectRepositoryImpl.java:267) - Checking 0 named SQL queries
2023-12-03 09:45:53,161 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:762) - No schema actions specified for contributor `orm`; doing nothing
2023-12-03 09:45:53,161 +0200 [main] DEBUG (SchemaManagementToolCoordinator.java:74) - No actions found; doing nothing
2023-12-03 09:45:53,162 +0200 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@759de304
2023-12-03 09:45:53,162 +0200 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 735031fe-f71f-46d7-8d30-2b8b98339c6b (<unnamed>)
2023-12-03 09:45:53,162 +0200 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2023-12-03 09:45:53,162 +0200 [main] DEBUG (SessionFactoryImpl.java:314) - Instantiated SessionFactory
2023-12-03 09:45:53,178 +0200 [main] DEBUG (StatisticsInitiator.java:87) - Statistics initialized [enabled=false]
2023-12-03 09:45:53,185 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,191 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,191 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client -> EntityResultInitializer(org.example.entity.Client)@1117448897 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:45:53,193 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0 
    [34mwhere[0m
        c1_0.ID=?
2023-12-03 09:45:53,195 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client): 1
2023-12-03 09:45:53,196 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client#1] : 1288163341
2023-12-03 09:45:53,196 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:45:53,196 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:45:53,198 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client#1
2023-12-03 09:45:53,198 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@5d152bcd
2023-12-03 09:45:53,199 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,230 +0200 [main] DEBUG (SqlAliasBaseImpl.java:33) - Created new SQL alias : c1_0
2023-12-03 09:45:53,230 +0200 [main] DEBUG (SimpleFromClauseAccessImpl.java:98) - Registration of TableGroup [StandardTableGroup(org.example.entity.Client(648575148894666))] with identifierForTableGroup [org.example.entity.Client] for NavigablePath [org.example.entity.Client] 
2023-12-03 09:45:53,234 +0200 [main] DEBUG (DomainResultGraphPrinter.java:67) - DomainResult Graph:
 \-EntityResultImpl [org.example.entity.Client(648575148894666)]
 |  +-BasicFetch [org.example.entity.Client(648575148894666).firstName]
 |  \-BasicFetch [org.example.entity.Client(648575148894666).lastName]

2023-12-03 09:45:53,234 +0200 [main] DEBUG (SqlTreePrinter.java:46) - SQL AST Tree:
    SelectStatement {
      FromClause {
        StandardTableGroup (c1 : org.example.entity.Client(648575148894666)) {
          primaryTableReference : CLIENT as c1_0
        }
      }
    }

2023-12-03 09:45:53,235 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = NORMAL
2023-12-03 09:45:53,235 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,235 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Client(648575148894666) -> EntityResultInitializer(org.example.entity.Client(648575148894666))@697001207 (SingleTableEntityPersister(org.example.entity.Client))
2023-12-03 09:45:53,235 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        c1_0.ID,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME 
    [34mfrom[0m
        CLIENT c1_0
2023-12-03 09:45:53,235 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [1]
2023-12-03 09:45:53,235 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 1
2023-12-03 09:45:53,235 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#1] : 1986679541
2023-12-03 09:45:53,236 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Ivan]
2023-12-03 09:45:53,236 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Petrov]
2023-12-03 09:45:53,236 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#1
2023-12-03 09:45:53,236 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,236 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [2]
2023-12-03 09:45:53,236 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 2
2023-12-03 09:45:53,236 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#2] : 1492980244
2023-12-03 09:45:53,236 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Oksana]
2023-12-03 09:45:53,236 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kovalenko]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#2
2023-12-03 09:45:53,237 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [3]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 3
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#3] : 2106390956
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Andriy]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Ivanov]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#3
2023-12-03 09:45:53,237 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [4]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 4
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#4] : 1594600318
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Yulia]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Mykhailenko]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#4
2023-12-03 09:45:53,237 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [5]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 5
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#5] : 61321954
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Serhiy]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Dmytriv]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#5
2023-12-03 09:45:53,237 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [6]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 6
2023-12-03 09:45:53,237 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#6] : 863661360
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Natalia]
2023-12-03 09:45:53,237 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Tkachenko]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#6
2023-12-03 09:45:53,238 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [7]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 7
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#7] : 690070378
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Roman]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Zhytomyrsky]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#7
2023-12-03 09:45:53,238 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [8]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 8
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#8] : 729005419
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Olga]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Kozak]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#8
2023-12-03 09:45:53,238 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [9]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 9
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#9] : 360528453
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Viktor]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Lysenko]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#9
2023-12-03 09:45:53,238 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [10]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 10
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#10] : 1963906615
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mariya]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Vasyliev]
2023-12-03 09:45:53,238 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#10
2023-12-03 09:45:53,239 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,239 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [0] - [11]
2023-12-03 09:45:53,239 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Client(648575148894666)): 11
2023-12-03 09:45:53,239 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Client(648575148894666)#11] : 1368391951
2023-12-03 09:45:53,239 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Dmitry]
2023-12-03 09:45:53,239 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [2] - [Poliashenko]
2023-12-03 09:45:53,239 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Client(648575148894666)#11
2023-12-03 09:45:53,239 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@7c241a9f
2023-12-03 09:45:53,239 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,239 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,241 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,241 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,241 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@817833695 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:45:53,241 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:45:53,241 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 1
2023-12-03 09:45:53,241 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#1] : 956315623
2023-12-03 09:45:53,241 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:45:53,241 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#1
2023-12-03 09:45:53,241 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@704067c6
2023-12-03 09:45:53,242 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,242 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,242 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,242 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@2135267024 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:45:53,242 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:45:53,242 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 2
2023-12-03 09:45:53,242 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#2] : 721975085
2023-12-03 09:45:53,242 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Venus]
2023-12-03 09:45:53,242 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#2
2023-12-03 09:45:53,242 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@78a8978a
2023-12-03 09:45:53,242 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,242 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,242 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,242 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@253171986 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:45:53,243 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:45:53,243 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 6
2023-12-03 09:45:53,243 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#6] : 700249373
2023-12-03 09:45:53,243 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:45:53,243 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#6
2023-12-03 09:45:53,243 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@1e54a6b1
2023-12-03 09:45:53,243 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,244 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:45:53,244 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:45:53,247 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:45:53,247 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:45:53,248 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:45:53,249 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2023-12-03 09:45:53,249 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:45:53,249 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:45:53,250 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=6}
2023-12-03 09:45:53,253 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mdelete[0m 
    [34mfrom[0m
        PLANET 
    [34mwhere[0m
        ID=?
2023-12-03 09:45:53,255 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,255 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,255 +0200 [main] INFO  (PlanetCrudService.java:79) - Planet deleted: Mars
2023-12-03 09:45:53,255 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,255 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,255 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@527969285 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:45:53,255 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 7
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#7] : 257585702
2023-12-03 09:45:53,256 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#7
2023-12-03 09:45:53,256 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@519c6fcc
2023-12-03 09:45:53,256 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,256 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:45:53,256 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:45:53,256 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2023-12-03 09:45:53,256 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:45:53,256 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:45:53,256 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=7}
2023-12-03 09:45:53,256 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mdelete[0m 
    [34mfrom[0m
        PLANET 
    [34mwhere[0m
        ID=?
2023-12-03 09:45:53,256 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,256 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,256 +0200 [main] INFO  (PlanetCrudService.java:79) - Planet deleted: Mars
2023-12-03 09:45:53,257 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,257 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,257 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@2127407451 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:45:53,257 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 8
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#8] : 1899640261
2023-12-03 09:45:53,257 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#8
2023-12-03 09:45:53,257 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@62aeddc8
2023-12-03 09:45:53,257 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,257 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:45:53,257 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:45:53,257 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2023-12-03 09:45:53,257 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:45:53,258 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:45:53,258 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=8}
2023-12-03 09:45:53,258 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mdelete[0m 
    [34mfrom[0m
        PLANET 
    [34mwhere[0m
        ID=?
2023-12-03 09:45:53,258 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,258 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,258 +0200 [main] INFO  (PlanetCrudService.java:79) - Planet deleted: Mars
2023-12-03 09:45:53,258 +0200 [main] DEBUG (JdbcSelectExecutorStandardImpl.java:455) - Skipping reading Query result cache data: cache-enabled = false, cache-mode = IGNORE
2023-12-03 09:45:53,258 +0200 [main] DEBUG (ResultsHelper.java:153) - Initializer list
2023-12-03 09:45:53,258 +0200 [main] DEBUG (ResultsHelper.java:155) -     org.example.entity.Planet -> EntityResultInitializer(org.example.entity.Planet)@1460139539 (SingleTableEntityPersister(org.example.entity.Planet))
2023-12-03 09:45:53,258 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mselect[0m
        p1_0.ID,
        p1_0.NAME 
    [34mfrom[0m
        PLANET p1_0 
    [34mwhere[0m
        p1_0.ID=?
2023-12-03 09:45:53,258 +0200 [main] DEBUG (AbstractEntityInitializer.java:300) - (EntityResultInitializer) Hydrated EntityKey (org.example.entity.Planet): 9
2023-12-03 09:45:53,258 +0200 [main] DEBUG (AbstractEntityInitializer.java:685) - (EntityResultInitializer) Created new entity instance [org.example.entity.Planet#9] : 831931099
2023-12-03 09:45:53,258 +0200 [main] DEBUG (BasicResultAssembler.java:61) - Extracted JDBC value [1] - [Mars]
2023-12-03 09:45:53,258 +0200 [main] DEBUG (AbstractEntityInitializer.java:885) - (EntityResultInitializer) Done materializing entityInstance : org.example.entity.Planet#9
2023-12-03 09:45:53,258 +0200 [main] DEBUG (StandardRowReader.java:92) - Calling top-level assembler (0 / 1) : org.hibernate.sql.results.graph.entity.internal.EntityAssembler@59498d94
2023-12-03 09:45:53,259 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,259 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:45:53,259 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:45:53,259 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:45:53,259 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:45:53,259 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:45:53,259 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 1 deletions to 1 objects
2023-12-03 09:45:53,259 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:45:53,259 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:45:53,259 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Planet{name=Mars, id=9}
2023-12-03 09:45:53,259 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34mdelete[0m 
    [34mfrom[0m
        PLANET 
    [34mwhere[0m
        ID=?
2023-12-03 09:45:53,259 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,259 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,259 +0200 [main] INFO  (PlanetCrudService.java:79) - Planet deleted: Mars
2023-12-03 09:45:53,260 +0200 [main] DEBUG (TransactionImpl.java:53) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2023-12-03 09:45:53,260 +0200 [main] DEBUG (TransactionImpl.java:81) - begin
2023-12-03 09:45:53,261 +0200 [main] DEBUG (ActionQueue.java:289) - Executing identity-insert immediately
2023-12-03 09:45:53,262 +0200 [main] DEBUG (SqlStatementLogger.java:135) - 
    [34minsert[0m 
    [34minto[0m
        TICKET
        (CLIENT_ID, CREATED_AT, FROM_PLANET_ID, TO_PLANET_ID, ID) 
    [34mvalues[0m
        (?, ?, ?, ?, [34mdefault[0m)
2023-12-03 09:45:53,263 +0200 [main] DEBUG (IdentifierGeneratorHelper.java:92) - Natively generated identity (org.example.entity.Ticket) : 5
2023-12-03 09:45:53,264 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:105) - HHH000387: ResultSet's statement was not registered
2023-12-03 09:45:53,265 +0200 [main] DEBUG (ResourceRegistryStandardImpl.java:203) - Exception clearing maxRows/queryTimeout [The object is already closed [90007-200]]
2023-12-03 09:45:53,265 +0200 [main] DEBUG (TransactionImpl.java:98) - committing
2023-12-03 09:45:53,265 +0200 [main] DEBUG (AbstractFlushingEventListener.java:136) - Processing flush-time cascades
2023-12-03 09:45:53,265 +0200 [main] DEBUG (AbstractFlushingEventListener.java:185) - Dirty checking collections
2023-12-03 09:45:53,265 +0200 [main] DEBUG (AbstractFlushingEventListener.java:110) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2023-12-03 09:45:53,265 +0200 [main] DEBUG (AbstractFlushingEventListener.java:117) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2023-12-03 09:45:53,265 +0200 [main] DEBUG (EntityPrinter.java:111) - Listing entities:
2023-12-03 09:45:53,270 +0200 [main] DEBUG (EntityPrinter.java:118) - org.example.entity.Ticket{createdAt=Sun Dec 03 09:45:53 EET 2023, client=org.example.entity.Client#1, id=5, fromPlanet=org.example.entity.Planet#1, toPlanet=org.example.entity.Planet#2}
2023-12-03 09:45:53,270 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,270 +0200 [main] DEBUG (LogicalConnectionManagedImpl.java:179) - Initiating JDBC connection release from afterTransaction
2023-12-03 09:45:53,270 +0200 [main] INFO  (TicketCrudService.java:29) - Ticket created: 5
